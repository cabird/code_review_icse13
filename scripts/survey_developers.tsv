Response ID	Which best describes your primary work area?	"If you selected Other, please describe your primary work area "	How many years have you worked in the software industry? (decimals okay)	How many years have you worked at Microsoft? (decimals okay)		How many developers are on your immediate team (including yourself)?	Is it a policy in your team to perform code reviews?	"What are your motivations for code review? Please pick the three most important ones (in order, without ties) from the following list"	"If you have other motivations for code review that are in the top three but are not listed above, please list them here."		Consider the following questions from the perspective of you being the reviewer of a code review submission.	"As a reviewer, under which conditions do you need to talk in person to the author of a code review submission?"	"As a reviewer, if the files being modified by a code review submission are owned by you (or you are very familiar with them), how often do you talk in person with the author of the code review?"	"As a reviewer, if the files being modified by a code review submission are unfamiliar to you (or are new), how often do you talk in person with the author of the code review?"	Does it take longer to review files that you are not familiar with (or files that are new)?	Why or why not?	How much understanding of the code review submission do you need for achieving the following:		Consider the following questions from the perspective of you being the author of a code review submission.	How do you select the people to send your code review to?	Is there a difference in comments/feedback you receive when a reviewer is very familiar with or the owner of the files you changed in a code review? 	"If there is a difference, what is different in the comments/feedback?"	"If you have any additional feedback that you feel would be helpful to our research in this area, please share it here.  (Remember that the survey is anonymous, so please enter your alias below if your feedback requires follow-up.)"	"If you would like to be notified with the results of our research, please email us (alias cbird) or enter your alias here and we will send it to you when it is completed."	"If you would like to be entered into a drawing for one of two $50 Amazon gift cards, please enter your alias here or, if you are worried about anonymity, email us (alias cbird) with subject ""Code Review Survey Drawing""."
6503243	Development		9	6		6	Yes	Keeping track of comments and rationale on code changes / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important					between 50% and 75% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"								
6503245	Test		3	1		9	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When i can't understand the responses or code.	between 25% and 50% of the time	between 25% and 50% of the time	No	I can find the user who modified the file using tfs and read the comments for the checkin.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			people who have worked on the same files or modifying them.	Yes	The comments are more specific			rakashya
6503247	Development		7	5		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 50% and 75% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes			martgag	martgag
6503248	Development		14	12		50	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"	"Catching performance issues (especially with sql code) We built somve v-teams with areas of expertise like *sql, security etc) and make sure that the code is reviewed by someone from the vteam"			If the code is too complex If code review comments are not resolved after 2 iterations	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"People who co own the components My manager's immediate team People from virtual team with expertise in particular technologies (eg sql, secrity)"	Yes			vtadas	vtadas
6503249	Development		7	6		40	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					up to 25% of the time	up to 25% of the time	Yes										
6503250	Development		25	6		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			By default I send to our entire dev team	Yes	More comments from people who are familiar with the code		dfandel	dfandel
6503251	Development		7.1	5.66		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					between 50% and 75% of the time	More than 75% of the time	Yes		"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes			sreekarm	sreekarm
6503252	Test		12	7		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"To get a better understanding of the review and purpose of the review, or possible alternative solutions to the problem being fixed."	up to 25% of the time	between 25% and 50% of the time	Yes	Need to read surrounding code to understand interaction.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"File owners, stakeholders, team members"	Yes	More comprehensive feedback; less superficial			jvarga
6503254	Development		15	2		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"large code changes, new code."	up to 25% of the time	Never	Yes	need to understand the code first.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			team members.	No				anpaz
6503255	Test		1.4	1.4		60	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				* in case of a major code change / redesign that I feel is needed;   * to train interns / new team members re good design practices	up to 25% of the time	up to 25% of the time	Yes	"there might be design decisions that were not explained well in comments, in which case it takes more time to understand the implementation"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			2-3 people who are familiar with that area of the product  one senior developer with broad technical understanding of the product	No			miketeod	miketeod
6503256	Development		13	13		10	Yes	"Avoiding build breaks / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				To get a better context of code that i'm not familiar with	up to 25% of the time	between 25% and 50% of the time	Yes	Need to spend extra time understanding the code	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			People who work in similar areas.  People who have a histroty of completing reviews in a timely manner	Yes	more insight into the code often produces more detailed feedback.			cjensen
6503257	Development		7	5		8	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Almost only if there is a significant disagreement about major implementation aspects.	up to 25% of the time	between 25% and 50% of the time	Yes	A useful review requires understanding.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding"			Shared alias + individuals familiar with target area.	Yes	"Deeper details are explored, more subtle issues are found."			ahigley
6503259	Development		13	3		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Architectural changes	up to 25% of the time	up to 25% of the time	Yes	To familirize myself with the code and understand why the changes were made this way.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Whoever would be familiar with the area changes are made.	Yes	More thorough feedback isgiven.		vpavlov	vpavlov
6503260	Development		10	6		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"If I have a question that seems too complex to discuss within the review, or that has broad impact that blocks the review; or if we're not converging on an area of feedback."	up to 25% of the time	between 25% and 50% of the time	Yes	"If I'm not familiar with the file, I need to review surrounding code to understand the context of the changes."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Who knows the code, provides useful feedback, and is responsive to CR requests."	Yes	"A reviewer who knows the code can catch subtle bugs, or suggest better ways of doing things. They have insight on why the code developed the way it did, past pitfalls to avoid, and how to fit with the overall design and future plans.  A reviewer who doesn't know the code can catch simple oversights and suggest best practices; but a review from a person who knows the code actually gives me confidence in the change."		dglick	dglick
6503261	Test		8	6		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"					Never	Never	Yes	Need to understand the architecture of the unknown code before reviewing it. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			usually 10. 	No			burhana	burhana
6503262	Development		12	7		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Helping improving the development process in general / First Most Important"					Never	up to 25% of the time	Yes		"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"				No				
6503263	Development		3.5	3.5		25	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 25% and 50% of the time	up to 25% of the time	Yes						No				
6503264	Test		20	8		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"Code Improvement, Collective Code Ownership and Team Assessment are all good ones as well."			To clarify expected behavior/assumptions about how the system should work when it's not clear from the code comments When there are more than a few responses in a particular comment and I want to see it resolved quickly.	up to 25% of the time	up to 25% of the time	No	"The right answer here is that it depends on the complexity of the code, not my familiarity with it.   More complex code takes longer to review, period."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			People familiar with area I'm testing or dev for feature I'm added tests/changing product for..	Yes	"More specific details to code performance, optimization, etc"	"It's too bad I can't re-open code flow reviews after marking them complete when we need to reactive a check-in when the fix fails to work as expected (or the initial feature). I'd like it to ping all reviews, not just the to: reviews on comments/sign-offs."	dawalter	dawalter
6503265	Development		4	2		1	Yes	"Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important"				"understanding the code if  a. it's complex, heard to understand, and lacks sufficient comments b. it's a different area c. if there is a better way to solve it and it is hard to explain over code flow/email d. need a review, and people aren't reviewing it, because they are busy or something else."	More than 75% of the time	More than 75% of the time	Yes	"because it is necessary to understand why that change is needed, and then to check if it could be done in a better way."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			to the team who owns the code. including the author in the required field. The 	Yes	the feedback has more substance. It has fewer code-decoration-type comments		srama	srama
6503266	Development		4	3		12	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				1. Missing description of changes. 2. Talk about files for which CodeFlow won't show the changes correctly. 	up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			Mostly code owners or people who work in similar area.	Yes	"For an unfamiliar reviewer, the comments are mostly generic, around formatting, general coding practices etc."		hdhadda	hdhadda
6503267	Test		12	8		7	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important"				(1) If their code is not clear from the combination of code/comments; (2) To get the bigger picture of how their changes/fixes fit into the overall product if its not clear from the review description; (3) If I am unfamiliar with their features and need to get a quick overview	up to 25% of the time	up to 25% of the time	Yes	"If I'm already familiar with the files, that means I have either worked on them or reviewed them in the past and have an idea of how the code works. At that point, it becomes more straightforward to review small changes. Big changes/rewrites always take longer. "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			For new code: I usually choose another SDET familiar with the feature area plus the developer of the feature as required. For bug fixes: I usually choose another SDET familiar with the feature area For all code: By policy we automatically send the reviews to our feature crew as optional. 	No		"Having code reviews of the logic in the code is an important way to find bugs early. I like to say that I try to find bugs before they make it into the product. I also feel strongly that comments in code are important, and quite often ask for more comments to be added to code, especially if the code is complex. "	sheaton	sheaton
6503268	Test		10	4		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important"					up to 25% of the time	up to 25% of the time	Yes	"Because I review it more thoroughly to ensure the submitter is following our patterns, also that there are not any bugs in their code and they've included the proper unit tests with their code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			It is part of our working aggreement to send it to our entire team.	Yes				jennip
6503269	Development		13	6			Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding"								
6503270	Test		17	5.8		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Helping improving the development process in general / Third Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes	Sometimes I need to understand the logic behind the implementation.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			as per team policies. most of the time peer reviews.	Yes	"Feedback is focused more on implementation details than simple sintax related (such as ""use camel case"" etc.)"			csiicu
6503271	Development		3	3		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Usually when they reject a valid comment and need a stronger way of being convinced.	up to 25% of the time	up to 25% of the time	Yes	"If I'm not familiar, I need to spend more time trying to determine what the edge case scenarios are and to get a better idea of what other things can be affected by the change."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who are familiar with the area are chosen first. Then one random person.	Yes	The person who owns the area is better at coming up with scenarios I hadn't considered and they're less likely to think there's an issue where there isn't.	I like to mark up and make comments for myself on the person's CR when reviewing it but I'd like a way to hide these comments from others. I use these personal comments to help me build my understanding and ask myself questions about the design that I want to figure out on my own without others commenting.		jarona
6503272	Development		6	2.5		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Any time there is a bit of code that is non-obvious in functionality, or when I have questions about intent."	between 50% and 75% of the time	More than 75% of the time	Yes	Harder to see how changes affect the code when I'm unfamiliar with it.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"All features on our team are owned by at least two developers, a primary and a secondary; so the secondary is always included. I also include the primary tester for the feature to keep him/her in the loop, and make the rest of the team optional."	Yes	"More nuanced, suggestions for alternate solutions as opposed to just 'this doesn't look right'."			mwan
6503273	Development		4	4		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Immediate team, SME in the area and the senior team members."	Yes			zodimov	zodimov
6503274	Test		14	12		3	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When buddy build instructions are unclear.	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Area owners (dev and test), people/teams that depend on the code being modified, sometimes technical experts if an area is sensitive or very unfamiliar."	Yes	"Reviewers who are unfamiliar are likely to just try buddy building and following the code comments to understand what is going on.  Reviewers who are familiar are more likely to point out technical issues, clarifications, or mistakes."			arnemich
6503275	Development		11	11		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important"				"if there is too much to type or if I want it ""off the record""."	between 50% and 75% of the time	up to 25% of the time	Yes	to understand it better.	"Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding"			Immediate team and people who have touched that code	No				
6503276	Development		8	7		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"Sometimes changes in a code review make sense when files are reviewed in a particular order. I would talk to the person if the order is not very obvious in the review (especially with large number of files)  Secondly, if i am not very familiar with the context behind the change, i would talk to the person."	up to 25% of the time	More than 75% of the time	Yes	The context behind such changes may not be obvious. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Generally people who are familiar with the code. 	Yes	"Would usually be more focussed on potential defects, than on stylistic changes like comments. "		bipinkr	bipinkr
6503277	Development		6	5		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When I found something unexpected or hard to understand. 	between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Send to people related to the code change and the owner of the code. 	No				lojiao
6503278	Test		2	1.25		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Seeing something not understandable in the code	up to 25% of the time		Yes	To understand what it's about	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who have previous experience with this code or feature	No				ahfarid
6503279	Test		13	12		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When more than 4 comments sent back and fore.	up to 25% of the time	between 25% and 50% of the time	Yes	Need to know the background of the change	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Code review alias and the team being impacted	Yes	More about why then syntax.			rickylam
6503280	Other	Program Management does not cleanly 																							
6503281	Development		12	4		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"* If the proposed changes are too big to be summarized in the CR comment fields. * If I anticipate for my proposed changes to be disputed, to avoid a back and forth or ""won't fix"" over E-mail. * If I'm unfamiliar with the codebase/change and want to understand better what the intent was."	up to 25% of the time	between 25% and 50% of the time	Yes	"Besides understanding what/how the change does, I need to also understand how the code was working before the change."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Usually the owner of the area.	Yes	"The owners would usually have much more detailed feedback, since they understand the pre-change state of the code as well as future extensibility requirements."			canegril
6503282	Development		3	3		8	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"if there are signigicant issues, more than a couple comments or a design issue - easier to explain in person"	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			expertise in the area or ownership	Yes	deeper understanding of the design so the comments are more relevant and actionable			
6503283	Development		14	7		3	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				none	up to 25% of the time	up to 25% of the time	Yes	Files I'm familiar with I can focus on certain areas.  New files I have to see the whole thing.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			All immediate team members and broader team CR alias	Yes	Usually more and better feedback from people who are familiar with the code.		mbarto	mbarto
6503284	Test		14	4		50	No	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"				Yes			nmed	nmed
6503285	Development		9	7		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If there are concerns I have in the code that require the input of multiple people.  (Requirements changes etc)	up to 25% of the time	up to 25% of the time	Yes	I need to look at the entire file and not just the deltas to get an idea of the impact of the changes.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have guidelines that require we send the review to our dev and test team.  We also include others who are affected by the change	Yes	When the person is not familiar they often ask questions about how things work that are not obvious.			dyost@microsoft.com
6503286	Development		11	4		12	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If the code change design needs a significant change, in order to explain the motivation for it"	up to 25% of the time	up to 25% of the time	Yes	"Need first to get familiar with the code, and then i can asses the change "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Accoring to the area of responsibility, technical knowledge. and we send as optional to a group continaing all the team members"	No				
6503287	Development		12	4.5		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"subtle issues, difficult to articulate or complex with many variations... often depends greatly on finding out more about what the author already knows: Discussion is the fast path.  sensitive issues. eg complete misunderstandings, obvious skill deficiency: Discussion is diplomatic path.  can of worms has been opened: brainstorming discussion is useful and interesting."	between 25% and 50% of the time	up to 25% of the time	Yes	"for a full review, far less context is immediately available for rapid turnaround.  for a partial review (ie changed code only) the additional cost is just to determine whether a partial review is in fact sensible or not."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Required: area ownership responsiveness to code review requests quality of review response  Optional: visibility group 	Yes	Level of detail.		mikelid	mikelid
6503288	Development		10	5		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Usually when the explination would be lengthy and wordy. Also (though very rarely) if the mistake might be embarassing	between 25% and 50% of the time	up to 25% of the time	Yes	Rather than just looking at syntax it takes time to actually parse the intent of the code. For a familiar set of code this intent is already known. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Entire team	Yes	"Feedback is more in-depth. For reviewers not familiar with the feature/code I'm working on, comments tend to be more topical - catching things like bad strings, bad syntax, or refactoring opportunites. Familiar reviewers will often catch deepter problems such as misaslignment with the spec, or catching a bug that will affect some piece of code down the line."		bburket	bburket
6503289	Test		8	1		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"The things which I dont understand, or if there are no proper comments for the code change."	up to 25% of the time	between 25% and 50% of the time	Yes	it takes time to become familiar with the code flow and then need to understand the reasoning behind the code change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The feature owners, and people who might have understanding on the feature area."	No			dhanath	dhanath
6503290	Development		2	2		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"sometimes if its a bigger design change that you want to suggest in the review, or sometimes if there is a disagreement and you can see it going back and forth, its better to just talk it out."	up to 25% of the time	up to 25% of the time	Yes	sometimes to just get the context or what is going on in the overall code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"people in immediate team, who have worked with/impacted by the code, and testers who will be testing the code, sometimes whoever is involved in the files impacted."	Yes	"its basically in terms of the understanding that is generated, alot of times the immediate questions arent asked becuase those issues have already been discuseed."			rahmaj
6503291	Development		7	5		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Second Most Important"				"Sometimes talk in person is simply easier. Writing too much in code review may not be a good use of the time. And sometimes I want to get some basic knowledge of the code being changed, and I don't want to write the question in code review since everyone in the team will have to read the question even if most of them already know the answer."	between 25% and 50% of the time	up to 25% of the time	Yes	"I need time to understand the logic behind the code, I need to understand how the code used to work."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People who is familiar with the code I'm changing. Sometimes I add the test who is going to test the change as optional	Yes	"People who is familiar with the code tends to give more useful suggestions, they may give the suggestions beyond the code review itself. Such as a completely different solution for the issue, or some test to run to prevent regression. People who are not familiar with the code usually give comments like ""please add comment"", ""fix the indent"", etc."			faxue
6503292	Development		6	5		10	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Third Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes										
6503293	Development		14	5.5		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Disagreement on a comment or design decision	up to 25% of the time	up to 25% of the time	No	"If I'm not familiar with the code, I typically do a cursory examination of the code, focusing on style and implemenatation decisions... unless I see something grossly out of place."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			- Immediate team members (3 dev scrum) - Folks who would be directly affected by the change - Folks as or more familiar with the code than me - Automatic wide-team code review group	Yes	"Comments by familiar reviewers will focus on deeper approach, possibly design level decisions."		bremor	bremor
6503294	Other	Program Management	7	5		12	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					between 50% and 75% of the time	up to 25% of the time	Yes	Domain Knowledge.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503295	Test		13	12		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				If the code appears to be poorly implemented or slow	up to 25% of the time	between 25% and 50% of the time	Yes	Want to get the whole picture of what is going on and why	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Team wide alias	No				gproano
6503296	Development		6	6		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"					between 25% and 50% of the time	up to 25% of the time	Yes	"I need understand his logic, and then give him comments."				"domain experts, team members, lead"					
6503297	Development		3	3		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Previous owners, Team members working on related features. If none of those are applicable we have a buddy for the code who takes a look at the reviews."	Yes				
6503298	Development		9	9		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important"				When we need to discuss the code or alternative approaches and back and forth comments get too unwieldy	up to 25% of the time	Never	Yes	"Need time to look at context of the code (e.g. source depot history), understand the motivation for the fix, and consider alternative approaches if any."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Based on code ownership, person who last touched the code.  Also cc dev team, test team to keep them in the loop."	Yes	"More insightful comments from one who knows the history, had experience with the component, and knows what mistakes to avoid. Sometimes an approach may seem obviously right, but could result in unintended side effects.  "			lisaong
6503299	Development		1.5	1		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the comments are complex, or there are disagreements. However, the other main dev on my team has his office directly next to mine, so we probably end up talking about code reviews in person more often than not, since its easier to discuss in person than in text. "	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"If I'm familiar with the files, I just need to look at the new changes, and they're more often scoped. Entirely new things require ramping up on what that part of the system is supposed to be doing."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have an alias for the reviewers on our team. All reviews are sent to that alias.	No		"Our system is (relatively) small, so completely new things are rare."	mipridal	mipridal
6503300	Development		12	6		7	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important"				"1. I can't understand clearly 2. The major flow is not good, so suggest to re-write 3. I have different opinion on the design which is not easy to write in comment"	between 25% and 50% of the time	between 25% and 50% of the time	Yes	Because I need to understand the big picture before I can check the change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			The owner who will be impacted by the change Who has the best background knowledge	Yes	"The owner may give comment from higher perspective, like the overall design."			
6503301	Development		2.25	2.25		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				To discuss possible solutions to unresolved issues.	between 50% and 75% of the time	up to 25% of the time	Yes	It takes time to understand the flow of control and the context (unmodified files that the code relies on).	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			People most familiar with the area are primary reviewers - everyone else on the team gets CC'd.	Yes	"There is more ""P3"" feedback - about stylistic issues, comments, etc."		tyvella	tyvella
6503302	Development		15	11		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important"				"If the code review is touching many file (sometimes more than 5 but less than 10 files, and most times when touching more than 10 files.) For those reviews doing an in-person code-review is more efficient, because the author can guide the reviewers through the basic design/principles."	up to 25% of the time	between 25% and 50% of the time	Yes	Usually changes are bigger for new files. If I am not familiar with the code I might need to study unchanged code as well to understand the underlying principles.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Subject matter experts + DevLead or architect	Yes	Somebody unfamiliar with the code usually is in a better position to identify code-readability issues. While people very familiar with the code are more likely going to find eventual design issues.		fabianm	fabianm
6503303	Development		20	16		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes	Need to understand the logical flow and underlying design and hidden assumptions.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			devs and testers who are stakeholders.	No	"People who are familiar with the code usually can spot logic errors (deep errors).  People who are not usually focus on basic error handling, comments, etc."			leijin
6503304	Development		1	1		9	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				Usually never since the commenting function built into codeflow is very good.	Never	Never	Yes	"If you're not familiar with a function you have to go look it up (aka leave codeflow), and figure out what it does."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Who has worked on the area of the code that I am fixing the most	No				trevogr
6503305	Development		4.5	4		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1) if we need to discuss a code review comment extensively 2) resolve an argument in person 3) a drawing is required 	up to 25% of the time	up to 25% of the time	Yes	Because I need to read all the new code and understand it better.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			"people who worked on the feature/file/component previously or who are working on it currently + people who either a) perform code review on time and regularly b) dilligently (have always good suggestions, do a thourough code review)"	Yes	"sometimes comments are not feedback, but questions like ""why"" and ""what"""	Code Flow is an excellent tool. And the dashboard site is an excellent extension to it. No need to read emails anymore. Thanks!	kateroh	kateroh
6503307	Development		13	13		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Frequently, when the reason for why the code was written a certain way is unclear."	More than 75% of the time	between 25% and 50% of the time	Yes	It takes much longer to understand the structure and purpose of the code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I always send it to the email alias for my team.	Yes	Better feedback.		mtreit	mtreit
6503308	Test		6	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If I have different idea with the author	between 25% and 50% of the time		Yes	I need understand the code in files first.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			The people who familiar the code.	No			zewang	zewang
6503309	Development		7.5	7.5		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Third Most Important"				 -  get some background/context around a particular feature.  - TO save going back and forth on comment threads in the interest of time.  	up to 25% of the time	between 25% and 50% of the time	Yes	#NAME?	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Common cr alias plus a few dev/test who I believe need to know of the changes due to dependencies etc.	Yes	More helpful since they havemore history and i spend less time explaining the long context associated with a particular change; They have more context around depenedencies etc that i might have missed so a better perspective in general when they provide feedback. 			shalinij 
6503310	Test		2.8	2.8		10	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important"				Only when the code doesn't make sense at all and I need a design clarification.	between 50% and 75% of the time	More than 75% of the time	Yes	"When I'm not familiar with them, it takes longer to understand the global structure of the code, which is key to understand smaller pieces of code."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People involved in the project or the test area.	Yes	"Without that understanding, sometimes the feedback is not that helpful and the code review ends up explaining the feature instead of reviewing the code."			ivansa
6503311	Development		6.5	5		8	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				When the code is not very clear or if I am not the subject area expert and require more context. 	up to 25% of the time	between 25% and 50% of the time	Yes	Really depends on the code cleanliness and scope. Sometimes a code change doesn't make sense unless you know the high purpose of the module. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I first seek out the dev owner of the feature if possible. If not, then I seek out senior team members and the dev lead."	Yes	Owners usually give better ideas and find problems easily. Senior team members usually miss things.		brandai	brandai
6503312	Development		22	2		6	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					up to 25% of the time	up to 25% of the time	No	"I spent less time to verify that everything is OK if the file is not owned by me.  If it's my file, I will spent more time to verify that eveyrthing works fine. "	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People that the own the files I code review	Yes	"The owner of the file usually give deep insignt feedback, The reviewers that do not own the file give superficial feedback ( variable naming convention etc).   Not all the time, but a lot of times. "			lkarmira
6503313	Test		12	5		3	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 50% and 75% of the time	up to 25% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Direct peers, then peers in the same team."	Yes	Volume of the feedback is smaller.		wojcis	wojcis
6503314	Development		0.5	0.5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"If I have a suggestion for an alternative approach, which could require significant changes to the existing review. If I don't understand a particular change or don't have full context of the code being changed."	up to 25% of the time	up to 25% of the time	Yes	Also need to check files that the changed file is dependent on to get full context.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Domain expertise; feature owners; last person to change the file	Yes	"The feedback is more involved and detailed, and can cover finer points. "			rosingha
6503315	Test		13	12		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"I'll talk in person if the design of the code under review is so far off of what is workable that it needs to be completely rethought.  Otherwise, I usually avoid talking about the code in person unless the review has gone through a round of comments/responses and the two people are not understanding one another's comments/responses.  I've found that covering too much in person means that the comments for the final code usually aren't sufficient for the poor soul that will own it in 6 months."	up to 25% of the time	up to 25% of the time	Yes	"I'm going to waffle on that ""yes"" here. When i want to fully udnerstand the code because i'm particularly interested in how it works, or i'm concerned the author may not have enough experience/expertise to think through the area completely, then i'll take longer on the review.  If it's not something i'm familiar with and i feel there are others better equipped to understand it on the review, i will spend less time on it."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Our team uses a round robin-esque approach. I send my reviews to the rest of the testers on my team, but i put one particular person on the To line all of the time. She, in turn, has someone else on the To line of each of her code reviews.  This helps to make sure the person reviewing has been seeing most (ff not all) of the code reviews in that area to aid feedback. It's also good just for increasing ""collective code ownership"" as you call it. (I call it ""reducing the 'hit by bus' factor"") When i'm touching an area that has been touched more by a certain 1-2 people lately, i'll also include them on the code review."	Yes	"The owners/familiar people are often more engaged in the code review and provide more meaningful comments than ""rename your variable"" or ""fix your spacing"". "		kellygr	kellygr
6503316	Test		2	2		20	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When it easier to engage in a discussion about the code and its purpose. Also, when there is confusion between the comments in code flow."	between 25% and 50% of the time	between 25% and 50% of the time	Yes	I like to ramp up on what the variables and methods are for before making an accessment on the code.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I usually do not selection someone to code review. However, when I need to get something checked in quicker, I will find individuals who are closer to me (office space-wise) or individuals who I know will quickly come to a conclusion concerning the code."	Yes	The feedback is more detailed and will be able to point out subtle flaws and things I might have missed.	"I find that searching and ramping up on code is something that code flow doesn't help very much on. If I know I need to check up and read other pieces of code, I will tend to switch over to Visual Studio and then come back to Code Flow to just insert comments."	szkong	szkong
6503317	Test		10	10		12	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Immediate dev/test team	No				asemko
6503318	Development		10	10		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Usually, to understand a particularly complicated method, or to understand the context surrounding code changes in source code that I'm less familiar with. This is primarily when the amount of text I would need to type to ask all of the relavent questions I have would be more than 1-2 sentences per block of code, or more than 6-7 sentences total."	up to 25% of the time	between 50% and 75% of the time	Yes	"It's difficult within the scope of a code review for the authored code and comments to completely encompass the full context of the code being added and/or changed unless unweildy amounts of comments are used (multiple paragraphs of comments per method). Since our code review process is 50% finding minor logic bugs and 50% ensuring that the implementation has no missing corner cases, understanding the context of the code change is extremely important for the reviewer."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"For complex changes, I tend to pick the more senior developers on the team and/or developers most familiar with the code being changed. For simpler changes, we have an automatic round-robin code review assignment process."	Yes	"The reviewer is usually more thorough in assessing the greater contextual impact of the change and/or asking questions about how the code change might affect other, unchanged areas in the code."			jaredwil
6503319	Development		22	1.75		5	No	"Avoiding build breaks / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If I don't understand details of code change and it is too complicated to be resolved via IM.	up to 25% of the time	up to 25% of the time	Yes	It takes time to get into context and understand details.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding"			People who know context and can give valuable feedback.	No			kitimo	kitimo
6503320	Test		6	4		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"	"we do not use code review for build break check as we have a different mechanism for that.  our main motivator is that is code review is required for check in, however the quality of the code review is not always good  "			"if there's several back and forth, or if the actual ""comment"" becomes large and confuse that is better to discuss in person."	up to 25% of the time	Never	Yes	"I don't know if the change proposed is actually good, other than checking code semantics is hard to get plugged in the review, so I spend more time reading. I ask questions and need to wait for the subitter to answer them in code flow. Overall, I like that code flow builds a record which I can always go back and check if a new question comes up"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"this is really hard, I just put my immediate team members or the people I suspect is familiar with the area"	Yes	"well, sometimes I find horrible mistakes I made in the code, the reviewer didn't find them (did he/she actually review the code?)  if the reviewer knows the area, A LOT of code duplication is avoided and they also provide useful feedback on the area, other than that, the code review may not prove to be useful at all. It seems like the review is not taken seriously and the reviewer just does it because is a requirement"	"2 things, one is how to determine automatic area owners, the second is the comments, from one iteration to another, they seem to be misplaced so its hard to find where they got fixed. Also, the code review status seems to be cleared up after one iteration, before it was kept so it was easier to know the stage of the review"		sahernan
6503321	Development		20	8		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important"				Don't understand the change (conceptually).	up to 25% of the time	up to 25% of the time	Yes	Familiarize myself with the context of the source file.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Same group always.	Yes	I get more conceptual questions/comments when they understand the code better.			heaths
6503322	Development		15	7		7	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				Not always.  But some of the times especially if its in an area that related to our code (i.e. dependency) but not in our code area.	up to 25% of the time	up to 25% of the time	Yes	"I usually try to look for areas outside of the change itself that the change may causes a regression in.  If I am familiar with the code I usually know this right away without too much thought, but if I am unfamiliar I have to take more time to read through the code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code review buddies, or owners of areas that I may be touching.  But I also send an optional request out to our entire team.  Others sometimes will inject feedback or learn something about an area outside of their personal area."	Yes	Usually a reviewer familiar with the code may be able to find inadvertent side effects of the change that may cause regressions.			darind
6503323	Development		29	18		8	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Large or complex change.  Specialized algorithms	up to 25% of the time	between 25% and 50% of the time	Yes	I want to understand the code in context to ensure I review it appropriately.  	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			"Standard team alias, developers/testers I know my code will impact, people knowledgable about the area."	Yes	People familiar with the code tend to notice more subtle issues.  Ask questions about implications of the change.		gregsw	gregsw
6503324	Development		5	2		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				If the code requires complete re-write	up to 25% of the time	between 25% and 50% of the time	No					code owners	Yes	"for complicated code changes, need the owner to point out if there could be issues that are not obvious."			jyra
6503325	Test		2	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				When there's code that is ambiguous or when there is a potentially better approach to the problem.	between 50% and 75% of the time	up to 25% of the time	Yes	Simply due to lack of familiarity. There may be things going on in the code that require some background on what's going on. In this case talking to the person usually helps resolve questions.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			One person who shares the area or has knowledge of the area and one other person from the team who may or may not.	Yes	Comments are more effective and don't focus on basics but rather detailed feedback or input based on knowledge of the area which tend to be more actionable and useful.			alkhayat
6503326	Development		14	11		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Low level of familiarity, lack of understanding, unexpected code changes, large refactorings"	between 25% and 50% of the time	between 25% and 50% of the time	Yes	To get the context in the larger code base	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			DL	No				cponath
6503327	Development		8	8		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1. Too large a code review. 2. No clear description of the changes that are done. 3. No clear description on the motivation why the changes are done. 4. The changes/direction is totally wrong and it would be better to sync up in person than type in multiple comments.	up to 25% of the time	between 50% and 75% of the time	Yes	Part of it is for me to understand the changes/area before I can even start giving meaningful comments.					Yes	"For people less familiar the comments are usually at a micro level (focused on the changes themselves). For people very familiar, comments also include related areas."		sakuma	sakuma
6503328	Test		4	1		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				In case that I considere it will break the build or that I can not follow the code on a reasonable way.	up to 25% of the time	between 50% and 75% of the time	Yes	Usially because it is adding logic or elements that will change the behaviour of the product.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People involved on the features or products I am updating	No			josed	josed
6503329	Development		7.5	5.5		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If I feel that the code breaks other dependent components or to make sure it doesn't affect dependent components in a bad way.	up to 25% of the time	up to 25% of the time	Yes	Typically to catch any glaring coding errors and also to learn about new components.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Architects/Senior/Pricipal devs/tests on sub teams using the tool.	Yes	any side effects that might be caused like perf issues or the way APIs can be used differently to achieve the same.			kupplaks
6503331	Test		11.5	10		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Team ownership, area experts"	Yes				gboland
6503332	Development		4	4		9	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"If the overall approach / design needs to be discussed, or if the code change is complex."	up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People who would be familiar with the code changes.	Yes			masrivas	masrivas
6503333	Test		4	3.2		5	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important"	"When I have to review a check-in, I think of it as a gate for: If the person who wrote the code left the team tomorrow, would I be comfortable owning the code?"			If there are any real design discussions. (large refactoring required)	between 25% and 50% of the time	up to 25% of the time	Yes	"Depends if I am the only reviewer. If there is someone familiar with the technical details also on the review, then I just look at style and making sure things make sense at a higher level. If I'm unfamiliar and the only technical reviewer (usually should not happen), then I need to get more familar with the supporting code to feel comfortable signing off."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Basically we have three reviewer gates. 2 DLs that are required, and one person more familiar with the details. So usually I'll choose the person most familar."	Yes	They tend to be more picky.	"Being able to ""F12"" (go to definition) for method called as part of a change would be great. It would be good to be able to see the method definition even if it was not changed as part of the CL. I often find my self doing this to look at possible exceptions that could be thrown or tricky return values.  My team could use better best practices for recognizing who gives good code reviews. Right now it is really behind the scenes and not scheduled in our time, so its really recognized/rewarded. But I think that good code reviews could do a ton to help improve product quality, but given the lack of incentives (even recognition can be an incentive) I think that less time is spent on this than should be (for optimal product quality)."	nejoyer	nejoyer
6503334	Test		3	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When there is a clear need for a discussion, i.e. the matter cannot be resolved in a couple of comments."	Never	between 25% and 50% of the time	Yes		"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Owners, teammates and related parties."	Yes	Owners have more indepth knowledge and give better suggestions.	"You can add information to the title of the codeflow describing how big the change is (e.g. tiny/small/moderate/huge). This will make people review smaller changes quicker, which will force authors to make smaller changes, that are less prone to introducing bugs."		
6503335	Development		22	10		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					between 25% and 50% of the time	between 25% and 50% of the time	Yes	"unfamiliar code:  need to understand existing context before being able to determine changed behavior new code:  it's all new code, need to learn it and what it does."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"other devs/testers directly in the feature area, plus a team-wide code review alias as ""CC"" to allow others awareness into the changes coming in."	Yes	people that are more familiar with the code can more often provide more detailed feedback on changes to mechanics or possible side effects.  people that are less familiar may have more questions and/or stay more on coding conventions / code quality style comments instead of focusing on the more detailed inner workings of the change.			mzuber
6503336	Development		3.7	2.9		34	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Anything that results in a significant design change.	up to 25% of the time	Never	Yes	obvious	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"file ownership, team ownership, source depot triggers"	Yes	Generally the review is more thorough.		zacmil	
6503337	Development		4	3		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	"CodeFlow reviews are also used a ""holding-ground"" for code while it awaits signoff from test. Signoff is more than just reviewing the code; they will apply the pack and perform some level of manual/automated testing before signing off."			 - When there is a fundamental design pattern / smell that needs explanation before it can be applied.  - When the additional changes needed are very large it is easier to speak in person than through comments.  - When the review includes design choices that need further discussion.	up to 25% of the time	up to 25% of the time	No	"Typically if I am not familiar, there is another owner that I can count on to do a more in-depth review. As such, I will only briefly look for red flags."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Areas of expertise and current/previous owners.	Yes	"The reviews are more in-depth and take into account the overall design. Also, those that are familiar will include questions pertaining to behaviors previously seen deployed."		swegner	swegner
6503338	Test		6	2		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	n/a			To understand their design when the code invovles many classes. It would be great if we may see the ref and def in Code Review.	Never		Yes	b/c in Code Review it's just text file. It's very hard to find ref.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"who will use my code and will be affected by my code, and who is knowledgable in the feature."	No				yuantang
6503339	Development		15	15		8	Yes	"Finding defects/bugs / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When code change involves conflict or unclear design goals.	up to 25% of the time	up to 25% of the time	Yes	Obviously the unfamiliar code takes longer to investigate and understand.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Lead, Architect, Senior Devs."	Yes	Reviewers who are very familiar with the code will give more indepth feedback instead of generic ones.	Codeflow is great!		xiangt
6503340	Development		20	18		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"the communication need is to big to be filled by the review tool (i.e. too long thread, hard to explain via few paragraphs)"	up to 25% of the time	up to 25% of the time	Yes	One needs to understand the context of fix and potentially effects to other areas code that are not modified	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"area owners, team owners, affected client teams"	Yes	"If the reviewer is not familiar, the comments are more superficial, less technical"			
6503341	Development		13	0.9		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When it's hard to understand what his/her code is doing. Explain some better solution/design if I have one.	up to 25% of the time	between 25% and 50% of the time	Yes	Because I anyway try to understand what's going on there and think through alternative approaches and what may go wrong. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have team guidelines: Team Lead and engineer which is leading the work in this area. Then developers who work on the same area. Then add all team in CC. Then add all group to CC.	Yes	"When person is very familiar, he might give advices based on historical experience with this code changes and behavior. Also might give good suggestions on the code organization based on use cases. Owner might alos be more demanding regarding code quality etc."		selavrin	selavrin
6503342	Development		4	1		8	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				conflict of changes/design between his and mine	between 25% and 50% of the time	up to 25% of the time	Yes	need to follow a new logic flow	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			#NAME?	Yes	The one who knows about the code normally can point out some hidden/potenial side-effects that can be difficult to discover	#NAME?		alexlei
6503343	Development		10	3		6	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Never!	Never	Never	Yes	There is always either a learning curve or it simply takes time to understand the context in which code should run in.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			1. My team 2. A predefined set of folks from our org 3. Folks I know that either can do a good CR or that have to be notified on the changes in the CR	Yes	"If he/she is the owner (or familiar) - the review is usually more thoroughly. In-addition, people tend to ""protect"" their code from future changes."		adrianai	adrianai
6503344	Development		10	0.8		40	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				if there is a mismatch between asumptions/expectations and need a wide overhaul of submitted changes.	More than 75% of the time	up to 25% of the time	No	Mostly unfamilar code is added for review from a coding/algorthim standpoint of the object and not domain knowledge about the subject. This often takes less time.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding"			"people who last edited this file, people known to own the area, people known to be subject area expert"	Yes	comments are more concrete		kapjain	kapjain
6503345	Test		12	5.5		6	No	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When disagree	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			generally dev  and test	No				
6503346	Development		15	1		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				When the intent of the code is not clear.	up to 25% of the time	up to 25% of the time	Yes	Grasping the code's intent in unfamiliar files takes longer.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Developers with the most experience in the area in which the code applies.	Yes	The feedback is more precise.			anlaug
6503347	Development		6	6		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				1. Big changes(architectural/design wise) are needed. 2. Need to better understand the logic behind the code. 3. Overall coding sytle issue that better dressed before detail code review. 4. Sync up on review timeline expectation.	up to 25% of the time	between 25% and 50% of the time	Yes	It also takes time to understand unchange part.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			buddy developer for the feature	Yes	"people not familiar with the code tends to have more comments on coding sytle, better readability, etc. people familar with the code tends to focus more on functionalities."			
6503348	Development		2	2		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				if the review is large and involves too many changes to different files	between 25% and 50% of the time	More than 75% of the time	Yes	familirizing myself with the new code in new files	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			familiarity with the codebase and seniority	Yes			shahins	shahins
6503349	Development		3	0.5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"If there is something that doesn't make sense, or if I have a suggestion on how something can be done better"	between 25% and 50% of the time	up to 25% of the time	Yes	"Because I have to read through the whole code to get an understanding of what's happening. When there is code I'm familiar with, I can usually just skip to the pending changes."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have a teamwide alias. Everyone gets the code review. Only people familiar with the code and/or my manager gets to be a required reviewer	Yes	The person familiar with the code usually makes more applicable comments		lucarras	lucarras
6503350	Test		12	5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If I see a design issue	up to 25% of the time	up to 25% of the time	Yes	With familiar files I look only at changes	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Owners, people familiar with the code and I also put the team alias"	No				hvermis
6503351	Development		3	3		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"(1) The issue is too complicated to fit into one line of comment; or, (2) The issue actually spreads across multiple places (such as overall design)."	between 25% and 50% of the time	More than 75% of the time	Yes	I need to understand the overall code before I study the code change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Immediate peers, or owners of tightly coupled code."	No			jianyelu	jianyelu
6503352	Development		14	5		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"Big code changes or brand new code, anything with lots of new code."	Never	between 25% and 50% of the time	Yes	Takes time to understand the change especially because I want to do a good job at reviewing the changes.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who understand the code/technology well or the original author of the code.	Yes	Normally there are more questions being asked about some changes.			tiens
6503353	Development		4.5	4.5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Doesn't happen often, but if I need clarification on a change or just confused about context of a code review that seems out of place for a codeflow comment, I'll talk to the submitter in person."	up to 25% of the time	up to 25% of the time	Yes	Simply being familiar with the code means I know the surrounding components and context in which the code is used	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Immediate team, interested parties (e.g. someone who may be consuming an API I'm building), and anyone with ownership in the code in question (e.g. if I'm modifying a file due to change I'm making elsewhere but do not own it)"	Yes	"When someone is familiar with the code I'll have a higher chance of them finding a bug that I may introduce -- when I've had code reviews go through with people unfamilar with the code in question, the risk of a bug being introduced is a bit higher since less familiar eyes are looking at it."	I believe code reviews are a vital process to development cycles -- both for myself as a submitter of reviews and as a reviewer.  I've prevented bugs and suggested better methods to approach a change in reviews and vice versa which is always a good thing!	pmurphy	pmurphy
6503354	Test		3.2	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If the code under review is totally not what is expected and needs to be completely redone.	between 25% and 50% of the time	up to 25% of the time	Yes	Codeflow doesn't have search capability which makes it little hard to use and search where a particular piece of code is being used.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"All the stake holders from dev and test, and peers."	Yes	There is a sense of attachment to the code if the other person owns it.		samitta	samitta
6503355	Test		5.5	1.8		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"1. If there is no context in a submitted review - sometimes if you look at only changed files it does not allow you to assess if code is right or not. MOre context is required. 2. Heavy or ""bug-suspicious"" functions which look messy and require explanation."	up to 25% of the time	up to 25% of the time	Yes	"You should understand the context first, then perform a code review. Code review without understanding might lead to wrong comments for a good code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			1. Immediate team (who shares the manager) 2. Improvement team (who shares the current activity) 3. Owners of the changed code (who ownsthe code with you since now)	Yes	"Not familiar leads to standard comments like: ""add comment here/remvoe comment here/change to LINQ/change from LINQ/improve readability""  ""Familiar"" leads to valuable ""in-domain"" comments like: ""I'd better use this implementation to achieve the result/You'd better think of skipping this step and replace it with .../and etc..."""		dmitmatv	
6503357	Development		6	6		40	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Big issues like design change Code confusion Bugs Near the checkin	up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			co owners and test owners somebody who understands well leads 	Yes	Comments have all of code improvement issues from somebody unfamiliar familiar people have more of business logic issues	check-in integration should help me know if there are any active comments at the time I am checking in  A lot of comments are translated to bugs. That should be one click  	rajatt	rajatt
6503358	Development		18	11		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1. When reviewing large changes that need clarification. 2. When suggesting significant redesign or rework of the code. 3. To get an overview of the problem/solution when not apparent. 4. When significant disagreement on the CR have occurred.	between 50% and 75% of the time	up to 25% of the time	Yes	Need to develop a deeper understanding of the new or unfamiliar code.  (Code reviews should not just be syntactic reviews). New code requires more scrutiny than modified code (typically). 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Code owners if code is not owned by me or my team. Team members on my team for code owned by my team. Subject matter experts as appropriate (external components that are integrated, for example). Other developers who may be impacted by my change. Tester(s) responsible for verifying the change."	No		"Code reviews should not be syntactic reviews only (primarily looking for things like conformance (variable names, for example), or adhering to coding standards).  IMO, a proper code review also delves into the intent of the code, and the correctness in which it will execute to achieve that intent.  Looking for wasteful/non-performant code should also be evaluated."	jalee	jalee
6503359	Test		7.5	5.5		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"If a change appears to need clarification (usually spread throughout multiple files), or there is an alternative solution that is too complex for a comment, I'll seek out the author of a code review."	between 50% and 75% of the time	between 50% and 75% of the time	Yes	"It's often simpler/faster to seek out changes in a file, rather than have to read the file from top to bottom. There's usually less or faster context switching if I'm familiar with the files/code."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"A person will be a reviewer for my code if they satisfy one of the following criteria:  1. Use the code on a regular basis 2. Are very familiar with the code and have a high chance of offering useful feedback 3. Have broken the same area of code in the past and could use a refresher in a ""best practices"" type of change 4. Need to be notified of the incoming change"	No				
6503360	Test		14	12.25		11	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance"				"- Probably when I see a lot of changes with minimal ""overview"" of the changes. That usually smells like ""architectural changes"" which are harder to communicate in words (perhaps a few diagrams on a whiteboard would just do it) - Another interesting case i"	up to 25% of the time	More than 75% of the time	Yes	"I suppose it's the lack of ""incremental"" changes. Somehow it seems harder to ""analyze"" a full file than an existing one with some changes... which may be all psychological.."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			We don't really get to choose. The whole Team get it.  If I had to choose: 1) Dev's change = Dev + QA Team 2) QA's change = QA Team	Yes	"Usually there are a lot more insights on why my change was a good one or a bad one. Which is interesting, because it means something in the process is missing :)"		matteot	matteot
6503361	Development		16	5		50	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If I review a change and I think that from an architectural perspective, they're going in the a very wrong direction, I'll go find somebody and talk to them in person.  That's generally the only reason."	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"For systems that I'm unfamiliar with, it just takes longer to understand how the system works so I can effectively review the changes to it.  For new systems, it's my responsibility as a reviewer to make sure that the system is both architecturally sound and that the code changes will not decrease build stability or block other developers from working."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			I base it on people who have knowledge of the system I'm modifying already or people whose systems my changes might affect in some manner.  I'll also occasionally include people as optional on code reviews if I know that some of their future work will be influenced by my changes or additions.	No	"I generally don't author reviews and include people who have not ever looked at the included files, unless they're about to take over maintenance of a system or use it as a client.  As such I almost never receive feedback about systems except from people who are already familiar with those systems."			jowaters
6503362	Development		8	6		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important"				"Some urgent checkin, that need immidiate attention"	up to 25% of the time	up to 25% of the time	No	"Looking at code, we can tell what are the usual issues are. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			Select team members wheo knows best the project in that area.	Yes				
6503363	Development		7	7		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				The issue is too complicated to explain in comments and spans multiple files or multiple locations in same file.	up to 25% of the time	up to 25% of the time	Yes	Understanding what the code is doing to be able to provide a useful review takes longer with unfamiliar code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code owners, my lead and teammates."	Yes	Advise on approach for bug fix or new feature is much better when the reviewer is owner of the code.		nitinved	nitinved
6503364	Test		14	8		3	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Only if I am signing off with comments. I want to make sure they understand the reasoning behind my comments.	between 25% and 50% of the time	up to 25% of the time	Yes	Some times I have to look at other (unmodified) files in a project to make sure I know what a refrenced function or class does.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Area of responsibility, coding prowess."	Yes	More directed and deeper criticism.			
6503365	Development		6	6			Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important"				"For large changes, or when reviewing a feature checkin, if I don't know how the feature is supposed to work, I will stop by to find out."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	"When I don't understand the area, I have to be more careful and look up how the function being changed is used to gain an understanding in order to review it properly."				"I have a basic understanding of ownership areas and i try to an area owner, as appropriate. I would prefer that there be some better way of finding who ""owns"" an area, so that the knowledge was shared across a team."	Yes	"when a person is unfamiliar, it is more likely that there will be questions about the purpose of changes."		adean	adean
6503366	Development		14	10		5	Yes	Finding defects/bugs / Second Most Important;#Helping improving the development process in general / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important				"most of the time I don't, but when the discussion is faster in person, than typing"	up to 25% of the time	up to 25% of the time	Yes	I need to understand them	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on code ownership and team awareness	Yes	More targeted comments/suggestions			bogdanm
6503367	Test		11	7.5		15	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				long thread on a single point which is more like an argument or discussion.	Never	up to 25% of the time	Yes	take time to understand why this change and how it solve the problem.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			feature owner and people with expertise	No				leima
6503368	Development		6	1		4	Yes	Avoiding build breaks / First Most Important;#Helping improving the development process in general / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important				If it is not intuitively obvious what is trying to be accomplished with the code.	between 50% and 75% of the time	up to 25% of the time	Yes	"I feel like it would be better to talk in person when reviewing code that you are unfamiliar with.  However, because of codeflow, our team doesn't do that.  So, there is a culture here to just look at the review and figure it out.  As such, it takes time to familiarize yourself with the code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"A combination of the devs in my same group, and anyone outside of the group that may be interested."	No		I wish that codeflow wouldn't start a new iteration every time you open up the review from SD win.  		dagarza
6503369	Development		6	6		12	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				#NAME?	between 25% and 50% of the time	between 25% and 50% of the time	Yes	#NAME?	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes	Reviewers who are not familiar with the code tend to give more syntatical comments.			johsun
6503370	Development		6	4		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When the code review is not a straight-forward change. Or when discussing other alternative solutions in person (saves time).	between 25% and 50% of the time	up to 25% of the time	Yes	"Usually, I want to know what they're adding because I might have some context of their task.  Since it is a new file, we want to make sure that our team's agreed patterns and practices are followed."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Ownership or familiarity.  Sometimes, if the reviewer is someone with high technical excellence, I would send them the review to learn more from them."	Yes	"If the reviewer is familiar with the code, more explanation needs to be put in the comments so that they understand my justifications on the design etc."	"After sending the code review, I sometimes immediately go and add comments in code to point out certain things so that they aren't puzzled when they get to the review.  I'm not sure if this is something your team can help with but I notice that it's very easy for my code reviews to be overlooked/missed by reviewers and I'll need to follow up with a ping.  On my previous team, the CRs were built into a dashboard application that was running in the background (specific to their department, ex. SQL Server devdash).  I realize that there is a http://codeflow.com/dashboard website but I don't think my colleagues monitor it.  It'd be nice if notifications were more easily accessed. "	stluu	stluu
6503372	Development		4	4		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"																	
6503373	Test		4	2.75		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Complex questions that may be too large or too difficult to type out in the review chat box.	between 50% and 75% of the time	between 25% and 50% of the time	Yes	Have to figure out if there are any dependencies and what various variables and things actually are.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Anyone directly related to the change is required, the team in general or related teams as optional."	Yes	Often the questions will be more general if they do not know the code well.		keitk	keitk
6503374	Development		10	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Usually only when there is a strong disagreement in a comment made by the reviewer.	up to 25% of the time	up to 25% of the time	No	When I am not familiar I will only look for general code defects.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"It there is a bug attached to it, I will include the bug creator. Then whoever I know has some knowledge of the code. I also always include our big alias for devices and sensors dev/test as optional."	Yes	They are more likely to make connection between the code being reviewed and the existing code not included in the review. So references to code not under review can be made to justify a comment.			ericprun
6503376	Development		10	5.5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	Validating Prototype fixes. Code reviewing is not just about checkin policy or procedure. During development we need to iterate through different approaches and design evolution through code reviews is something I have see quite often in the team. 			Code review tools cannot bring in dependencies or fill contextual gaps (files that might not have changes and if jumping through a lot of files is necessary then definitely a face to face is helpful) 	Never	up to 25% of the time	No	If there a common design principles in the team and there is some degree of code consistency then the code should be quite straight forward to read. If not then the code probably requires some rework. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			usually include feature owners and the general review alias.	Yes	Including people not too familiar with the code sometimes generates good ideas provided they have time to review and have a good understanding of the overall nature of the product/api. 	Codeflow doesn't allow the author to annotate (like give some context around a race) or add a screen shot or include dependent files etc.   Review offline - I miss dpk's which allow you to review offline.  Changes are sometimes large and you want specific parts of the code reviewed by people but want to track this as one. Breaking it up is not an option since you need to merge and get an ack for the whole review anyway. 	sajaya	sajaya
6503377	Test		4	4		8	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				-Not enough context surrounding the code being changed -Differing opinions on either the design choices or implementation choices that cannot be well summarized in codeflow -When a comment thread becomes more than 3-4 posts and is unresolved	up to 25% of the time	between 50% and 75% of the time	Yes	Need to read more of the surronding un-edited code to get more context about the change and potential side-effects	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			#NAME?	Yes	Mainly questions about the context of the change and purpose of the change			jefflee
6503378	Development		4	6		5	Yes	"Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				Don't understand the overall design or motivation or don't understand the way the developer write the code in a specific way 	up to 25% of the time	between 25% and 50% of the time	Yes	"If there is no design doc or the developer didn't give me a briefing of his/her design, it will take me sometime to figure out what he/she try to accomplish unless the change is small. "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"who is mostly familiar with the code base, who is a good developer who often provide valuable feedback."	Yes	Usually the person will point critical issues if there is any in the review and won't need much clarification of the change I make.			deliny
6503379	Test		6.75	6.75		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Where there are complicated changes to code without a lot of comments.  Also when I am not familiar with the are of code under review.	up to 25% of the time	between 25% and 50% of the time	Yes	"If I am not familiar with the code, I have to read more of the surrounding code to get context on what is being changed.  If the files are new, the review takes longer because I need to read the whole file, rather than looking at just the differences."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Typically, I would select the last person to modify the file I'm changing, plus a few people that would be impacted by the change."	Yes	"If the person is familiar with the code, they'll give feedback on the logic of the change, including things that are not strictly part of the review.  For a unfamiliar person, they will generally give feedback on coding style (formatting, commenting, etc.)."		mmroch	mmroch
6503380	Test		7	7		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"1) The fundamental design has significant issues, and short-form comments aren't sufficient to capture this. 2) There is contention over a particular issue that isn't getting resolved via comment threads in the code review."	up to 25% of the time	between 25% and 50% of the time	Yes	"Looking at changelist DIFFs can be a very disorienting way to explore unfamiliar code. Ordering of changes is somewhat arbitrary, and CodeFlow's UI encourages going through the changelist from top to bottom, one file at a time, which probably does not give a very holistic view of the change."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Our team has a policy to include at least one other developer and tester for the code review, with the addition of the overall feature team as optional for visibility. In general, I chose at least one person who is very familiar with the area my change applies to and at least one senior person whose feedback I have found helpful in the past."	Yes	"Reviewers unfamiliar with the code tend to focus on typos, comments, style, and other issues that are scoped to no more than a few lines of code and are generally independent of the overall design."	"In general, I feel that reading source code alone is not an efficient way to read and learn unfamiliar code. I mostly live in Visual Studio, and while it does have some alternative visualization tools (e.g. auto-generated class diagrams), they are slow and unwieldy. I have long felt that alternative visualization/exploration tools for existing code would help draw attention to more ""macro"" issues during code reviews vs. typos in comments, coding style, etc."	cdove	cdove
6503381	Development		10	5		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"I usually need to talk to the author in person when there have been 2 rounds of back-and-forth replies to a comment thread without any code changing.  It indicates that there's a more fundamental disagreement that needs to be resolved in person.  Sometimes this is caused by language issues, where the author is not a native english speaker and things get misunderstood via writing.  other times it's because a deep discussion needs to occur with many examples that would take too long to be written out in a small codeflow window."	up to 25% of the time	up to 25% of the time	Yes	"I always try to understand the execution flow before and after changes being reviewed.  for code I am familiar with, I can quickly recall the current execution flow, and only have to comprehend how it is changing.  for code I am not familiar with, I start from the beginning to understand the existing code, which takes time."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Certain features have designated people who are expected to be reviewers.  I include people who I think would be upset if they weren't included.  I also send reviews to people to help them feel included in the dev process.	Yes	"Someone who is familiar with the code being changed gives more insightful comments, comments which consider the past history of the feature as well as how it may be used in the future.  these kinds of comments are helpful because they guide me in knowing where to invest energy, and increase my confidence that my change is going to be correct and easy to maintain."	"It would be interesting to see what % of developers *want* to send code reviews and how many want to review code.  I.e. if their team didn't force them too, and it was 100% voluntary, would they have others review their code."		
6503382	Test		8	8		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If the code review is very large, and I need some help understanding the design. Mostly this is because I dont have the bandwidth to figure out the rational for changes by myself, and so I have to go talk to the code review author for details."	More than 75% of the time	up to 25% of the time	Yes	Understanding the code design in new files is faster when talking to the author. I can then quickly do the code review and move onto other tasks. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Generally pick people familiar with the area, or the project. I also pick people who need to be kept in the loop (managers/other team task/feature drivers)"	Yes	"The comments and feedback from people who have a deep understanding of the code I am touching is more detailed. Comments tend to question the design more than the small details with code ""prettiness""."		akhilk	akhilk
6503383	Development		7	4.5		3	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				In case of fundamental misunderstandings or very serious bugs	between 25% and 50% of the time	up to 25% of the time	Yes	Because I have to take time to understand the new/unknow code	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on their previous experience/current area or work. Or if my new code somehow interact with their component(s).	Yes	More constructive/useful comments		thomdid	thomdid
6503384	Test		9	4		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				1. When you can't resolve a particular point of contention after three back and forths 2. When there is a strong disagreement over something	between 25% and 50% of the time	up to 25% of the time	Yes	It takes longer to understand the logic and code flow.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"1) Whoever owns the code or is most familiar with that particular area 2) People who generally take the time to do a thorough CR (instead of people who do ""looks good"" type CRs)"	No		"Quality of feedback depends upon the person giving it.  Generally, it's easier to know who does a good job from their history.  Thus credibilyt becomes important - I am more likely to accept feedback from somebody who has genuinely gone through the change list and suggested something versus somebody who throws out a ""why not try this other approach that I think is better""."	vinosan	vinosan
6503385	Test		17	15		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"	I monitor a large code base for improper changes not following an established process. Code Flow allows me to monitor multiple directories of code and have myself added to the code flow when specific files or directories are changed. 			After reviewing as I may have fundamental questions that don't belong int he code flow and can be answered in person. it will either cause the code flow to proceed or be rejected. 	Never	up to 25% of the time	Yes	just new code. Someone may be making a change that may break other code that I need to research with Source Depot directly	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I don't. I force the autoselection to do that for me (:)). When that doens't work, we go out and verbally talk to the teams to find out who owns it or 'who did the last change'. it would be nice to show in a file 'who did last changes' when submitting the code flow./"	Yes	"they were just last in that code area. They should know more tyhan I do. if not, go further back as someone will eventually know who properly owns that file or has the experience to sign off."	"make it Metro!!!!! and tie in Source Depot Search and Code coverage data,"	scotro	scotro
6503386	Development		6	6		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Complicated problems or trade-offs, where many back-and-forth iterations are required.  The same sorts of situations in which face-to-face is easier than email for more general communication. Also when we prefer different approaches, and I wish to argue for mine."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	It always takes longer to understand unfamiliar code than modifications to familiar code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"To the owner if that isn't me.  Most features have an alternate owner if I'm the primary owner.  Otherwise, someone familiar with the general area of the product or the technology or API being used.  Failing all that, an arbitrary senior dev."	Yes	"Reviewers new to the code tend to give superficial feedback about readability and style, and ask questions I've already considered.  Reviewers who own or are very familiar with the code give deeper, more valuable feedback on design, can question the basic approach, and know to ask about obscure, troublesome edge cases I may not have considered."		alantu	
6503387	Development		4	3		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Code review sparks a long conversation	up to 25% of the time	Never	Yes	"It takes time to properly understand the context of the change.  You first need to understand how it works before the change, then what is changing, how, and why."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Select stakeholders and reviewers who consistenly provide quality feedback.	Yes	"When there is little understanding, reviewers often ask to explain how things currently work."	CodeFlow is a great tool because it allows a wider range of reviewers to learn from and understand code changes.  	zakunath	zakunath
6503388	Development		6	4		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				code is complicated or in person communication is needed to validate some scenarios that maybe affected	between 25% and 50% of the time	between 25% and 50% of the time	Yes	You need to figure out what the code is doing to make sure its valid	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			code ownership or standard set of devs	Yes	Normally better comments and less back and forth		harryf	harryf
6503389	Test		7	7		8	Yes	"Finding defects/bugs / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				For big changes - having the author to walk through the changes will be more efficient	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			people sharing ownership or people that may be impacted by this change	No				jingding
6503390	Development		13	10		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important"				"When an issue found in reviewing, and need discussion to come up with altanative solution (when can't come up with something right away).  Issues are all over the place, so rather than comment everywhere, talk to the owner in person."	up to 25% of the time	up to 25% of the time	Yes	To understand the logic first.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			The devs who know about the code even if not the owner or co-owner.  The devs who own areas that can be affected by the change.	Yes	"It would be more ""Generate better ideas, alternative approaches"" oriented. "		yuukin	
6503391	Development		10	6		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				if the change is so big that it's not easy to type the comments.	up to 25% of the time	Never	Yes	i needed more time to understand the change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Who understands my change and my lead.	Yes	the reviewers unfamiliar with the change tend to give superficial feedback.		yangg	yangg
6503392	Development		2	2		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When there are complex business requirements behind a code change or when the code that they wrote is more complicated than ""normal"". Also when a change is being made to code which has complicated interactions with code that the submitter doesn't own/might not be aware of."	between 25% and 50% of the time	up to 25% of the time	Yes	I have to read the code more carefully to understand what is being done. It requires more thought processing as I'm reading the changes	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Owners of code I'm modifying or code that interacts with code I'm modifying. Individuals who have prior experience doing similar things in code as what I'm doing. Peers who I view as ""good developers"" and whose general feedback I typically value."	Yes	They tend to give more insightful feedback around what I'm actually trying to acheive. People who are unfamiliar with the code give more feedback around coding practices.		colejone	colejone
6503394	Development		5	4		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					Never	Never	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code tags, source depot history"	Yes			pramirez	pramirez
6503395	Test		6	6		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Don't understand what the code changes are after reading the description and the code updates.	up to 25% of the time	between 50% and 75% of the time	Yes	It's harder to understand the change which is unfamiliar.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			The code area owner and the team mates.	Yes	Usually the reviewer which is very familiar with the original codes can give more advisable questions and suggestions.		yjiang	yjiang
6503396	Development		9	8		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"- when the approach is generally flawed, or there are too many issues to address via comments - when communication via comments isn't going smoothly, for example, if there are misunderstandings or if the comment thread is getting long and going nowhere - "	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"I have to understand what's going on to review the change effectively. If I'm not familiar with the area, I have to spend time to understand the code *before* the change as well as after."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Area owners, team members I trust, availability"	Yes	"Comments reflect their deeper understanding -- more likely to find subtle defects, feedback is more conceptual (better ideas, approaches) instead of superficial (naming, mechanical style, etc.)"		aosolis	aosolis
6503397	Test		8	3.5		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When the comments provided are rejected, it's useful to talk 1:1 with the author and understand the justification. "	up to 25% of the time	Never	No	"Once you get into the process of understanding how the tool works, as long as you are aware of the code base, code review doesn't take too much time. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People working directly in my area and people who are driving the features (as FYI).	No				nirbal
6503398	Test		4	4		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				1. If I don't understand author's intention of making certain changes. 2. If I have big comments that are too long to type in code flow and better communicate face to face.	between 25% and 50% of the time	up to 25% of the time	Yes	Need to spend extra time familiarize myself with what the code was originally doing and what has changed by this code review. The code structure is new to me and I didn't have a perception of what each norm and name is about.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"1. Owners or previous owners of the file/project that I modify. 2. Related team members (dev, pm) 3. My manager 4. Other team member as optional."	Yes	"Owner tends to give feedback in a higher level (design level), while others tend to be more specific about details of certain piece of code."		jinxu	jinxu
6503399	Development		4	4		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				- When there is insufficient context to understand the motivation for the change.  This happens when one or more of the following: no bug associated with check-in; the bug associated with the check-in does not contain an adequate description of the issue;	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Due to the small size of the team, I include the two other developers.  When submitting code reviews for other teams' codebases, I'll send reviews to based on developers with a known interest in the code and/or a person who I have already contacted and is prepared to review the code."	Yes	"When reviewers comments on code with which they are not familiar, the comments tend to focus on ""fundamentals"". E.g.: comments, style, and language best practices. "		dougfor	dougfor
6503400	Development		13	9		20	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"best practices involving cross-cutting concerns, like concurrency and parallelism"			"when i'm going to reject the code review with a ""thumbs down"""	More than 75% of the time	between 25% and 50% of the time	Yes	i'm not as familiar with the code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"people on my team, who are familiar with architecture and have proper context already"	Yes	they tend to know the hidden assumptions not documented through code		wportnoy	wportnoy
6503401	Other	"Test automation framework development, essentially 100% code development"	5	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	"I don't think i answered the prior question correctly, but I feel most important is code improvement and generating better ideas / processes.  Next comes finding bugs and sharing technical skills specific to the team.  Finally, awareness.  I don't think it should be used for Team assessment and i believe that there's no way to make a developer less 'protective' of their code if they are so already :)"			Only when things [appear] way off track or wrong ( or if it blew my mind with some knowledge i didn't previously have ).	between 25% and 50% of the time	up to 25% of the time	Yes	"Because with no context, one needs to follow through the code a few times before an accurate assessment of the appropriateness / quality of the code being reviewed.  At the same time, having a fresh set of untainted eyes can often pinpoint issues that might otherwise be unclear to others with ""skin in the game"""	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Depends on the nature of the change and what i'm looking for, but generally my guidance is:    Subject Matter Experts for keeping me honest,  direct team for awareness / visibility,  other cross-group folks who may be impacted by or interested in the nature of the updates"	Yes	"The commentator can focus on big-picture type things vs random un-contextual nits ( which are also helpful and welcome, just not always the goal of the CR )"	I'm interested in what you guys are planning to do with the information.  Something like a 'Code Review Wizard' ? That analyzes the nature of your change and chooses review participants based on something?  That would be sweet :)	dpopes	dpopes
6503402	Development		2	2		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important"				"Usually I go to the coder in person when - Design iteration/ back-and-forth discussion of the code may be called for - One of us lacks context for making a decision about the code, and more discussion is required."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	Anything more than superficial feedback is difficult to give without understanding how the code will be hit in the broader context of the system.  It takes linger to get a sense of the big picture when not already familiar with it.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			1. Development team 2. Testers of the component 3. Other developers with known interest/familiarity with the bode being changed (if any)	Yes	"Reviewers not familiar with the files can usually only provide superficial feedback.  This is still useful, but people with working knowledge of the code can additionally find issues with the underlying logic of the change."			frankcos
6503403	Development		18	13		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Forcing someone to have their code reviewed often makes them clean it up a bit better as well.			"Not that frequent.  Mostly EMail and codeflow comments are sufficient.  If I need to talk to them face to face a bunch to understand what they are doing, I'm likely not going to be that effective at the review."	up to 25% of the time	up to 25% of the time	No	"For files I have no familiarity with, it's normally looking at common coding errors, etc.  For code that I am familiar with, I can provide a deeper review, point out interdependent issues, etc."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"SMEs, senior devs, people that have edited the code, team members"	Yes	"More familliar with the code or the area (ie, API interfaces, etc.) means better comments."		redmond\patmill	redmond\patmill
6503404	Development		14	2		9	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				if there is an argument that can't be agreed	up to 25% of the time	up to 25% of the time	Yes	Need to understand some context	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			someone who is familiar with code base and deep knowledge about implemented language	Yes	"If someone is familiar, then comments can help to find bugs. Otherwise, feedback is normally about coding style."			kybae
6503405	Test		8	7		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				If there are changes I disagree with or don't understand.	between 25% and 50% of the time		Yes	"It's more difficult to gauge the impact on functions outside of what's being reviewed if I don't know the code in question, which usually necessitates needing to look up references outside the review scope."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"By policy, sent to the entire team; also hand-pick individuals whom I think will know the code well enough to do meaningful reviews."	Yes	The person is a lot less likely to have questions about the rationale for changes.		michmich	michmich
6503406	Other	Security Program Management	7	4		2	No	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"Policy (Lead, dev manager)"											Reviewers distribution list	No				apoorvs
6503407	Development		20	4.5		11	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"I need to understand the motivation behind the change. If that's not properly documented, I need to talk to the owner.   Often a referenced bug / work number is sufficient. Often a conversation is required. "	up to 25% of the time	up to 25% of the time	Yes	I need to learn enough about the new code to understand the context and the assumptions being made. That takes time. Sometimes signifigant time. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I try to send code reviews to people that will give meaningful feedback.   I have no interet in a blind ""Approved"" review. That doesn't help anyone. "	Yes	"The more familiar a given reviewer is with the code, generally, the more focused the comments.   This cuts the other way though - someone who doesn't know the code well may (correctly!) question the reason behind the code. Often this leads to challenging assumptions that may no longer be true. "	"I would love more tools around code reviews.   1. Code reviews based on ""hot spots"". Automatically send the review to the most active folks in this file.   2. Tying the comments to the bug nubmers in TFS. Tracking these as full lifecycle items, rather than ""one and done"". "	cmullins	cmullins
6503408	Development		3.8	0.5		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When a change is non-trivial and I do not understand it.	up to 25% of the time	up to 25% of the time	Yes	I need to improve my understanding before I can make an assessment.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who are familiar or affected by the code change.	Yes	With a deeper understanding a reviewer can point out non-trivial posibilities.	Please improve the radio buttons on this form. I was unable to determine which radio button was associated with which question because they were spaced too far apart and because there were no visual markings to guide me.		lukasma
6503409	Development		16	9		12	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When the motivation behind the change isn't clear, or I disagree with the basic premise of the change"	between 50% and 75% of the time	between 25% and 50% of the time	Yes	"Because I have to learn enough about the files being modified to understand their purpose, invariants, API etc.  And I often notice things in there that should be improved, and I make notes to follow up with that separately."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"People who are familiar with the original intent of the code being changed, and who understand the intent of the change."	Yes	"People familiar with the code can become defensive or protective, and if they know code has some history, they may try to be conservative.  People who are unfamiliar with the code can (in the case of CodeFlow, which makes it TOO EASY to comment on things) start making non-helpful comments on the preexisting code."	"I don't know what the research is about, so I don't know what feedback would be useful."	leifk	leifk
6503410	Development		30	6		14	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					Never	Never	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Peers and others that are familar with area	No	Familarity allows deeper analysis			darobins
6503411	Test		12	6		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				#NAME?	up to 25% of the time	between 50% and 75% of the time	No		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Usually feature team members, one person from my discipline (tester)"	No		I think CodeFlow is one of the best tools that helps the development process transparent and helps the teams to do more knowledge sharing.	bilbakir	bilbakir
6503412	Development		5	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When I have new idea to improve code.	up to 25% of the time	up to 25% of the time	Yes	I focus on difference between old and new file.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			we are using team alias	No				
6503413	Development		4	4		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"Keeping track of comments and rationale on code changes  Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices)"				up to 25% of the time	between 25% and 50% of the time	Yes	Spend more time figuring out the context.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Send to team alias, area specialist, and intereested parties (for example, someone from another team who has been following this bug.)"	Yes	"More criticism, suggetstions for bigger changes in code I'm not familiar with."		klu	klu
6503414	Development		9	9		6	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				too many files changed and/or design not clear	up to 25% of the time	up to 25% of the time	No	I have more things that I look for in files I'm familiar with	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			owner(s) + team alias as optional	Yes	"people who know the code find bugs, and code that will go against architecture. people who are not focus on style."			adelg
6503415	Development		3	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When I'm concerned my comments might offend them. Lots of comments can come across as harsh and make the person defensive, so it's often better to have a talk if you're going to be very critical of them.  Also, if I don't understand the change."	up to 25% of the time	between 50% and 75% of the time	Yes	"Need to take time to understand what was happening before the change, then understand the effects of the change."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"My immediate team, and any testers who this impacts."	Yes	Much more thorough.			jamcourt
6503416	Test		12.5	6.5		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important"				If I need to gain a better idea of the big picture (whiteboard discussion)  Though until recently most of my peers worked in another city so many discussions dis happen in CodeFlow	up to 25% of the time	between 25% and 50% of the time	Yes	Many times I have to look up dependencies to understand what the external methods are being called to.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Randomly selected based on files	Yes	When less familiar comments are more around coding style and less about bug prevention		shawnve	sahwnve
6503417	Development		10	8		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"The more significant a code change is the more likely I will want to do it in person.  If I'm not using CodeFlow I typically want to do it in person to better track specific comments.  If I'm worried it may affect other components I'm more likely to want to do it in person.  I may determine this after reviewing it first.  In our group, very minor code changes or ones with little to no external impact are often handled without review, at the code changer's discretion."	between 50% and 75% of the time	up to 25% of the time	Yes	Often in a review if a particular file/change does not impact my owned areas (or if I'm not worried about it impacting others) I only skim them.  In these cases I only look at style and for whether I agree with the general approach.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on their: a) familiarity with the code b) whether I feel they should have more familiarity c) whether they own changed code or are impacted by the changes	Yes	More familiarity tends to get me more complete feedback.  If someone is not very familiar it is usually overwhelming and they can't keep it all in their head at once.  This happens to me as a reviewer as well.  So if they're not very familiar I tend to only ask for feedback at a high level anyway.  Very familiar people I expect to find more subtle bugs and more constructive suggestions.			
6503419	Test		8	8		20	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When code itself is not sufficient to explain the intention of the code, such as lack of comments, badly named variables or confusing algorithms."	between 25% and 50% of the time	More than 75% of the time	Yes	I usually talk with the owner to go through the files with me and why he does things this way first. This helps me to understand things faster. I then sit down and go through the code line by line.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Usually send to the entire team unless i'm modifying code in a particular person's area.	No				linwang
6503420	Development		10	7.2		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				If code has complex design or I see some better ways of implementation that are easily communicated in person.	up to 25% of the time	up to 25% of the time	Yes	Depends on how familiar I am with the feature. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Folks who work on same feature team, testers, PM and common code review alias for broader team."	Yes	They tend to understand design better and can give deep technical feedback. 	We have quite a few tools that take out need for build breaks or styling of code wrt code guidelines. So those aspects are assumed to be good when doing code reviews.		utshah
6503421	Development		18	9		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				Complex algorithm changes	up to 25% of the time	up to 25% of the time	Yes	Need to understand the bigger picture vs. just localized updates.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Other devs directly involved with the project, plus knowledgeable other devs, plus others interested or waiting on the change (e.g. testers waiting on a bug fix, pm's waiting on a feature)"	Yes	They generally have more architectural feedback	"Tools make a BIG difference. CodeFlow is excellent, as it provides an easy way to review, comment, revise, and see status during the CR."	tracya	tracya
6503423	Development		15	13		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the code is not self explanatory and there seems to be some ambiguous parts or if I don't understand the design.	up to 25% of the time	between 25% and 50% of the time	Yes	Because I'm trying to understand the code that is changing and making sure that I understand the implications.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Immediate team, with focus on the people that are closer to the code (worked on it, use it)."	Yes	"Usually when a reviewer is very familiar with the code, their comments will be more thurough."		gillesk	gillesk
6503424	Test		5	4		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"Almost never, only if there's a fundamental understanding that needs to be communicated of a new or obscure area of code."	up to 25% of the time	up to 25% of the time	Yes	"I try to understand why they are making that particular change to fix the described issue. Additionally, new code is more likley to have bugs related to common failures (memory leaks, etc)"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Usually it's just my team in the requested field, with one team member that is trusted as the required reviewer. We oftne use each other as code reviewers because both of us have demonstrated a good ability to find bugs by inspection."	Yes	"With familiar code, reviewers are more likely to suggest a more systemic change that matches the overall flow of the rest of the code. With less familiar code, it's more likely to be trivial changes and/or perf comments."		tiherman	tiherman
6503426	Development		4	4		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance"				"When I don't understand a change they made, or if I want to suggest an alternative approach.  Also, when they have a mistake."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	"Because often the code that the changed files interact with is not in those files, so I have to look at a combination of the files they have changed and other files that do not show up in their changelist."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Usually by choosing someone with domain experience in the area I am fixing (either the code or the scenario/feature).	Yes	"Those more familiar tend to suggest changes in my approach, rather than just review the correctness of the code (won't break build, no obvious bugs, etc)."		swernli	swernli
6503427	Test		8	8		18	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"For design or issues that are not easily discussed over mail, I will have an in person conversation with somebody.  Sometimes it is much faster to explain something with a white board or resolve a dispute through a conversation."	between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Always the team DL for the team that owns any code that I am changing.	Yes	"Unfamiliar reviewers tend to comment only on style and basic issues.  Familiar reviewers tend to comment on the substance of code, and therefore provide more useful components."		damongil	damongil
6503428	Development		20	15		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Complex code without technical spec	up to 25% of the time	between 25% and 50% of the time	Yes	why would it not take longer to get familiar with unfamiliar code?	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			people familiar with the code/area	Yes	Typically if unfamiliar you often get comments more related to understanding the code to see if potential issue are real concerns			lucienk
6503430	Test		9	4.5		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				When the issue requires deeper design discussions.	up to 25% of the time	between 50% and 75% of the time	Yes	You have to build the context before actually reviewing the new changes.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Get peopl's aliases from GAL and put it in there. This is kind of annoying and can be improved. You guys should have integeration with GAL.	Yes	More pointed feedback is received based on the context.		muhasal	muhasal
6503431	Test		20	8		2	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				Our developers are usually offshore so in person communication is not an option	Never	Never	No	I am always looking for patterns and can quickly spot them in the code	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"One test and one dev, all members of the team as optional reviewers"	No		Because of the time differences with offshore and small teams we have a rule that code not reviewed within 48 hours is eligible for checkin anyways	rosnytsa	rosnytsa
6503432	Development		15	11		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Rarely. Mostly when there's need to elaborate or explain an idea either for the reviewer or developer, or to discuss a different approach that departs too much from what's in the review."	Never	up to 25% of the time	Yes	"Because I need to understand what the code does in order to review it, therefore it takes longer to review unfamiliar/new files simply because it takes longer to understand what the code does. It'd be surprising if it was the other way around, right? ;)"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Feature team (devs and testers) as primary reviewers and team's code review alias as secondary. Usually we go with the unspoken policy that 2 sign-offs grant a permission to go ahead with the review. This doesn't always work well in practice because people go with the number of reviewers rather than their areas of expertise.	Yes	Very familiar - feedback focus on the specific impact of the changes to the existing logic Not familar - feedback is more generic towards style and code/design principles  Note: I find it very important to have people unfamilar with the code to take a look at it because they can often see issues that those too familiar with the code tend to miss.			
6503433	Development		6	4		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 25% and 50% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes	"Better; more detailed, tailored to the problem at hand"			mebenua
6503434	Development		4	2		22	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"If I do not understand what the reviewee is trying to accomplish, I will ask this in person."	between 25% and 50% of the time	More than 75% of the time	Yes	"Understanding of the code in question is often helpful to a quick review, as you already know how the code around it works.  Sometimes it takes longer to understand the intent if surrounding code is foreign."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I would send a code review to those who know the area being worked on along with those who are interested in the outcome.	Yes	The feedback from someone who is more familiar with the files changes is often more thorough and detailed.		jonsoh	jonsoh
6503435	Development		13	6		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				conflict on ideas	up to 25% of the time	up to 25% of the time	Yes	need to understand the existing code first	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			all in my team	No			jadewang	jadewang
6503436	Test		5	5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				too many comments about the code change	up to 25% of the time	up to 25% of the time	Yes	i will need more time to understand the code.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			team members owning related areas	Yes	how detailed the review comments are.			yasu
6503437	Development		2	2		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1) When some new functionality is being added that I am not completely up to date with 2) When the description of the code review isn't enough to tell me what i am looking at	between 50% and 75% of the time	up to 25% of the time	Yes	Because I am not familiar with them.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I send them to my team and to people that I know are or have been involved with the files that I am touching	Yes	"Don't do that, you'll break x  People who own the code provide better feedback on things that aren't obvious in the code"		milyons	milyons
6503438	Test		3	2		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When there is a personalized helper funcation, that can not be understood by the reviewer."	up to 25% of the time	between 25% and 50% of the time	Yes	"Tester may create some personalized helper functions, that sometimes is not easily understood"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Base on internal review tool, whose turn for this review."	No				
6503439	Development		24	22.5		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When there is a need to redirect the implementation to use a different set of API, a different threading model, ... or ask for more clarification about test results or expectations."	between 25% and 50% of the time	up to 25% of the time	Yes	I will need to understand the whole area of code even if it is not modified.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			"People familiar to the feature, API, and design."	Yes	"People familiar to the code can provide more insightful suggestions to improve performance, readability ... Comparing to people unfamiliar to the code, can usually provide less useful suggestions."	I usually include testers for code reviewing. They are able to think of more ways to break the code. Or reminding them more areas to test before they can sign off.		tjwang
6503440	Development		6	6		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Anytime where the comment is to complex / lengthy to type up.  Often this is where the approach is wrong, not where the code has a simple mistake."	up to 25% of the time	between 50% and 75% of the time	Yes	Because without the context I don't know what depends on the code that is changing.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Whoever knows the area	Yes	"Its more detailed, more about the approach and less about single condition checks missing"		shwu	shwu
6503441	Development		3	0.5		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Helping improving the development process in general / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				People usually don't nominate me as a reviewer	up to 25% of the time	up to 25% of the time	No	I don't deep dive in unknown code 				"Manager, code owner, PM for the feature, people who are affected by the change "	No			dmitg	dmitg
6503442	Development		12	6		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"	"Missing Unit tests for bug fixes.  Also its expected that code review doesn't have build breaks, so we don't look for build breaks unless its obvious.  "			"If I don't understand his/her changes.   If There are assumption that those changes make and logic is complicated to explain in comment, then I prefer talking to the dev direclty. "	up to 25% of the time	between 25% and 50% of the time	Yes	"Because, when you are unfamiliar, you are also very unfamiliar with the impact of the code, so, need to look at this change and the code  around in more details. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code Owners or Co-owners, Tester involved.  CC:Team."	Yes	Folks familiar with the code provide more detailed feedback and are able to identify holes in some assumptions that we make.   Some owners request unit test be added.	"Linking those code reviews to bugs would be nice.  Some items are not resolved during code reviews but code review can be completed without them, there should be a way to track them outside of hte code review, product studio? "	irfanb	irfanb
6503443	Development		13	1		12	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When I have a concern which can't be expressed in a terse comment.	between 25% and 50% of the time	up to 25% of the time	Yes	Because I'm not familiar with them.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Immediate feature crew + any known interested parties + general CR lists as optional.	Yes	Reviewers who are not familiar with the code tend to not leave comments at all.			grahamk
6503444	Development		20	2		8	Yes	"Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Very few.  Discussions are good in Code Flow.	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"We send to entire team alias - it is optional for all of them.  Then I send as required for anyone who this code might affect directly (through API changes, etc). "	Yes	"Owners of code tend to have more insight into the things you might break with your code change.  Anyone can see the basic bugs, but the process or flow is harder to grasp from a single file."	"To see how the code has changed is great, but how did the app flow change?  Did this introduce new complexity in testing, or possible side effects from new code paths?  Determining those is much harder and would be a great research topic."	jshort	jshort
6503445	Development		6	6		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If it's a large review and/or if I don't know much about the existing codebase, I tend to talk to the review author in person to enable me to give a more useful code review quicker.  Also, I sometimes talk in person with the review author if I think my suggestions are going to be controversial or if I think the author won't agree with my rationale behind suggestions."	up to 25% of the time	More than 75% of the time	Yes	"new/unfamiliar files take me longer to review, because I have to learn what's going on in the new/unfamiliar component before I can give confident and/or useful feedback."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I usually try to get people who are familiar with the code and/or on my immediate team.  When I edit code owned by other people/teams, I usually use source depot change history to find the people who have also made checkins against the code I'm editing and ask them if they're the right people to review my changes."	Yes	Usually comments coming from a code owner or someone else familiar with the code are more detailed and more authoritative.		robertes	robertes
6503446	Test		7	7		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"				normally if I dont have source	up to 25% of the time	up to 25% of the time	Yes	if I am not familiar I need to pull up Visual studio in order to understand it. If the code review happened in VS it would be much simpler	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			people who have worked on that piece of code before	Yes	people who havent worked on code sometimes catch issues which people who are familiar do not. 		arunsun	arunsun
6503447	Development		11	9		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"One condition might be where I would like to understand more about the change (why it is being made, why it is done this way instead of that, etc.), and I think it will be much faster to discuss in person (either because there may be a lot of back-and-forth, or because the discussion will simply be too lengthy to want to type it up in a comment)."	between 50% and 75% of the time	between 25% and 50% of the time	Yes	It takes longer to review files that I am not familiar with because all of the context surrounding the change is not already loaded in my head. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I send an invitation to my entire team, but specifically require review from the people most familiar with the code I am changing."	Yes	"When the reviewer is very familiar with the code being changed, s/he might give much more detailed feedback, and is more likely to spot problems.  When the reviewer is not very familiar with the code being changed, s/he is more likely to notice things that others have become desensitized to.  If I always had to pick just one kind of reviewer, I would choose a reviewer that is very familiar with the code, but both perspectives are useful."		danthom	danthom
6503448	Development		7	6		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When there is not enough context on the change. Sometimes its easier to meet in person and have the person explain the rationale behind specific algorithmic and design choices made, when it is not obvious. In person then helps avoid ambiguous back and forth either on codeflow or on email."	between 50% and 75% of the time	between 25% and 50% of the time	Yes	You have to understand the context of the change and think hard of any possible side effects. This is harder if you are reviewing change to an unfamiliar file.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People relevant to the changes, like owners of the files I am touching or owners of the feature that I am working in. Also prefer to include experts in areas like CSS, Javascript or Backend"	No			kbadam	kbadam
6503449	Development		1	1		6	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				If the author determines that an in person communication would be more efficent.	up to 25% of the time	up to 25% of the time	Yes	I need to gather context as to what is going on in the code around the code that changed.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Those who are required by policy to be on the review, those who work closley on the code changed by the review and those who can provide expertise on the review.  Those who should just be informed of what is happening are typically put as optional."	Yes	They can speak to interaction with related components since they are familar with the context.  Unfamiliar reviewers are good for making sure the code is readable and the comments clear.			jesleun
6503450	Development		6	4		22	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the change they're making is too complicated for me to understand from reading the code, or if I have feedback to provide that is too complicated to write in a comment bubble."	up to 25% of the time	up to 25% of the time	Yes	"It would seem obvious that if I'm familiar with the code, I have a better understanding of what the changes will do and may be aware of ancillary impacts that the developer may not be aware of.  In code I'm less familiar with I need to find those impacts myself and requires more time to figure out the context of the change."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Code reviews are sent to the entire team, we also keep a list of area owners and the code reviews are sent automatically to those people."	Yes	"Comments tend to shift to a more meaningful nature (about the appropriateness of what's happening, impacts it may have).  Comments from people who are not familiar with the code tend to be more superficial (minor tweaks on things within the scope of the change)."			angusm
6503451	Development		8	4		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Explanation too long (e.g. some class design suggestion); issue not moving forward in comments.	up to 25% of the time	up to 25% of the time	Yes	Because I have to read the entire thing instead of just using my knowledge of it.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People familiar with the area/code owners, people best at reviewing particular type of change (e.g. class refactoring vs some intricate multithreaded code); sometimes - if I want the review to be particularly thorough or if I just want a very quick check, I'd send to a reviewer with the matching style."	Yes	"More specific/useful; sometimes - more owner-ish (e.g. coding style, particular techniques, adding/removing stuff like logging/etc. that doesn't match other code)."		sershe	sershe
6503452	Development		11	10		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When there's something I don't understand.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	Takes more time to understand what I don't already know.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Dev/Test working on the same release as I am.	No				colink
6503453	Development		7	7		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important"				When code review is large - architectural changes and I am completely unfamiliar with that area.	up to 25% of the time	up to 25% of the time	No	"It depends on complexity of proposed code changes. If new code complexity is large and/or there are too few comments, familiarity with existing code may not be too helpful."				"round-robin on my team. if there change is risky, also involve person already familiar with code in addition to round-robin."	Yes	"Non obvious nuance problems can be spotted by a reviewer familiar with the code.   However, person non-familiar with the code can also provide a valuable feedback, because usually reviewers not familiar with code make less assumptions, and can spot high-level issues."	"Build breaks and basic functional correctness of the code should be done in automated way, and, thus, should not be considered as code-review goal.   Build breaks could be done as automated build on a clean machine. Basic correctness could be done by including a little basic automated test for the proposed changes."	nikolaia	nikolaia
6503454	Development		24	17		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If I don't understand either the code or the motivation for the change for at least a part of the submission, and I consider that part important."	up to 25% of the time	between 25% and 50% of the time	Yes	It's harder to understand the code in the unfamiliar scope and harder to lift the intention from the code.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People most familiar with the code being changed, plus sometimes people whose code may be affected by the change (latter typically optional)."	Yes	"Typically there is a higher ratio of suggestions that will improve the code or remove bugs, and lower ratio of suggestions that just require explanation of my intent and a ""won't fix"" resolution."		eugenez	eugenez
6503457	Development		24	24		25	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"rarely, usually when there is a lack of understanding about the code and its goals."	up to 25% of the time	up to 25% of the time	Yes	need to create an understanding of the context that the code executes in.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			I select feature area owners and general experts	Yes	it is often more comprehensive and complete. 	code review is very important to dev team productivity. improvements here are very valuable.		
6503458	Development		17	12		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If changes are way out of the normally taken route or outright wrong from my point of view. In most cases it clear out misunderstanding rather than leaving permanent trail as code review comments.	up to 25% of the time	up to 25% of the time	No	I generally spent about the same amount of time due to balancing of 2 opposite forces: carefull review of code I own/familiar with takes less time that reviewing of unfamiliar code would require. But usually there is someone else doing review how is mailiar with that other part. So I can spent less time in code I'm not familiar with (if there is more than one reviewer).  If I'm expected to be the only reviewer unfamiliar code often requires personal conversation and takes more time in general.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			For regular reviews: Area owner + Immediate team + Optional:Product team  For complex changes or changes impacting several areas of product: People known to provide good reviews + Area owneners + Optional:Product team  Essentially for changes I'm worried to get wrong I try to enlist people who do good code reviews irrespective of areas of ownership.	No			alexlev	alexlev
6503459	Test		6	6		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"Not very often, unless I don't understand why a piece of code was written."	up to 25% of the time	Never	Yes	"Because I try to understand the design, the whole style of submission, and (for new files) because there is nothing to compare to."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I send it to the standard code review alias, or to the people who usually do have time to look at reviews."	Yes	"Feedback is richer, and more about code design, other than style."		angelga	angelga
6503460	Development		8	6		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance"				CF does not allow me to make general comments about the whole change. Things like this change is not required at all. Other cases are when there is a disagreement over some comments and that thread in CF goes on for long.	up to 25% of the time	up to 25% of the time	Yes	You have to understand the changes and the affects it can have on other parts of the system.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People who have contributed in the past and who can be affected by the changes.	Yes	More insight on the side effects.	It would be nice if CF automatically detects the owner and/or the owning team for the files that are touched by looking at the source depot.	niravj	niravj
6503461	Test		15	8		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"happen rarely, but I'd say if I have a completely different approach that need in person talk or white board"	Never	Never	No	It will take longer only if the change is big and touch a lot of areas in the file that requires me to reconstruct the logic. for moderate reviews I usually follow same strategy reviewing the change and will take more or less the same time	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Usually I send to an alias where people can jump in and review. I add owner/expert in the area if there is one.	Yes	"Usually owners will catch these changes that will have an impact on functionality, yet not so obvious from code diff. Or suggest better approach for something they aware of that I perhaps missed."			menein
6503462	Development		33	17		12	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When issues raised are more complicated than can be expressed in a couple of sentences.  When comments have been misunderstood.	up to 25% of the time	up to 25% of the time	Yes	"When it is a set of code that I'm not familiar with, when I have time I will read more of the surrounding code so that I understand the context more completely."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			usually on the basis of folks that I know to have some familiarity with the area.	Yes	"When someone is familiar with the code being changed, less time is utilized on FAQ type issues."			Randy.Oakley@microsoft.com
6503463	Development		11	11		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"By ""Helping improving the development process in general"" I mean that enforcing code review is a great way to instilling a sense of accountability in developers (Specially junior ones). Knowing that your code will get eye balled in front of a broad audience incentivices people to ensure that details are taken care of. Initially it can cause people to be over cautious but over time they find the right balance and overall quality consciousness of the individual improves."			Sometimes the push back is not on the code itself but the overall approach taken. In-person conversations are faster in those cases for getting on the same page. This is not a shortcoming of CodeFlow IMHO.	Never	Never	Yes	A big reason for doing code review is to point out cases and scenarios not being handled. That aspect cannot be reviewed properly without understanding the context of surrounding code. Example: Is that method thread-safe or are the method parameters passed in by the caller trusted?	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Look for folks who own the code area or are familiar with the code area/technology being used. If no fit is found, I pick a developer I trust and then spend in-person time with them ramping up on that area first. I then use the same person moving forward for that area."	Yes	"Feedback is of higher quality. Plus owners tends to be more ""protective"" of their area so they can be verbose in their concerns."		adeels	adeels
6503464	Test		2	2		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Big problems/feedback that are hard to describe in short writing. Complex code that are hard to understand from diff.	up to 25% of the time	up to 25% of the time	Yes	"I need to understand the original file before reading the diff, and that would take much time."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"File owners, then experts in certain areas, then team alias for cc."	Yes	"Owners are usually more careful and with their deeper understanding, more helpful in catching subtle problems. "		yuxiuli	yuxiuli
6503465	Development		14	1.7		15	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"				Yes				
6503466	Test		7	6		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"If the review contains a long list of files, and there isn't enough explained in the summary comments what the change is about, what is the high level design and approach."	Never	up to 25% of the time	Yes	Reading code in CodeFlow in plain text without intellisense of visual studio makes it harder to quickly jump around the files and follow the flow of the code. Reading files in order as they appear in CodeFlow is not optimal. As a result a file already reviewed for syntax and design style and conventions may have to be revisited to understand the logic once you locate the caller of that code.	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Code review DL. In some cases, I include the owner of the code file I am modifying explicitly."	Yes	"The quality of the comments varies a lot. If the person reviewing my code is already familiar with its design and motivations, he is already on the same page as me. At this point, the comments will be to purely improve my code by suggesting better ideas. If it is someone who is not familiar with the code, there will be a part of the comments that are more like questions trying to understand what the code does and why does it do it this way. And by the end of this back and forth, the reviewer can hit 'review fatigue' and not do the real value adding review."	"Add ability for intellisense (which will help us in understanding unfamiliar code faster), give an option to see the change history for the file (which will help us understand how old the code is, or how frequently it is being modified)"	rmisar	rmisar
6503467	Development		20	15		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When I don't understand a particular piece of code.  Or when they have ""won't fixed"" a change that I would require fixed.  "	between 50% and 75% of the time	up to 25% of the time	Yes	"Because I'm often not familiar with the feature being developed, nor with the partner dependencies the code is calling into. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I choose another senior dev on my team, or a previous owner of the code.  I also include the test owner of the feature.  "	No			kenwic	kenwic
6503468	Test		14	12		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance"				"1. resolve ambiguous comments 2. quicker resolution of issues, especially if there are many iterations done in codeflow or if a checkin needs to be made quickly  "	up to 25% of the time	up to 25% of the time	Yes	sometimes we may need to know more of a new area and then sign-off on it.	"Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding"			"feature team, peers, owners of files/ areas"	Yes	history of why some thing is developed in a certain manner. Or new ideas on how something can be done better		chandko	chandko
6503469	Test		15	15		5	Yes	"Avoiding build breaks / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important"				If they don't understand my written suggestions.	up to 25% of the time	up to 25% of the time	Yes	Have to read more existing code to generate a context on the fix or change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Based on who is the integration partner, co-owner of code, and sometimes specific reviewers for specific types of code (Tools Reviewer, for example)"	Yes	"People unfamiliar with the code, generally just complain about comments or formatting, rather than functionality."			robmo
6503470	Test		14	4		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				The code is incorrect. Or I need to better understand what the code is trying to do.	up to 25% of the time	More than 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The owner of the file, and people who are familiar with this code."	Yes	"The comments are more useful, helpful, and educational."		xizhou	xizhou
6503471	Development		4.5	3		47	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If the author does not reply well in written correspondence; if the author has made a huge change whose core design I do not agree with; if I do not understand why a change is affecting the code in the way he claims it does.	up to 25% of the time	up to 25% of the time	Yes	"If I don't know how often a particular function is called, or in what contexts, I like to understand them before signing off on a code review."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			Code function/file owners; feature area experts.	Yes	"When a reviewer is more familiar, he tends to spot possible defects or scenarios my fix doesn't cover better."			jbest
6503472	Development		12	12		26	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the overall motivation or design needs discussion.  If the code review goes too many iterations, or if one point of discussion has too many back-and-forths. If the code review uncovers a case where a spec needs to be updated. If I need additional orientation to understand the problem domain."	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Immediate feature team or experts in the type of code being reviewed.	Yes	Less familiar reviewers are less likely to catch subtle system-affecting logic errors or deviance from coding style.			
6503473	Test		10	10		5	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When the code changes or motivation for code changes are not immediately obvious.	up to 25% of the time	up to 25% of the time	Yes	It takes more time to understand the context of the change and to determine what side effects will result.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I choose who is most familiar with the code, along with others who may be interested."	Yes	"Comments from people unfamiliar tend to be more superficial. Comments from people who are more familiar tend to be deeper and more complete, with greater focus on preventing issues at a deeper level (e.g. integration issues)."		louiscl	louiscl
6503474	Test		15	10		200	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"As a reviewer, I would need to talk in person to the author of the code review if there was a change in my area that had a large risk or I didn't understand clearly what is being done. "	between 25% and 50% of the time	up to 25% of the time	Yes	It usually takes longer to review new files or files that I am not familiar with in order to get an idea of the entire change and how it will affect the overall system we are building.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I usually select the people who are working on the same feature team as myself or whose component might be affected by a change I am considering.	Yes	The comments tend to be more directed when a reviewer is very familiar with the files that are being changed. These comments tend to be more actionable and pertinent.		randh	randh
6503475	Development		16	2.5		6	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				I don't understand how the system is supposed to work.	up to 25% of the time	up to 25% of the time	Yes	"You have to determine what the code is doing before you can check for correctness.  In both cases you need to check for typos, etc, but correctness is harder if you are unfamiliar with the code."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1st criteria is folks who will be impacted or who will recognize easily impacts to other systems.  2nd criteria is their code quality.	Yes	"if they are familiar they are more likely to comment on correctness, if they are unfamiliar they are more likely to comment on surface details."	"I don't ever want to live without codeflow.  I send out a codeflow and while its being reviewed by others, I apply the dpk on a second machine to build and test.  I also frequently use it at the end of the day to backup my work and make notes on code changes I""ve made to keep track of my next steps."		jofoste
6503476	Development		20	7.5		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"When the review required more than just few lines of comments; ex, design issues."	up to 25% of the time	up to 25% of the time	Yes	I need to understand the code and what the change is about	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Complete understanding"			code owner or the subject specialist	No			vtarnu	vtarnu
6503477	Development		3	3		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the owner of the change appears to have a conceptual misunderstanding of how something works, requiring detailed explanation."	up to 25% of the time	up to 25% of the time	Yes	"I generally will need to examine the entire file rather than only the changed parts.  When I'm familiar with a file, and only part of it is changed, I only need to examine the changed, and related, parts."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Choosing those with experience writing similar code.  Owners of the original files.	Yes	"Generally if the reviewer is less familiar with the code, there will be less feedback."			masandy
6503478	Development		6	6		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Maintain a code quality bar followed by the team.			1. I don't understand code. 2. Solution is partial.	between 25% and 50% of the time	up to 25% of the time	Yes	"It takes longer to understand how code works, therefore the delay."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I pick area experts, people familiar with the code, people who are good at doing code reviews."	No			yurybog	yurybog
6503479	Development		10	3.5		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				I need to talk to the author when 1. The review request is too big with a huge number of files or large chunks of code being changed/added 2. The problem statement or the fix is not obvious 3. The author completely disagrees with the review comments	up to 25% of the time	between 50% and 75% of the time	Yes	"More pieces of the puzzle need solving before I become useful as a reviewer - what the code is meant to do - what it actually does - how the code is laid out : does it have documentation, unit tests etc"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I select people in the below order of preference 1. People who are familiar with the problem 2. People who are familiar with the code being modified 3. People who are experts in the language in which the files are being modified. 	Yes	Relevancy of review comments increases when people understand both the problem and the solution.	"Codeflow is awesome but I would like to see the below enhancements to it: 1. Reviewers should be able to do partial sign offs : e.g. I may be a subject matter expert in 5 of the 20 files submitted and I should be able to sign off on just them. 2. Submitters should be encouraged to provide better context of the problem statement. 3. Submitters often want the reviewers to review files in a specific order. Submitters should be able to rearrange files based on their preferred order.  As a meta point, some teams tend to use review process for checking for build errors, while others use it for static code analysis, relying on a different mechanism to catch build errors. I prefer the latter approach, but it might make sense to be aware of the difference that creep in due to this."		insikdar
6503480	Test		2	2		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				I usually talk in person to the author when I don't understand the intention of the code.	up to 25% of the time	Never	Yes	"Need first understand what the code was supposed to do, why there are problems/needs for improvement etc."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			1) code/test owner; 2) domain experts 3) improvement team members; 4) component team members.	No			yiweiz	yiweiz
6503481	Development		1	1		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If I don't understand what they're trying to do with their changes, or if I disagree with the changes and it can't be resolved in comments.  "	up to 25% of the time	up to 25% of the time	Yes	I may need to look at the surrounding code to figure out what it's trying to do or if there are unintended effects of the change.  	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"The people who own the changed sections of code, my manager, and people who specifically ask.  "	Yes	"A familiar reviewer tends to notice things that someone else wouldn't - if something is redundant, if something needs to be changed in other places as well, if there's an easier way.  "			grfinkel
6503482	Test		1.5	1		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	Never	Yes	Need to better understand the context for the changes	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Co-worker whom I know already understands my area, or are concerned with what I am doing; Optional reviewer to wider CR alias."	No		"It would be good if it is possible to open other related files within CodeFlow that are not in the changelist. These could be files that are relevant in the context of the change, but not changed in the review."	etse	etse
6503483	Development		9	7		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If there is alternative design which is totally different to chat if developer considered it. 	up to 25% of the time	up to 25% of the time	Yes	Have to spend time to understand the code and how it impacts rest of code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			The person I think knows most about the code and at times to distribute load.	Yes	Such person has higher chance of finding bugs or issues impacting other components.		pangar	pangar
6503484	Test		5.5	5.5		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Only if I have a big concern about his design and implementation.	Never	between 25% and 50% of the time	Yes	I want to understand the things I don't understand.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			the one I think who is familiar with the code I modified.	No			quzhang	quzhang
6503485	Development		13	13		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	It's also important to ensure that code quality is maintained at a level desired by the team; some team members may not be following best practices or may otherwise be producing sub-standard code.			#NAME?	between 50% and 75% of the time	More than 75% of the time	Yes	I need to understand the existing code first before I can comment on the changes.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Those who have participated in the code's original design/thought process in design reviews, etc."	Yes	Difference between algorithmic analysis and comments on coding style. The difference is big.	Code reviews decrease in value when: 1) All developers are busy. 2) Reviews are not mandatory. 3) Reviewers and code owners share offices. Often the reviewer is the roommate! 4) Many reviews are sent at once. 5) Reviews are very large (Such as first-version submissions with no previous versions to DIFF against) 	thomasj	thomasj
6503486	Development		3	3		35	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Whenever I have a question or concern about the general premise behind their change - either I don't understand why their change is needed in the first place, or I don't understand their general approach to solving the problem.  Also, I'll often talk to the author in person if I have a concern that would likely lead to significant changes in the submission (e.g., ""I just refactored the method that you're changing here; you should sync my changes and update your fix."")."	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"In this case, there's usually lack of context/background in which to consider the changes."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Generally, I choose the people who meet at least one of the following criteria:  - The owner of a file that I'm changing - Someone who knows a lot about the feature area I'm changing - Someone who I've discussed my changes with while implementing them  If nobody meets the above criteria, I'll usually either choose a dev who has made changes in similar areas recently, or send the review to a larger alias. I'll also usually include my tester and PM so that they have some visibility into what I'm working on and what bugs they can expect to see fixed soon."	Yes	"The comments tend to be more high-level, often suggesting a different (and often better) approach of solving the problem. They'll also suggest specific cases that I need to have considered.  If the reviewer isn't very familiar with the files I'm changing, the comments tend to be more detail-oriented and not feature-specific - whitespace, style, commenting, etc."		kylewhit	kylewhit
6503487	Development		10	9.5		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				#NAME?	up to 25% of the time	up to 25% of the time	Yes	#NAME?	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			code or componenent ownership changes that may impact the people whom I send code review to	Yes	"review who is familiar tend to comment more on approaches, or ideas, or from previous experiences on things they have tried before."			
6503488	Development		17	7.5		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"	"Uncaptured 'tribal' knowledge about feature, legacy, or interaction potential"			"For myself, rarely, if ever.  My preference is to add comments to the review, even when involving a redesign suggestion or criticism of a poor implementation or design."	Never	up to 25% of the time	Yes	"First and second order analyses are not easy in the code review tool.  Have to switch to depot to look at source history, or Visual Studio in order to efficiently validate inheritance, use of code, code duplication, many other factors."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Area owner Recent area editor Availability/workload Design competence (architectural/framework changes)	Yes	Gotchas (history regressions) Code duplication/reuse Refactor opportunities Indirectly applicable scenarios to design/test		avaley	avaley
6503489	Development		10	7		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				I would like to talk if I cannot follow the code properly i.e. not so well commented. Sometimes it is also hard to express review in comments.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	Takes a bit more time to understand the logic and find deeper issues if any	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			select reviewers based on who is familiar with the code for big reviews or who is available for small reviews	Yes	a person familiar with the code typically gives a better review			rsundar@microsoft.com
6503490	Development		14	1		86	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important"				Almost never.	Never	up to 25% of the time	Yes	"Usually have more code to look at (either an entire new file with no previous revision to compare against), or need to read more surrounding unchanged code to gather context.  Worst case, I'll have to open the file in its solution in dev studio and search for all references, etc."				areas of code ownership	Yes	formality	Server performance and uptime has been an issue at Kirkand-434 location.  Being able to host our own server  locally would likely help.	aleiby	aleiby
6503491	Development		1	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				-I'm unfamiliar with the code they are modifying. -I have feedback that is difficult to write.	between 25% and 50% of the time	More than 75% of the time	Yes	"I try to look into the code to make sure I understand what the code does.  If I'm already familiar with the code, it takes less effort."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			5	Yes	The comments are more specific and they tend to have a higher standard.		eagreath	eagreath
6503492	Test		5	3		8	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance"				"If there need major change of implementation, or there are more implications for the current implementation, I will discuss in person to better understand the perspective and propose the possible alternative design."	up to 25% of the time	up to 25% of the time	Yes	I need to read more code than the code submitted to give meaningful review.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Direct feature team; colaborator	Yes	"Generally, the less important comments usually much easier to get; the actual good comments needs thoughts and real understanding of the code and scenario, no matter it is the owner of the files or not."			
6503493	Development		4	2		13	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				#NAME?	up to 25% of the time	up to 25% of the time	No	#NAME?	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes	#NAME?		davidter	davidter
6503494	Test		1.8	1.8		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"I usually talk to the author in person if it is a large review (i.e. several new source files instead of just modifications to existing files) and/or if the review encompasses more than one change (i.e. more than 1 bug, or more than 1 new feature). My goal when talking to the author in person is to better understand the layout of what is being submitted, to get an overview of the changes and intent."	Never	between 25% and 50% of the time	Yes	I need to spend additional time understanding the layout/intent of the author in addition to understanding the technical details.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I always include my immediate team and occasionally include someone with a specific skillset. For example, if I am submitting a powershell script I might add someone outside my team who is very proficient in powershell."	Yes	Suggestions/comments are often more specific when the reviewer is very familiear with the changed files.		scsouthw	scsouthw
6503495	Development		9	7		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When the overall design is seriously under-communicated.	up to 25% of the time	up to 25% of the time	Yes	"Stylistic consistency, less context on structure."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Feature team (Dev+Test+PM) by default.  Supplemental reviewers are added if context of change is outside my team's scope- I usually work with past owners or use source history to figure out who has affinity and should be looped in.	Yes	Less familiar reviews tend to focus on stylistic considerations and issues in local context. These also tend to call out issues of poor design in existing code.  More familiar reviews(ie- by owner) tend to call out regressions(due to change) of local design.		pantal	pantal
6503496	Development		10	4.5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				-Understanding his approach -Comment on the auther's approach -Discuss an alternative approach	between 25% and 50% of the time	between 50% and 75% of the time	Yes	#NAME?	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes	#NAME?	Code review is not being considered in our shedulling. It is very hard to review the codes while you are tight on schedule. Quality of the reviews goes down since people cannot spend time on reviewing.	kiarashn	kiarashn
6503498	Development		17	6.5		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"I would add Rarely to the lists below, because I would have chosen it for both (25% is high).  Only when sticky design considerations warrant..."	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Those who have touched the same areas	Yes	More constructive feedback from familiar devs			nsedora
6503499	Test		22	4		25	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important"				Complex\Lengthy Code Reviews	up to 25% of the time	between 50% and 75% of the time	Yes	"Presumably as new code is added, complexity increases."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			1st by impact 2nd by quality of previous feedback	Yes				sonyama
6503500	Test		6	1.5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				#NAME?	between 25% and 50% of the time	up to 25% of the time	Yes	Takes longer to understand what is changed and what are implications.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Feature team / owners if files that were changed Product code review alias as optional	Yes	In this case reviewers will provide more valuable feedback since they understand code better.			iedeny
6503501	Development		4	2.5		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When it is taking too long to close on a issue. Some of the design decisions that might be easier to solve in person.	up to 25% of the time	up to 25% of the time	Yes	take some time to understand the code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People in the team or on partner teams that know the code or might be impacted by the change	Yes	Reviewers that are not familiar with the code will usually only give general code guidelines.		marcelas	marcelas
6503503	Development		8	8		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the change I want to propose is in large scale, such as offering an alternative approach, or it is easy to explain in person."	up to 25% of the time	between 25% and 50% of the time	Yes	It takes time to understand the existing code/architecture to make sure that the newly added code is correct.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			owners of the same area; test counterpart; team code review alias	Yes	"Reviewers who are familiar with the files usually provide more insightful feedbacks; Reviewers who are not failiar with the files usually provide general coding feedbacks, cosmetic changes, or asking questions."		leiz	leiz
6503504	Development		7	7		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Bigger changes.  Or really bad change detection due to code being moved.  This happens a lot when code that has never been through resharper is ran through resharper, the changes view is completely broken."	up to 25% of the time	between 50% and 75% of the time	Yes	Lack of understanding of the project.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			all team members and testers	No			hengsun	hengsun
6503505	Test		1	1		8	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"when unsure about design/lack of feature documentation, something seems blatantly wrong, when feature requires further discussion & I could save time speaking directly"	between 25% and 50% of the time	More than 75% of the time	Yes	"comprehending code takes longer. Also, it will most probably be new code that hasn't been through the review process before thereby lacking in comments/clarity etc"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"whole team but with different levels of urgency/requirement. For example, owner: requried, rest of team: optional"	Yes	A reviewer familiar with the code is more likely to point out subtle design issues and how the new components fit in			raveeram
6503506	Development		9	6		15	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When there is not enough information based on the code changes and comments to indicate what the goal or approach of the check in is trying to accomplish.	up to 25% of the time	More than 75% of the time	Yes	I need to spend time reading code that I haven't seen before or don't full grasp what it does.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I select people who have a general understanding of what changes I'm making or have ownership in the areas that my changes touches.	Yes	Typically people who are familiar will have better understanding of the edge cases or scenarios I have not thought about.		aduong	aduong
6503507	Development		23	6		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"When I need to say something, they need to respond, and I need to respond to the response.  Two hops is OK via notes but three means face-to-face will go quicker."	between 50% and 75% of the time	up to 25% of the time	Yes	"Close to a wash.  It takes a lot longer to understand unknown code at all, but even then understanding isn't very deep.  I tend to defer to the reviewer, because they are more likely to be right.  With code I'm familiar with I have more to say.  I know what to say faster.  What I have to say is deeper, more complicated.  And I can be more insistent on it."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"One person familiar with the code or change, and the rest of the team is optional.  Sometimes multiple people are required because multiple areas are touched."	Yes	"They're more likely to require me to change things.  Sometimes they'll insist that I don't touch the code at all, or say exactly how it may be changed.  Some code is actively owned.  The owner is changing it rapidly and doesn't want anyone to change it other than themselves so they don't get confused.  That's fine, provided I can persuade them to do necessary changes.  A lot of code isn't owned but has people very familiar with it.  Anyone can change that code."			bobjen
6503508	Test		4	4		10	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"for changes that require detailed explanations, brainstorming alternate approaches etc."	up to 25% of the time	Never	Yes	because i need to understand the code base first	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			immediate team + who ever is affected by the changes	No				prabok
6503509	Development		5	5		20	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Very rarely - most feedback can be accomplished within the code review or by starting a separate email thread with interested parties.	Never	Never	Yes	"Because in order to accomplish my goals in code review (reducing defects/bugs, generating better approaches, and keeping our code generally clean and up to standards) I need to understand how different parts of code fit together, what assumptions the new code is making, and whether those assumptions are always valid."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"If the review is internal to my team, I select the person who owns the feature and/or the person with the best technical knowledge of the feature area.  If I need a review from another team, I send it to their code review alias."	Yes	"In general, comments from owners and people familiar with the code contain deeper analysis in terms of potential conflict or regression, as well as more helpful suggestions on alternative solutions."			astout
6503510	Development		4	4		54	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If it is an excessively complex change. Typically we try to keep changelists simple and concise enough to be easy to communicate just via CodeFlow.	up to 25% of the time	up to 25% of the time	Yes	"I need to look around at what the functions/variables being referenced mean, at least on a superficial level."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Whichever person owns the area of the engine the change overlaps with most, excluding my area (of course)."	Yes	"They will be more insightful, and more likely to catch subtle errors."		willclar	willclar
6503511	Development		10	4		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"				"Mostly when there are some design questions/concerns.  One big problem with current code review systems is that the bigger context is not visible to the reviewer, so if I change one file which affects other pieces that depend on this file, the reviewer does not see that. so the reviewer sometimes need to track down that or go talk to the author in person. "	up to 25% of the time	between 50% and 75% of the time	Yes	"The context is very important, if you know what the relationship and interaction of a code with other pieces are, the review is much easier. however, in many cases this is not visible in the code review."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"seniority, knowledge, certain skills"	Yes	mostly related to extenral dependencies. the familiar person has some historical background on how the code has worked or used. 	"The most important thing to me is understanding the impacted code by the change I am reviewing. as mentioned before, the reviewer most of the times only see the file that has changed, but has no idea how this change affects the bigger picture. In addition, the test information (e.g. code coverage) is important for me.  I have been one of the :engineering process guys"" in my org, so I have dealt with processes like code reviews, testing, rolling build etc a lot. I'd be happy to get in to more details if it helps. my alias: haahmadi"	haahmadi	haahmadi
6503512	Development		13	10		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Not understanding design	between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Relevant devs + test	Yes	Better insights			vladiml
6503513	Development		7	7		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If I feel it's easier to discuss the review in person rather than a review tool.	between 25% and 50% of the time	up to 25% of the time	Yes	Need to understand unfamiliar code.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			By developers who are familiar with the code and/or who will also be working on the code in the future.	Yes	Quality of feedback.		jasonpar	jasonpar
6503514	Development		16	12		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"	It's required.			complex assumptions.	up to 25% of the time	More than 75% of the time	No	It depends of the scope of the changes.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Person most familiar with the code path.	Yes	more subtle issues are found			
6503515	Test		10	9		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"We use CodeFlow, so generally everything is done in that tool, including conversations about design. Unless of course it's a big design issue, which will involve a lenghtier conversation. Then we take it offline."	up to 25% of the time	up to 25% of the time	Yes	"In cases where I haven't seen the file before, I want to look at the overall picture of the code and get an understanding of how this piece fits with other pieces that I'm familiar with."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Immediate owners of the code, plus our code review alias."	Yes	More details and generally some insight into the design.		robertwl	robertwl
6503516	Development		13	2		10	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"in case of a disagreement, when a dialog through the code review tool is becoming too complicated"	up to 25% of the time	between 25% and 50% of the time	Yes	isn't it obvious??	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			usually include 1-2 of the people having very deep understanding of the codes or the area of the change. include feature's co-developers. as well as 1-2 random ppl who I confirm beforehand they are likely to spend time on review. then the whole team alias is in CC list.	Yes	"in Microsoft from what I learned so far - owners usually give very insightful information/comments/warnings, whilst only very few of the others do really dig into the very essence of the review."	"would be great to incorporate the review culture into ppls commitments, so that people would actually spend some more time while doing reviews"	ara	ara
6503517	Development		8	6		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Large code review where the changes tend to make it a design change review, not simply a code review. Comments may make it ok to review without the discussion, but if a design/approach question is raised, it tends to require in-person discussions."	up to 25% of the time	between 25% and 50% of the time	Yes	"Takes longer especially on new files, as all the code is added and you need to read all the lines to see the change. On modified files, you compare changes faster, as you see how the behavior of the code will deviate."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Usually it is automated, round robin system. Sometimes, for sensitive changes I add the (co)owners of the code/area."	Yes	"The owners are more knowledgeable about their code and design and raise better points about how my change would deviate from the initial path (style, design, assumptions). Code comments are not always there or they are out of date and so the owners' code review will be helping me make sure the solution is implemented consistently with how the feature has been coded so far."			cosminc
6503518	Development		3	3		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"	"We use code-reviews to get feedback for how things got finally implemented and to find bugs in the implementation. It's easy for somebody to overlook something, that's why more eyes mean more chances of finding issues. We also use it to evangelize what areas churned to figure out what needs to be tested for regression. I've seen other teams using it also to enforce coding conventions."			"If there are big design issues or there are arguments going back and forth, then I would like to speak to the person in person to discuss. You can only communicate so much in a CR."	up to 25% of the time	up to 25% of the time	Yes	"I tend to focus on correctness and finding bugs in code-reviews. So, I need to understand what the code is doing and how different pieces interact together. That's why it takes me longer."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"code-owners and, in some cases, owners of areas their code touches."	No				basharal
6503519	Development		11	1.5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				In case there is a design issue not the code.	up to 25% of the time	between 25% and 50% of the time	Yes	It again depend on the code size. Usually more time is needed to understand the bigger picture.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Based on code ownership and experience.	Yes	"Reviewers unfamilar with code usuallay give feedback on non functional things, like better syntax, patterns, comments. Code owners or folks familar with the code help catching real functional issues."	"I'd like to see a more standardized core review process across the company, at least the organizations. Now each team has their own approach, which, in my opinion, is not productive."	vatovmas	vatovmas
6503520	Development		8	5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"- When changes do not included detailed Description as to why the change is being is done; when not a bug fix - When author does not provided a URL where the code is running. For UI, as part of code-review, reviewers often like to try out different scenar"	Never	between 25% and 50% of the time	Yes	#NAME?	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes	#NAME?			
6503521	Development		7	7		9	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Get better idea about design decisions	up to 25% of the time	up to 25% of the time	Yes	Takes time to understand reviews of code I am not familiar with.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Alias	Yes	Complete understanding leads to higher quality comments / suggestions.			
6503522	Development		7	7		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"9 times out of 10, it is to gain more context. What problem is being solved? Why did the dev opt for a particular solution (comments help in such cases)? Reviewing code has to be more than just checking syntax and style guidelines, it has to be about understanding the context and the implementation in the given context."	up to 25% of the time	up to 25% of the time	Yes	"To gain more context. Sometimes, it's just easier to hop over to a person's desk than do multiple hops over cf comments. I'm probably more to fault here than the actual review submitter :)"				"To: Folks who need to signoff on my code before I can check-in. These are my 2nd, 3rd pair of eyes on the code changes I'm making. My checkin will wait until all required reviewers signoff.  Cc: Folks who may be interested in reviewing my code or just looking at my changes but my checkin will not wait on them. Feedback will definitely be incorporated."	Yes	Often folks who are not familiar with the code check for Syntax and style adherence. Folks who are familiar with the code are more likely look for context and the viability of the implementation.		mihird	mihird
6503523	Test		4.25	4		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				#NAME?	up to 25% of the time	between 50% and 75% of the time	Yes	"If I'm not familiar with the files, it will take me longer to understand the changes; there might be nuances I missed, and I will ask the person sending out the review for an explanation."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People who've worked in the area or related areas. Usually fellow testers because devs are not as familiar with test code (and vice versa).	Yes	"Less focus on the nitpicky things (names, newlines, etc.) and more focus on alternate approaches, design improvements, and suggestions for removing duplicate code/merging similar code."		hristp	hristp
6503524	Development		9	5		9	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				#NAME?	between 25% and 50% of the time	up to 25% of the time	Yes	"Because I have to learn how those files are used, the general context. If I am more familiar with the file I can just look at the changes itself."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes	#NAME?		mirelad	mirelad
6503525	Development		15	12		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Usually when a design change needs to be made or when the author fails to understand a comment fully. Rather than add long comments or going back and forth in CodeFlow we talk offline. 	between 25% and 50% of the time	up to 25% of the time	Yes	"I own code quality and if it is the first time I'm reviewing a file I comment on the entire file not just the changes. The author is then responsible for bringing the entire file up to standard.  If I am just not familiar with a file, perhaps because it comes from another team, it just takes longer to grock. "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			It's standard practice on our team to include one of the code czars and the rest of the team. When working with code owned by another team the code owner and their team are also included.	Yes	Owners tend to provide more valuable feedback by the nature of their familiarity with the code. 	We use Code Flow exclusively for code review on my team and the last several teams I've been on. Best tool for productivity I have ever come across. 	gkelley	gkelley
6503526	Test		3	1.1		10	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503527	Development		5	5		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Third Most Important"				"I talk to someone in person fairly rarely. Usually it would happen when the code change is completely wrong. I do use the Codeflow chat feature, in case that matters."	up to 25% of the time	up to 25% of the time	Yes	Need to understand the code context in addition to just the code change itself. If I'm familiar with the code then it's easy to reason about the change alone. If the code is unfamiliar I usually try to consider how other unchanged parts of the code interact with the changes.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I either pick people who are familiar with the feature area or developers I trust.	No			marcind	marcind
6503528	Development		13	7.5		2	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					More than 75% of the time	up to 25% of the time	Yes	lack of code comments lack of clarity on the goal of fix	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			stakeholders of feature contributors 	Yes	soft feedback at times quick sign-off		sharmas	sharmas
6503529	Development		6.5	6.5		8	Yes	"Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"1) If there are several places that i cannot easily understand, i would talk to the author in person for better communication efficiency.  2) If there is some big change that is needed in my opinion."	up to 25% of the time	up to 25% of the time	Yes	"In order to do a good review you need to understand what the change is. If you are not familar with the files, it takes more time to digest."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			The people who is familiar witht the part that i'm working on.  The people who is considered as 'senior' guys.	Yes	The comments are more valuable. And higher chance that better approach is suggested or bug is found.		ymchen	ymchen
6503530	Development		3	3		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If I do not understand their code or I think their code requires a complete rewrite or different approach.	up to 25% of the time	up to 25% of the time	Yes	I need to understand what the code does and what the change is completely to properly review it. Otherwise my review is just superficial and doesn't take into account if its the correct approach for the change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			My tester and a few select devs who CR my work well. I always CC my team alias so anyone can go take a look too.	Yes	The review is more on why I chose this approach rather than syntax.		zackf	zackf
6503531	Development		15	11		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				intent unclear; disagreement over appropriate design approach	up to 25% of the time	up to 25% of the time	Yes	Need to understand what the code in those files does	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			owners of code areas; others in team; seniority	Yes	more likely to notice actual bugs introduced			edyoung
6503532	Test		7	5		35	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	up to 25% of the time	Yes	Just new coding patterns	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"owner of the file, someone who is avaialble to code review, someone who provides meaningful feedback, someone who is prompt"	No			dhavalsh	dhavalsh
6503534	Test		13	13		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Third Most Important"	"I don't consider avoiding build breaks to be a code review motivation because I think that is a separate part of the work flow diagram. If for the purpose of this survey it is considered part of the code review workflow, then I would rank it second behind Finding Defects/Bugs (though it really is the same thing =)"			"I will talk to someone in person when (a) it needs to be a fast review and we don't want to do it over the shoulder, (b) I am reviewing code sent to someone else (optioninal in your lingo) and I have a question that can be answered quickly or seems too trivial to spend a full waiting/updating/reviewing cycle on, (c) I've had to reactivate an issue that they won't fixed or postponed, (d) helping someone better understand a comment I've made and written text is too restrictive, and (e) a build break they need help with."	up to 25% of the time	up to 25% of the time	Yes	"It takes longer to review code I am not familiar with because I need to understand the entire program flow and that person's style choices and how their feature works. I'm also more likely to do a code inspection than a code review, so new code can take longer to process and ensure is correct."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"(1) owner of the code, (2) gives good feedback, (3) is open to learning and improving, (4) is next in line on the list"	Yes	"They have a better idea of the original intent of the code so their feedback is ""deeper"" (more about ""how it works"") than someone who isn't as familiar and is looking at it superficially."	"It is hard to find a good code reviewer and is hard to train multiple people to be good at it. To be good you have to care and I don't see a lot of people taking the time to get good at it because there isn't a reward in it for them (sad but true). btw - Question 14 is totally confusing, I hope I answered it how you wanted because it is written kind of wonky. ""Code review submission"" just doesn't make sense to me in that sentence."	demana	demana
6503535	Test		5	5		12	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				If I have to convince the other guy in a Mexican standoff kind of situation.	between 25% and 50% of the time	up to 25% of the time	Yes	"Because I want to understand what the file does, what are the changes and why were they made."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Select reviewers who have a dependency on my the modifications I am doing, some who don't have a dependency but am doing changes in source files owned by them, some as FYI, managers as FYI"	Yes	"comments from a reviewer who is familiar are more insightful and actionable. comments from a reviewer who is not very familiar are superficial, typo's, comments focused more on coding standard and coding practice."		adityake	adityake
6503536	Development		12	10		11	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				 When it is unclear what the code change is trying to achieve or when requires frequent back and forth discussion.	up to 25% of the time	between 25% and 50% of the time	Yes	It takes longer to understand the code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			people working on the feature area	Yes	 The depth of the feedback is different depending on the familiarity with the code.		zhangxu	zhangxu
6503537	Test		5	5		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"Only if I absolutely disagree with the code review, or if any of my comments require further explanation"	between 50% and 75% of the time	up to 25% of the time	Yes	To make sure I understand the code better to be able to identify issues in it better. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People directly affected by the change and people most familiar with it. 	Yes	"Subtle improvements can be suggested, corner case bugs can be identified also "			anshah
6503538	Development		12	4		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					More than 75% of the time	More than 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"				Yes				
6503539	Development		6	4		1	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Second Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes	"It takes longer for me to understand the motivation, right structure and design if I am not familiar with the codebase. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			#NAME?	No			sansu	sansu
6503541	Development		3.5	3.5		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance"				"Understanding the over all approach of the feature/fix, the pros and cons for the design decisions."	up to 25% of the time	between 50% and 75% of the time	Yes	Takes longer time to understand what is going on.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People most familiar with the code being changed. Add the tester who is going to test the code.	Yes	Its more design related comments if reviewer is familiar with code otherwise mostly it is structural feedback.			urjash
6503542	Development		1	1		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"I do not generally need to talk to the author of a code review.  However, when I do, it's typically for one of the following reasons:  1.  I'm confused about what problem the author is trying to solve. 2.  I'm confused about about part of the change the author has made."	up to 25% of the time	between 25% and 50% of the time	Yes	I believe it takes longer for me to review changes to files that I'm not very familiar with because there are more things that I need to learn before I'm confident that I understand the change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding"			"I generally put the alias for the immediate team as required, and the alias for the feature crew as optional (so they're aware of the changes)."	Yes	"I've never studied this closely, but I believe that people who are more familiar with the code are more likely to discover errors in my thinking, whereas people who are not very familiar with the code would likely discover mostly stylistic inconsistencies."		benjb	benjb
6503543	Development		16	13		10	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important"				When its becomes practically inconvenient to explain why the CR is being rejected or requires modification.	up to 25% of the time	between 25% and 50% of the time	Yes	Need to read through more related parts of the code to get a better idea of the space.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Required reviewers: Current owner if I'm modifying their code.   Backup dev for the feature area. Other devs in the feature team. Devs dependent on this functionality.  Optional reviewers: Dev lead, PM and Test counterparts, for visibility puproses. "	Yes	Usually alternative approaches are mentioned and or potential pitfalls are highlighted.		ramthi	ramthi
6503544	Test		13	13		4	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When there is a differing of philosophies.  When there's just too much verbiage to fill a comment in CodeFlow.	up to 25% of the time	between 25% and 50% of the time	Yes	"I try to take the time to get an understanding of what I'm reviewing, and how it may impact other areas."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"We typically send our code review requests out to our entire team.  This allows more people to look at more code, varying levels of feedback, learning, etc.  This relieves the pressure that gets put on a single person that may not be available at the time of the request."	Yes	The comments given to someone that is not familiar can be used as an opportunity to help educate the reviewer of specifics around the code.			louisma
6503545	Development		12	2		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When I want him to show the changes live. Code Flow could have a special field on how and where to repro the changes so that reviewers could use. Making this explicit wil set expectation that reveiwers want to test the changes a bit and verify how it works. This is very important for veriewers to understand the functionality changes.	up to 25% of the time	up to 25% of the time	No	For a large product it is always something different so you get used to learning on the fly every time.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			Normally feature crew members. We use DL + primary reviewers.	Yes	The comments are deeper in nature.	"Better support from CodeFlow team. This has been horrendous for an intern who still has issues with Code Flow due to some authentication failure on CodeFlow servers. He has tried to reach via discussion board, e-mail, but no response from anyone. It has been 3+ month, and he still gets Auth denied error when opening CodeFlow first time."	hosadoya	hosadoya
6503546	Test		12	5		12	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				hema
6503547	Development		4	4		9	Yes						up to 25% of the time	between 50% and 75% of the time	Yes	Depending on the volume of code comments I would talk to the person. Plus if the it is a completely new file then i am more likely to talk personally with the coder. However if the change is small and is not associated to some specialized API call then the chances of in-person talk is less likely for me.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			anybody who owns or contributes to the modified code. anybody whose code directly depends on modified APIs (if applicable)	Yes	if somebody is very familiar with the code then he/she comments on the overall impact of the changed code logic. otherwise the comments are mostly on coding guideline and usual safe coding practice.			soumitsr
6503548	Development		16	12		28	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important"				When changes have broader impacted that has not yet been discussed.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	It takes longer because sometimes it may not be clear how the changes are related.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I select people that know the code being modified or were involved in the design of the changes.	Yes	When the reviewer is very familiar with the code the comments might go beyond code changes and include design changes.	"It would be useful to be able to have codeflow integrate with Visual Studio, so that we could see not only the files that were affected by the changes but also navigate through the project."	jsaraiva	jsaraiva
6503549	Test		7	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				I'm not familiar with the files	Never	up to 25% of the time	Yes	"In some cases, I need to take a look at the surrounding code to understand the purpose of the change and it's effects."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I choose people that are familiar wit the code being modified or at least are familiar with the programming language or tools being used.	Yes	"The comments tend to be much more specific when the reviewer is familiar with the code, the reviewer will care more about the change, and there's a greater chance the reviewer will find a defect/bug during the review."		jutamez	jutamez
6503550	Development		18	13		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the design is unclear. Or the number of code changes is large and the flow of the changes is not clear in the tool	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Familiarity with code. Experience with developement and code review practises.	Yes	Deeper comments about subtle interactions		vikramd	vikramd
6503551	Development		15	13		11	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important"				Only if the new code particularly mis-designed and mis-coded or it conflicts with another pending change. In general most comments and feedback can be given in the code review tool.	up to 25% of the time	up to 25% of the time	Yes	"If I want to be accountable and responsible in my review, I need more time to understand the intent of the code and how it fits in the larger product / service.  Without being familiar with the code, one can only spot glaring (rare) errors and generic issues like insufficient logging, generic improper exception handling or parameter checking, etc."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People working in the same area, known subject matter experts, a tester, if applicable, that is responsible for that area. Optionally, known experts for the technology or pattern used -- i.e. the best coder in the team for multi-threading programming when I touch any kind of multi-threading code, the best expert in async UX programming when touching async UX code, etc."	Yes	They can make precise comments about design choices and address the evolution and history of the component. They can find non-obvious bugs because they understand the underlying contracts between methods and classes that are not explicit.		federiga	federiga
6503552	Test		6	4		8	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Major design problem.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	Because i have to understand what is the change and why its made. And does it even make sense. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code ownership, area of expertise, and technical depth."	Yes	"People who has more experience on the area provide more detail comment considering past, and future works"			
6503553	Test		19	3.5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"To discuss alternative approaches, for purpose of brain storming. (I.e. when I feel that my proposal is not something _mandatory_ and I do not want the author to feel obliged to accept my change, or when I am not sure that my idea is actually the best approach, but don't want it to be missed)"	up to 25% of the time	up to 25% of the time	Yes	"Current files are changed locally and there are rarely completely new/doubtful design changes in them. New files usually bring completely new functionality, and their design is more often prone to different code style/new APIs involved"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"If my change may affect the work of other developers/testers - I include them. I advocate for having a dedicated ""code review alias"" for teams, and include them at least as optional reviewers (so the people have formal chance to review it)"	Yes	The difference is minor in our team. The owner is often provides feedback more active and defends his original design ideas proactively	"There are ""Accepted"" and ""Declined"" feedback for a comment. Having ""FYI comment"" and ""Will consider as a future improvement, no change for now"" would be great. People do it all the time and it's not obvious what does ""WontFix"" mean - ""Your idea does not work here"" or ""No time to do it now, will do it later"". Opening a code improvement bug automatically would be really cool, but probably too difficult..."	mavel	mavel
6503554	Development		14	12		12	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	understanding and providing feedback on the organization of code			"most often it is when the code doesn't speak for itself.  this could be because the change is very large, or not well organized.  we need to talk when there is a disagreement about different tradeoffs that need to be made.  "	between 25% and 50% of the time	More than 75% of the time	Yes	"it depends on the size of the change and what the change is. I am looking for higher level design issues mostly.  So I want to understand a lot of context on the scenarios, architecture, code design, etc so that I can provide some well thought out feedback on the overall solution and whether or not it is a good one long term rather than just a quick fix."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			I select those who I think are going to provide the best feedback to make a high quality and long term sustainable product.  I like diverse feedback as well.  So I also choose people based on what type of feedback they are good at.	Yes	get comments on different parts of change.  comments may be focused to the function rather than the class or higher level.		bfields	bfields
6503557	Test		1.8	1.8		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If my comment is more than 2-3 paragraphs long aka there should be a change in the approach on how to solve the problem or change needed in architecture/design, I usually stop by and talk to them about it. "	between 25% and 50% of the time	up to 25% of the time	Yes	"It just takes longer to read and verify that they're calling APIs/functions correctly and if the entire file/class is unfamiliar, it takes time to familiarize."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I choose the people that are familiar with the section of code/files that I am changing. If it is a new file, I usually select people who are familiar with the feature or have features that are functionally similar. "	Yes	"Those who are more familiar with the files generally give more insightful feedback. Some people just look at the code from a build break perspective and if theres no obvious errors, they sign off. "	"Generally, I see 2 practices - people tend to sign off if there are no glaring errors in the code review versus people who are more detail oriented and actually question / suggestion improvements for your code. Most of the time, this difference is dependent on whether they are really busy or not and also whether they are really familiar with the code/files being altered. People who are more familiar with the code tend to give more analytical and insightful comments whereas some people just write ""what does this section do"" etc (which might be helpful for them but not really helpful for me as an author)."		jessiwa
6503558	Test																								
6503559	Test		15	7		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Helping improving the development process in general / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important"				1. time sensitive CR that has open issues 2. insufficient comments or context about CR details	up to 25% of the time	up to 25% of the time	Yes	#12 above should be 'Maybe'.  Depends on the experience of the person submitting the CR.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			1. knowledge of area 2. knowledge of related technologies 3. history of providing quality of feedback 4. mandatory DL that has to be CC'd	Yes	impact of changes deeper in the stack or consumers of code being changed/written/etc. 		misbell	misbell
6503560	Development		16	14		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				Alternate design proposal that is not easy to explain in a couple lines of text. When I completely disagree with how the code was implemented.	up to 25% of the time	up to 25% of the time	No	"Ideally the answer above would be ""YES"", but realistically, I don't understand the nuances of the new code to give more than a superficial review of the changes. Whereas, when I intimately know the code, I can assess the impact of more minute changes, and I therefore can code review more effectively."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Standardized set of reviewers. (All devs are marked as required, and entire scrum team is listed as optional.)  I also follow these rules when checking in code for another codebase/scrum team."	Yes	The comments/feedback are more detailed. 			hbrodie
6503561	Development		13	11		6	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				For a large change where it is easy if the Developer walked through the code design.	More than 75% of the time	More than 75% of the time	Yes		"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			Devs who own the code; devs who have a depdency; domain experts; code review experts; test	Yes	Better feedback/comments		rajujag	rajujag
6503562	Development		3.7	3.7		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When the change set is very large and complicated, it helps to talk face-to-face. In addition, if there's been a lot of back-and-forth on a particular point, it is sometimes faster to discuss the issue offline."	up to 25% of the time	between 25% and 50% of the time	Yes	"I like to get a certain level of understanding of the code before signing off on a code change. If the files are already familiar to me, then I do not need to take the time to ramp up on them."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"More than 90% of the time, I send to the same 2 devs on my team. Occasionally, I modify code that has a different owner, in which case I include the owner and perhaps one of his/her teemmates on the review."	Yes	Reviews by someone who is completely unfamiliar with the code tend to be more related to style and best practices. Reviews by more familiar people tend to focus on methodology and tend to catch more bugs related to code that does not directly appear in the diff.		ddicato	ddicato
6503563	Development		6	3		14	No	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When something isn't clear as to why they made the design decision they did. Or when they made a change that does not make sense to the system. 	between 50% and 75% of the time	up to 25% of the time	No	"When I am reviewing files I am not familiar with I am looking for code completeness, error checking, asserts ect.. when I'm looking at code I understand I am looking for if they made the change the same way I would. as well as those other things."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Based on expertise in specific areas of the code, and/or if I feel they can help improve my code quality"	No		"There are two questions I had to re-read to fully understand, #12 (yes/no was confusing) #14 (assumed from my perspective not from team.)"	joshgi	joshgi
6503564	Development		14	12		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Complicated changes/intricate details. Or getting to an agreement to issue resolution.	up to 25% of the time	up to 25% of the time	Yes	Need to understand the existing system. But generally this does not happen often - most of the time people review just the files they own+overall design.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on file ownership + other individuals based on personal judgement on who needs to be involved.	Yes	Deeper and more insightful feedback.		tomtal	tomtal
6503566	Test		8	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"					up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503567	Development		5	5		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	To understand changes happening to component. Known issues and their solutions.				up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"				No				sateesp
6503568	Development		20	6		6	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				When the reason for a change isn't apparent from the description or the change itself. If I have an idea for an alternate implementation that varies greatly from the change.	up to 25% of the time	up to 25% of the time	Yes	"In general, for most existing code I'm pretty confident that it is good working order, so I'm only interested in how a change affects the existing code. For a new file all of it needs to be reviewed and it's implications assesed."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"If I don't already know of someone who is familiar with the area of code I will look in the file's history to see who recently touched the code. Failing that I include some well known good reviewers, who will often include the right people on the review for me."	Yes	"You get better feedback about whether or not you are changing the original intent of the code and if there is a better way to do things. For those that don't know about the code, you get mainly feedback about comments, style, and performance as relates to the change itself e.g. this is a loop invariant value, pull it out of the loop... "	"I find CodeFlow extremely helpful, if it could be augmented to suggest reviewers, be better integrated with Product Studio (right now it DOES add a PS entry that a bug is being reviewed but it would be nice if it would also mark the PS items as in ""Code Review""). Be better integrated with Forge/sd so that if a change has been signed off those who signed off get an email when the change is checked in instead of having the dev put the reviewers into the Forge client manually."	iansul	iansul
6503569	Development		13	2		6	Yes	"Avoiding build breaks / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				Comments are almost always necessary but in person talking with is really only necessary when reviewing complex pieces of code or providing additional explanation for why one does/doesn't do it one way or another	up to 25% of the time	up to 25% of the time	Yes	Need to refer to potentially unmodified files as well to understand what the code is doing.  New files general involve larger changes and thus more attention.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			People familiar with the subsystem that the code review applies to and team in general	Yes	"Someone that is very familiar with the code base will generally provide alternative approaches/validate ""idea"".  Someone with less knowledge will generally point out syntactical issues/typos."		branders	branders
6503570	Development		20	5		4	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				sometimes	Never	up to 25% of the time	Yes	need to first figure out what the code is doing	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"code owners, team lead, testers"	No				
6503571	Development		16	12		65	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Design intent questions - why a specific design approach was taken. Background on code in question when I'm not familiar with it. In general, times when I expect there will be a back-and-forth discussion vs. short comments."	up to 25% of the time	between 25% and 50% of the time	Yes	"Understanding context of changes requires some knowledge of the underlying code / logic flow.  This is much easier of course when you are familiar with the underlying code vs. areas where you have less familiarity.  In the latter case, review requires looking over unchanged parts of the code along with the changes that are part of the review."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Area experts, senior devs with broad codebase knowledge, related area owners"	Yes	"People who are familiar with an area or feel ownership of the code are more likely to provide quality feedback - whether via deep knowledge they have about the code and potential impact of changes, or due to the ownership factor where they are more likely to hold changes to a higher standard (though that of course is dependent on individual personality/talent)."		scowell	
6503572	Development		14	7		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance"				"If the general code is complex, and I need more context to understand the change.  When there is possibly a better alternative, I discuss in person to see if they have explored the alternative."	up to 25% of the time	between 25% and 50% of the time	Yes	"If the files are unfamiliar, then I need to understand the logic of the file and system to understand the review.  New files have no context, so tend to be larger changes that need more scrutiny."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"We send to the entire team, the test owner and if areas are touched outside the teams ownership, then devs/test on that team is added."	Yes	Owners of the files tend to have more constructive feedback and offer alternatives to your approach.  It is always beneficial to have the file owner(s) review the changes.		klondon	klondon
6503573	Development					5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important"					between 50% and 75% of the time	between 50% and 75% of the time	Yes		"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding"				Yes				
6503574	Development		6	1.5		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				#NAME?	between 50% and 75% of the time	up to 25% of the time	Yes	for understanding the design and features 	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			all team members	Yes	"the amount is tremendously different, if the reviewer is not familiar they don't give much feedback."	"as the above QA indicate using code reviews to find bugs is a really hard target for me. You need to be much familiar with code and spend serious amount of time to effectively find bugs. The right place for it looks to me as unittests - btw reviewing unittests might also help people increase their unittests and design unittestable code.   primary aim from cr might be incerasing code quality, share knowledge and raise some awareness accross team. this would implicitly help decrease in bugs etc."	omsuner	omsuner
6503575	Development		12	10		7	Yes	"Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				When there is a major design change.	up to 25% of the time	up to 25% of the time	Yes	Just because I need to understand the layout and high-level design first and then jump into the actual implementation/design details vs. I am familiar with the layout already.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Primary stake holders - my immediate manager, my test counterpart and anyone else that works on the same project with me currently."	No				shobanak
6503576	Development		12	4		25	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When scenarios or algorithms are not commented well enough in code or when I'm curious about the changes and want to get a better understand of the scenarios driving the change.	More than 75% of the time	up to 25% of the time	Yes	"There's usually a ramp-up on the ""flow"" and implicit contracts in the code.  While you can use SAL to annotate a lot of this there are other things like:  1) When to throw exceptions, or if exceptions are even allowed. 2) What types of error codes are returned (HRESULTS, WIN32 Errors, or other). 3) General expectations of functions   3a) If side-effects are introduced, how are they handled.   3b) Is the code thread safe or are callers expected to handle thread safety.   3c) ... and many other expectations... "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"There's an email alias for all code reviews to be included as optional, and then required reviewers are domain experts."	Yes	"Usually, a familiar reviewer will understand the implicit contracts (see answer to question 13) in the code and ask more or less questions depending on how well those contracts are honored.  Reviewers unfamiliar with these contracts will usually ask irrelevant questions while missing the more important areas.  For the most part, familiar reviewers will ask deep insightful questions about the code and general operation / design and unfamiliar reviewers will focus on more shallow stylistic issues."		joward	joward
6503577	Development		25	20		8	Yes	"Generate better ideas, alternative approaches / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important"				When the complexity of the issue exceeds an email exchange. Also when I have a hunch about a possible solution that I want to work through with the developer (since they have the context fresh in mind). 	up to 25% of the time	up to 25% of the time	Yes	The answer seems obvious - it takes longer because I need to become familiar with the unfamiliar code before I can confidently review changes to it.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People who are either familiar with the code I'm changing, or are experienced enough in C++ to help make my submission better."	Yes	"In our source base, there are many pitfalls which are only known to people who have fallen into them before.  That is why it's important to get feedback from people familiar with the code.  People unfamiliar with the code generally offer feedback on the style of the changes made, not the context relative to surrounding code."	"I think code reviewers are less likely to read the comments of all reviewers in CodeView as they were when we just used email.  I think it is very important for all reviewers to at least read all the reviews, so that they can weigh in.  This should be represented more in the process of reviewing code. Also, I would very much like to be able to see all code review feedback given for a specific fix, or associated with a given line of code."	markhall	markhall
6503578	Test		7.5	6.5		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					More than 75% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				No			nsethu	nsethu
6503579	Test		8	8		30	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Cannot mutually agree on the issues, or the change list is too big to understand fully"	between 25% and 50% of the time	between 50% and 75% of the time	Yes	"More comfortable with reviewing changes, less time to understand changes"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Area ownership, project partner, or team code reviewer"	Yes	"Deeper understanding usually results in more correct, specific and detailed comments with better suggestions. But it also depends on the technical ability of the reviewer. People who are capable usually can review any code changes in lots of different areas."		yigao	yigao
6503580	Development		17	12		9	No	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Helping improving the development process in general / Third Most Important"				"To understand the reason behind a change, when it is not straight."	up to 25% of the time	between 25% and 50% of the time	Yes	"When I am not familiar with the code, I need understand both original code and the new change. Sometime, need review files which is not updated to understand whether there is anything missing."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Ownership of the area, and experience of people"	Yes	Owner can easily detect potential duplicate logic with other existing code.  Most people who is not very familiar with the code focus on the change itself.	"I hope the review tool can allow people to put additional comments to the change (and bind to the change).  Sometime, you want to comment on a change, but the comment is not worth to stay in the code.  Allowing people to change a reviewer between optional/required is also useful."		lifengl
6503581	Test		7.5	4.75		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				design questions	between 25% and 50% of the time	between 25% and 50% of the time	Yes	just to get an idea of what it is supposed to do and what it actually does	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People familiar with the work in progress or stake holders	Yes	comments are more spot on.		samartin	samartin
6503582	Development		5	5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"When I need a walkthrough of the entire change because it's too long, unfamiliar or complicated."	up to 25% of the time	between 50% and 75% of the time	Yes	"For new files, lack of DIFFs make reading more difficult. It's hard to figure out which parts of the file are important, and which parts are just boilerplate code.  For files that I'm not familiar with, I just have no context. I have to understand what the old code does first, then I have to read the new code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			- The owner or whoever understands that code best - Testers and other stakeholders who will be impacted by my change (as an FYI) - Whoever's around at 9pm on a Friday	Yes	"When the reviewer is very familiar with the area, the comments are usually more high level and about my overall solution, subtle bugs I overlooked or generated, etc.  When the reviewer isn't so familiar, they just have to trust that my code does solve the bug I'm claiming it will solve. Then the comments are more about style, readability, obvious technical errors (memory leaks/possible crashes), etc."		mineyalc	mineyalc
6503583	Development		5	5		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the code impacts a area very close to what I work on and I have not yet discussed the design beforehand with the coder (usually I would discuss prior to code review, not after the fact). If the code review is unusually large and I need more information. If a new technology or construct is used that I am unfamiliar with"	between 50% and 75% of the time	between 25% and 50% of the time	No	"If I'm not familiar with them, chances are I'm less invested in them as well, and someone else on the team has probably more context and knowledge."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			always team members + general alias	No			matthb	matthb
6503584	Development		11	5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Where it's a big change and I need a whiteboard explanation.  When the change spans many files or the tool doesnt do a good work of explaining why something is changing.	between 25% and 50% of the time	Never	Yes	It's harder to understand what a particular change does.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"feature owners, people that send code review faster"	Yes	the comments are more stylistic/build break related when they are not familiar with the files being changed.			shacorn
6503585	Development		13	13		20	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"When a detailed conversation is needed (previous history around this area of code, discussion of merits of alternative approaches, etc.)."	up to 25% of the time	up to 25% of the time	Yes	"For unfamiliar files I need to figure out how the surrounding code works before I can adequately review the changes to it - this takes time.  For familiar files I may need to refresh my memory, but I can probably do more in-depth analysis of the effect of the change.  So the time taken isn't drastically different, and familiar code will get a higher quality review, but it still takes longer for unfamiliar code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"A mix of those who have the most expertise in the area, those who are most affected by the change, and those who should learn the area for some reason."	Yes	"Reviewers who are more familiar with an area provide more concise and insightful feedback and have a more holistic view of what the change will do.  Those who are not as familiar tend to provide more surface-level suggestions (style issues, commenting, etc.)."		gregl	gregl
6503586	Test		6	5		9	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If the purpose of the change is not clear, or its not clear how the code will be used."	up to 25% of the time	More than 75% of the time	Yes	"In order to accurately review the code, you should understand who is using it, when it will be used, and how it will be used."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Process mandates the outter level organization be included in code reviews as optional participants.  Generally I include people that work in the same area, or are directly impacted by the changes."	Yes	"The comments are less about general programming practices or documentation and more about related scenarios, edge cases, and things to consider."	"Code flow doesn't have any way for the code author to notify reviews that he has responded to their comments. (except for a ping that will notify everybody, and comes off as a ""I need more participation"" kind of message, instead of a ""please review my comments"" message)  Also, Code flow does not have a way to leave a general comment.  For example, if there is a high level comment about the code, whether its questioning the change in general or praising the code changes, there is no way to say that except via email."	bkinsey	bkinsey
6503587	Development		15	6		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"If I found some big problems, have a better ideas which cannot explain in just a few lines of email, or something not understand very well, I will talk to the author directly."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	I need to spend more time to understand the context of the change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			The person who is the most or the 2nd most if I am the 1st one familiar to the code I am modifying.	Yes	"If the reviewer is very familiar to the code I was modifying, the comments/feedbacks will be more valuable. If the reviewer is the owner of the code, besides of the valuable comments, sometimes the feedback will also have something about code format."			
6503589	Development		7	7		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"- Making sure the other functionalities, which might be affected by the code change, are taken into account.  - Making sure code/design doesn't open holes in the functionality that are easy to regress in the future."			If the scope of the changes and the goal isn't clearly defined in the description of the changes.	up to 25% of the time	up to 25% of the time	Yes	"If I'm not familiar with the code I'm reviewing, then first I need to understand the existing code in order to assess the impact of the changes properly. So, it takes longer."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"We have a team alias that we include in all code review requests. But we always pick at least one person to expect feedback from, and this usually is based on level of expertise in the area or previous ownership."	Yes	"If the code reviewer isn't very familiar with the code, then there is more likelyhood of feedback in the form of questions. Some reviewers in that case tend to ask questions raising generic concerns without understanding the impact of those on the actual change. As a result, we spend time going back and forth answering questions that don't lead to code change and don't make the code better. Also, reviewers are more likely to miss potential issues related to the problem domain if they don't understand the problem domain fully."		minet	minet
6503590	Development		14	9		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				Unresolveable different opinions. 	up to 25% of the time	between 25% and 50% of the time	Yes	"For high quality code review I would like ""investigate"" the root cause and fix, as if I would have fixed the bug. Unfamiliar file definitely takes longer. "				Domain experts.	Yes	"Depth of the catch. The more familiar the better catch. For example more on design, rather than style, typo etc. "		yezhang	yezhang
6503591	Development		7	1.5		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When the change is entirely inappropriate (e.g. the author misunderstands architecture/patterns used in existing code)	up to 25% of the time	up to 25% of the time	Yes	It's harder to understand.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The ""usual suspects"" on the immediate team + specific area owner"	Yes	People tend to sign off blindly on the changes they are not familiar with.	Code reviewing tools tend to only show the change and its immediate context (i.t. the files where changes occurred). It would be helpful to be able to see broader context without having to open full-blown IDE.	alkaplan	alkaplan
6503592	Test		10	10		62	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important"				When full redesign is needed.	up to 25% of the time	up to 25% of the time	Yes	"Need to read more than the changes to a file, have to go through the whole workflow"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"stake owners, feature crew, code reviewers alias"	Yes	Gives context to why a change might cause issues			stcouch
6503593	Development		14	10		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"When intent is unclear, or when I need to suggest a large rewrite or redesign."	up to 25% of the time	up to 25% of the time	Yes	"I need to build context around the files, and sometimes reach out and look at files that I'm not familiar with that are not part of the code review submission."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"These are people that are familiar with the code, or that will be impacted by it."	Yes	"Higher quality comments, more issues found when reviewer is more familiar. Also different kind of comments, around design, missed updates, etc."		mruiz	mruiz
6503594	Development		22	19		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				I like to do this all the time. Having someone explain their change line-by-line brings up nearly all of the issues that can be found in code review. The throw-it-over-the-wall approach just isn't as thorough by its very nature.	More than 75% of the time	More than 75% of the time	Yes	I have to develop an understanding of the code that's being changed in order to give reasonably intelligent feedback.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Team policy. It's a static list.	Yes	"Insightful comments the first time around, instead of off-base comments that require explanation, then more insightful comments."		drewc	drewc
6503595	Development		10	2.25		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Whenever it's a tricky change and I want to save the time to submit comments and get the response. For instance, to understand the motivation for the change or the thought process. Oftentimes these are not captured in the code and I need to talk to the developer. Other times it's just to save time, specially if we're pressed for time to get the change in."	up to 25% of the time	between 25% and 50% of the time	Yes	"To do a good job, I need to understand the existing logic and the implications of that change. Doing that implies in reading more than the changes and thinking about the problem myself (and how I'd solve it)."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Based on whether they are experienced with that code review, how thorough they are doing the review, and how good team players they are (interested in making suggestions to improve the team and the code and not for other agendas)"	Yes	"Reviewers familiar with the code provide much more insightful comments at the high level solution and potential alternatives, besides the implications or any consequences."	"I'd suggest that code review tools allow us and encourage us to specify the reasoning for the CR, in order to save time for the code review.   It'd be good to have tools that could automatically indicate reviewers based on the changed files, and their experience with those files (either through previous CRs or checkins).  Also, it'd be great to be able to rate reviewers and know which reviewers are more popular than others in terms of being helpful, thorough, etc."	rdcastro	rdcastro
6503596	Test		3	1		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				Code that I am unfamiliar with. Legacy code.	up to 25% of the time	between 50% and 75% of the time	Yes	Lack of ctags/intellisense-like technology in codeflow can make it difficult to track what code is really doing sometimes.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			It's (unwritten) policy on our team to include the immediate dev/test teams for visibility. Stakeholders (owners or dev counterpart) are usually listed specifically.	No		"It's a great utility, thanks! Love the integration with git!"	shaunhe	shaunhe
6503597	Development		3	2		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When it's easier to talk in person than through comments in the CR. 	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Area owners, people who should be notified of the change, and general good reviewers. "	Yes				lisd
6503598	Development		12	4		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Third Most Important"				"Large code changes (100's of files). Compex code changes, new algorithms, etc... And usually to understand the high level design not available in the reviewed/modified code set and to question how/if the changes impact other related features."	up to 25% of the time	up to 25% of the time	Yes	The extra time is spent understanding the high level ideas/logic and again to understand how/if the changes impact other related features.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"In order of; code/feature owner, ranking team member (i.e. senior sde vs sde 2), locality."	Yes	Typically proportial to the amount of comments based on syntactic sugar!	"Somewhat obvious, but understanding the high level impact of low level code changes is difficult. Some sort of 'simple' map that displays code coupling/cohesion would be helpful and along the same lines a summary view of related historic changes (links to the changes lists related to the updates/modifications)!  Also I don't believe any of our code review tools provide any support/option for automatic static code analysis. Developers can be lazy/time poor/stack ranked; it would be an awesome feature to include an option to enable/request auto analysis (i.e. FXCOP, OACR, etc...)!!! "	mmarino	mmarino
6503599	Development		10	10		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 25% and 50% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"				Yes				mgrodin
6503600	Development		4	4		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important"				Changes where design is unclear.	up to 25% of the time	up to 25% of the time	Yes	"People tend to make similar changes when editing the same file - if I'm familiar with a file, I've probably reviewed a similar change in the past."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Team that owns the code.	Yes	Feedback is more precise.			
6503601	Development		30	6		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				1. If I find code that is not going to work and has potential impact on other external components. 2. If I have principal disagreement with the design/componentization	up to 25% of the time	Never	Yes	I try to understand the code as much as I can which takes more time when I look at unfamiliar code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			All developers in my team + testers who will be testing the code.	Yes	"Usualy the comments are more about the design and the functionality rather than style, conventions, etc."	"I notify that many teams have very heavy procedure for code review. Trying to standartize the coding style and conventions some teams crate rules about everything including the variable names, spaces, etc. which slows down dramatically the development process and do not contribute to the success of the product being developed. I think that this practice should change. There is no way to make standarts for everything in a creative area. "		
6503602	Test		16	16		36	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Misunderstand about review comments and that created more questions. Also, if the change was too big, it is helpful to talk in person to get highlevel summary."	up to 25% of the time	between 25% and 50% of the time	Yes	"If the change is using function outside of the current change list and I am not farmiliar, it will definately take more time. It would be time saving if CodeFlow can have links to related files."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			There is alias my team uses and code review request sent to the alias.	Yes	Previously asked questions or previousely implemented code are not asked again if reviewer is farmiliar with the code.		jypark	jypark
6503603	Development		25	4		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"Frequently it may be easier to personally request clarification on code review questions rather than work through multiple iterations of feedback/response -- either when I don't have full context on a change, or when I have significant feedback which may radically alter the author's approach."	up to 25% of the time	up to 25% of the time	Yes	"This is very much an ""it depends"" type of question.  Generally I try to understand as much as possible the context of the author's submission, even if I am unfamiliar with the code the component and the code being reviewed.  Sometimes I spend more time trying to make sure that I understand the changes being made.  Other times, I may limit the scope of my feedback to a more mechanical analysis of the code changes."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"In general, component ownership is clear within our dev org, down to the specific file level.  Usually the file owners + dev lead are minimally required, + at least one other person from each component touched in the cr, + at least one test owner.  Frequently, all team members of the associated component are optional, + other dev leads, architects, and PMs when it seems relevant."	Yes	"When a reviewer is familiar with the area being changed, the feedback is far more likely to be substantive."		jigramli	jigramli
6503604	Development		14	13		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				#NAME?	up to 25% of the time	Never	Yes	Need to develop an understanding of them.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Round robin selection from devs + an area owner from test + cc entire product team FYI.	Yes	They tend to be able to quickly align the changes with conventions that aren't visible to the outsider.	"There are three storage classes for comments:  - Persisted with the code - Persisted with the change (in the description) - Persisted/deleted with the code review  These storage classes are coupled to how the comments are viewed.  Code review comments are viewable only with the code review, which will expire eventually.  Change level commments are read at a summary level, and code level comments are only read in the code.  What we lack is a way to create and view comments at the code level that are stored at the change-level.  If I have to change a complex line because of a bug, I don't necessarily want the line of code to be commented with the bug number and details; however, if I am reading the description of the change, it would be helpful if the change description included annotation specific to that line of code, so that I can see the block of red and yellow along with an explanation of the change."		johndog
6503605	Development		30	22		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important"				"For many coding issues, like an obvious bug, or where there is code that is difficult to read or understand, there is no real complexity and I wouldn't need to talk directly to the author. However, for some more complex design choices, if I have an issue or perhaps a totally different approach, then often I will chat with the author briefly. In those cases, it may be the original code wasn't exactly ""wrong"", but may need some discussion to decide if it makes sense to change the direction. In other words, if I think some brainstorming is needed, then it is best to talk in person. "	up to 25% of the time	up to 25% of the time	Yes	"I want to verify that not only the code in question look correct in isolation, that it also seems to make sense in the context of the whole component. In that case, sometimes it takes some amount of mini-research to understand the general approach taken in the component.  Also, on occasion I will look for ""missed changes"", similar code that may need modification, or is an opportunity to combine or unify code. This takes longer if I'm not familiar with any of the pre-existing code."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Typically I choose a standard group of my team members, lead, and principal devs in my larger group.  I will add the following as needed: - if the code isn't owned by me, then the code owner - someone with specialized and significant knowledge of the code I am touching"	Yes	"Typically the owner of the code will have more advanced feedback, including a better overall approach to the code, rather than just style or comment requests."		neilsa	neilsa
6503606	Development		5	3		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When a lot of code is being checked in at once. (I will schedule for a meeting to explain basic functionality and discuss issues.)  Also when there are ideas on how to improve the algorithms or processes (the comment is not necesarily done for a certain line/chunk of code but for the overall design).	between 25% and 50% of the time	between 25% and 50% of the time	Yes	I like to understand the underlying design and functionality before signing off even on smaller changes.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I put in at least one senior and a few of my peers. Usually I get reviews from the senior co-owning the code.	Yes	The person familiar with the code will give in-depth feedback about the overall implications of the change.  		crispop	crispop
6503607	Development		14	14		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				An over-the-shoulder review is sometimes useful in situations where short back-and-forth comments are more time consuming. Usually for code that either has a lot of assumptions or has a complex interaction with other code. 	up to 25% of the time	between 50% and 75% of the time	Yes	It is important to try to understand how the new code will interact with existing code. That sometimes requires a bit more context. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			A mix of reveiwers with domain knowledge and those on the team who are available. Always CC'd to a large whole-team alias. 	Yes	More domain knowledge tends to produce more issues with how the new code functions with the product. Less domain knowledge tends to be more localized and focused on syntactic or code style. 		peteroak	peteroak
6503608	Development		30	17		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"If it isn't clear why they chose the approach they took, or if I think they are far off base from the right approach. "	up to 25% of the time	up to 25% of the time	Yes	"For files that I am familiar with, it is simpler to understand the implications of the changes. "	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Those on the team that are both available and familiar with the code that was changed. 	Yes	"They are much more insightful; more likely to point out improvements, and much more likely to find bugs. "		ericgu	ericgu
6503609	Test		17	5.5		11	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If the review require more than technical review. i.e. risk, cost, benefit analysis. If my comments are not understood clearly."	up to 25% of the time	between 50% and 75% of the time	Yes	usually there is enough description of the changes but not enough info about the context for this change. So I require more info than what can be written.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			1. original code owners or maintainer. 2. most familier people with the area of change. 3. People that need to know about the change details.	Yes	I get more questions as comments rather than recommended changes from un-familiar reviewers.	Can it be integrated with Lync to improve this developement process?	tameraf	tameraf
6503610	Development		17	7.5		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	Use as references for similar changes in future			"When I don't understand the logic, or have a ""Why are we doing this?"" the answer to which may be historical, I prefer to talk f2f. "	up to 25% of the time	up to 25% of the time	Yes	"Because it is new, untested code and therefore requires more careful perusal."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I usually send it out to the whole sprint team, including dev, test and PM. "	Yes	"The comments usually go beyond cosmetic changes, into the details of the logic etc. I usually find this kind of review more useful. "		tprabhu	tprabhu
6503611	Development		10	7		5	No	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				if the changelist description does not describe the reason for making that change.  if I am working on the same code and want to plan to avoid having to resolve conflicts later	up to 25% of the time	up to 25% of the time	Yes	That seems obvious. It's faster to read through code you already know and even faster to understand a change to code you already know.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"depends on the teams. Some teams you need to know from experience who is going to provide you the best review coverage based on their expertises. Other teams have very formal file ownership, with name to file mapping stored in a database, and they provide tools to submit code reviews on your behalf, automatically generating the file owner's list for your code review."	Yes	"Better feedback comes from folks that are very familiar with the code they are reviewing. Otherwise feedback tends to be pretty boring such as ""the name for this function is not great"" or ""incorrect tabulation here""."			redmond\milest
6503612	Development		35	4.5		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"rarely, but if the change is extensive, or difficult to understand, I'll talk directly and walk through the changes side by side. "	up to 25% of the time	up to 25% of the time	Yes	I have to take time to understand what the code is doing before I can decide if the change is ok.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"typically always send to my team, also may include others depending on original author - I review and submit reviews to both my team and another.  Occassionaly, a very distributed change may get sent to our entire (35 dev) team, but that's rare (once this year)."	Yes	"feedback on oversights or actual bugs in the change typically (not always) come from code owners, not general reviewers."		hughhoov	hughhoov
6503615	Test		5	5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Helping improving the development process in general / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"when disagree with the code change, talking in person is easier to reach the agreement and explain self."	between 25% and 50% of the time	up to 25% of the time	Yes	Need to understand the code before giving valuable comments	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			people who has the knowledge on the codes I changed	No	"normally owner knows the file very well, so no difference"			caixiaw
6503616	Development		10	10		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When the purpose of the code (not just what it does) isn't clear.  Often this is when a bug is being fixed by what appears to be an unrelated change or when there is an unclear design requirement being met.	up to 25% of the time	between 25% and 50% of the time	Yes	It can take a lot of time trying to understand the context in which the code is called and what the known limitations are.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Our team requires sending the review out to the entire team, and you can only submit once you have at least had one Senior developer and one other developer sign-off."	Yes	Reviewers unfamiliar with the code tend to send only coding style and readability improvements.  Reviewers familiar with the code tend to recognize similar patterns elsewhere in the code and how similar concepts can be reduced into one.		ahare	ahare
6503618	Test		12	2.5		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Helping improving the development process in general / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"				No				
6503619	Development		8	1.5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"In general I do talk in person to the author if I didn't like code, i.e. it is not readable, I see that it will create bugs in the future, or it was wrong pattern used in that case. In case there is minor issues I accept it with comments. If I see that there is a bug I decline it."	up to 25% of the time	up to 25% of the time	Yes	It takes some time to understand the purpose of the code. If I'm not familiar with that code I need to understand what was the requirements and limitations before decide if the solution was good or not. Sometimes it is difficult to understand from the list of modified files. You need to have context before doing code review.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"1. I choose person who goes through the code line by line, understanding intent and solutions. It is most important for me.  2. I prefer person who knows that code / familiar with that area / knows conext. 3. I give the lowest priority to the person who checks general code syntax only or simple edge case scenarios."	Yes	In average persons who have complete understanding of the code are giving realy good suggestions or better ideas more often than others. + they can tell you if you are running in potential problem in the future since there is a hidden problem.		ankuroch	ankuroch
6503621	Other	Program Manager	7	5		2	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance"				"Very rarely, but as a Program Manager, I might have questions on to why the code is not exactly doing what it was spec'd before, and that's when a contact is needed."	up to 25% of the time	up to 25% of the time	Yes	"Program Management is usually removed from the code, so it does take longer for me to code review new files or things I am not familiar with"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I rarely send code reviews	Yes			cleberm	cleberm
6503622	Development		0.5	0.5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"	Learn from more experienced developers to see how they code. 			If I need to ask a more detailed conversation or have concerns but need clarification from the review owner first.	up to 25% of the time	up to 25% of the time	Yes	Not familiar with the code so cannot comment on changes until I understand the context and why certain changes were made.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I select people based on if the code changed is relevant to their work (ie they are working on the same project etc.) Also add other teams to code reviews if they are consuming our service or if there are breaking changes to make them aware of it.  I also try to include someone who has good knowledge and understanding of the type of code I am working on. Example if i am doing some javascript try to include people who are experienced with javascript / web stuff.	Yes	They can point to other areas I may have missed that could be affected by this code. They also can provide more valuable comments on functional stuff not just code style.		farizvi	farizvi
6503624	Test		11	8.5		31	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important"				"When they're deviating from the (currently informal) code standards to a sufficient degree that it's going to take significant time for them to clean up. Case in point: one new grad insists on double-spacing, which is just awful.  or, hah, when their changes could be messing up my owned areas."	between 50% and 75% of the time	Never	Yes	completely new files require me to look over the entire thing for stupid mistakes. SDETs who fiddle around with small details like magic numbers for control IDs or timing games with automation.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"policy and social currency, for the most part. Rarely I'll get lucky and will be able to get someone familiar with the area to review changes. "	Yes	"minimal usually, if they're familiar with it, since they don't have to have the changes explained to them"	"currently I can't use the same entry point to create a review as to check on it's progress - I either launch CodeFlow locally or go to my dashboard. This is annoying, one entry point would be better. "		
6503625	Test		4	2		30	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If the code under review is particularly bad	between 50% and 75% of the time	up to 25% of the time	Yes	You need to understand the whole system to give good feedback	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Alias from the team	Yes	More knowledgable about possible other ways to do things		omusavi	omusavi
6503626	Development		8	7		25	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"Cases where CR comments or email are not sufficient: 1) Anything that constitutes restarting the change from scratch. Often this is because of design, but occasionally is due to widespread implementation or style issues. 2) Communication that is not for broader consumption. 3) Need to understand the rationale behind the change and anticipate that the description will be involved."	up to 25% of the time	up to 25% of the time	Yes	Typically new files and changes to unfamiliar files have broader design implications than changes within an existing file (even if those changes are sized appropriately).	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			* Nominated owners (dev/test owners) * People who I know are interested in the change * People with prior subject matter expertise	Yes	"Greater confidence in comments -- fewer hedged comments (e.g., ""I could be wrong in interpreting this, but..."") "	"Build breaks are only a concern for me in that when I see a potential build break in a changelist, it indicates that the submitter probably has not actually tried out what they are proposing."	dandris	dandris
6503627	Development		12.5	11.5		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"At times, when I find the fix too complex to understand or when there are multiple ways to solve something, and I am curious about why a particular option was chosen."	up to 25% of the time	up to 25% of the time	Yes	"It takes longer, because I don't have context. Sometimes it is technology/feature specific, other times there maybe a history of why certain things are (workarounds for bugs in dependent code etc..)"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"We have a distribution list with the entire dev team (and whoever else is interested). The culture on my team is ""the more eyes the better"""	Yes	Someone who is more familiar provides very specific feedback/comments.  Less familiar people will provide more high level feedback.. code duplication/styling/coding guidelines etc....			murtuzab
6503628	Test		7	1		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"if the files are new, and new logic has been written"	up to 25% of the time	between 25% and 50% of the time	Yes		"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding"			typing their alias	Yes				ravk
6503629	Development		27	19		18	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				If the scope of the review change is larger than can be discussed inside codeFlow or in email.	up to 25% of the time	Never	Yes	Hard to get context from inside codeFlow. There is limited way of exploring the code surrounding the change to ensure it's safe.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Those with the most knowledge of the area being modified. Those with knowledge that are impacted with changes. Those with deep understanding for highly technical changes.	Yes	"More knowledgable reviewer produces more global and deeper feedback. Less knowledgable reviewer tends to focus on local changes (syntax, comments, etc)."	"CodeFlow is wonderful, but it has limitations. It doesn't integrate with VS, so there is no browing ability with it. There is a way to install/test the changes but it's out-of-box. There is no way to specify review check-in requirements (ensure someone does the review, feedback conflict resolution, etc); it's all done by convention. It's hard to gell of the changes could affect you or not."	orestz	orestz
6503630	Development		7	5.5		6	Yes	Avoiding build breaks / Third Most Important;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important				"When there  is too much back and forth on 'mustfix wontfix' situations. that is, I feel something needs to be fixed and the author doesn't think so. Or when I feel a comment is not understood."	up to 25% of the time	up to 25% of the time	Yes	"Yes, because it takes longer to validate the new change and see if its the right thing to do."	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Code owners, anybody involved in discussion of the change. Sometimes test as an FYI if they express interest to know the code. Manager, mostly so he is aware of progress of the checkin"	Yes	There are more pertinent and deep. Are not generally about coding practices but abt the component's design and behavior itself.	"I don't know what your research is about, so not sure what I can add that will be helpful to you"		vponnuru
6503631	Test		1	1		4	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				If the design is confusing or not clear.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"When I am less familiar with the code, I try to understand the logic before consulting the author of the review."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"I send to my team, the feature crew, and any other teams that may be impacted."	Yes	The feedback is more precise and detailed.			chmiceli
6503632	Development		5.5	4.5		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance"				"When I don't understand the area that well, or the reason for the change."	between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Ownership of code, experts in area"	Yes				jpozas
6503633	Development		18	9		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Not enough context for changes	between 25% and 50% of the time	between 50% and 75% of the time	Yes	"Ramping up on unfamiliar code, unchanged code not included in code review makes it difficult to bounce back and forth to understand code"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"manager, peers if they are more familiar with code and have dependencies on code, testers assigned to feature"	Yes	"Feedback tends to be of better quality, generating alternate ideas or better approaches instead of symantic kind of feedback"		mmills	mmills
6503634	Development		6	4		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				design defect or something hard to descript in text.	up to 25% of the time	up to 25% of the time	Yes	"It is because I need more time to understand the code and the design. And when the files are new added, usually it has a bunch of new code need to read and review, which takes longer time."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have a code review responsibility list within our team. I will send the code review to the corresponding peers and cc my dev lead.It'd be better if code flow could remember the code reviewers I used. Or put them in a group I can easily select.	No		"Codeflow will send out an email when we add comments, can we also include the code snippet in the email, that will help us quickly understand the feedback without opening the code flow. Sometimes, it could be very convinient time-saving feature. -lynning"	lynning	lynning
6503635	Test		13	1		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important"				Design and rationale and differences in philosophy	Never	between 25% and 50% of the time	Yes	It typically is a different area than what i used to own. Hence I need to know the rationale etc in order to clarify conventions and philosophy	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding"			Corresponding Dev / Test and Feature owners and peers	No			srvisvan	srvisvan
6503636	Development		5	5		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important"				1. When I don't understand the design or implementation of the code. 2. when I have concern about the design or implementation of the code. 3. When the coding style or the code quality is far from acceptable.	up to 25% of the time	up to 25% of the time	Yes	I want to make sure that I understand the change the other person is making and ensure the design and implementation is correct to my best judegement.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			The person who owns the code that i am modifying or familiar with the code.	Yes	The feedback can be more helpful which can points out better design or implementation.			luchen
6503637	Development		2	2		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Helping improving the development process in general / Third Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes	"Because I need to first figure out context of changes with respect to code already in the file, rather than just focus on the delta of changes"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			We have assigned buddies for each feature in our team. Usually they are a required reviewer.	Yes	More likely to find code defects other than stylistic comments		harpres	harpres
6503638	Development		4	4		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Code is not straight forward.		up to 25% of the time	Yes	Have to take some time to familiarize with the code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Team alias, and owners of the code."	No				
6503639	Development		0.5	0.5		36	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				If it is not clear why they are making the change or if you can't tell what the overall purpose of the change is.	between 50% and 75% of the time	up to 25% of the time	Yes	You don't have a general idea of what the code is trying to do so you have to understand the purpose of the code & where it fits in before you can evaluate the changes being made.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			My immediate group as well as experts in the field/area on the team.	No			brfratel	brfratel
6503640	Development		18	4		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					between 50% and 75% of the time	up to 25% of the time	Yes	Unknown area takes more time to understand all impacts of code change.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I'm always sending code for review to people who can be impacted with my changes; ""best practices"" people in team;"	Yes	Owners/familiar people usually give more meaningful feedback.		vremizov	vremizov
6503641	Test		19	19		15	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				"Pretty rarely, but it's usually when a more involved discussion needs to happen about test/code design, especially if that discussion would benefit from third party input."	up to 25% of the time	up to 25% of the time	Yes	"New files take longest because then I'm often reviewing for overall design and not just changes being made to fix a bug in existing code.  In order to evaluate whether a fix is correct in existing code that I'm unfamiliar with, I have to skim the code to get the bigger picture before I'm sure that the change is correct."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The person who is most familiar with the code OR The person who is most likely to give me useful feedback for improving my code OR If under time pressure, the person who can review it right away "	Yes	"Usually when I'm changing something that the reviewer is familiar with or the owner of, it's because I'm doing them a favor by fixing a test script bug.  In those cases, I hardly get feedback at all, just an approval.  For new code that I write, or if the reviewer is unfamiliar with the code, they tend to look at it more carefully and provide better feedback about design or improvements that could be made.  "		reneemi	reneemi
6503642	Development		12	2		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1) If there are a multitude of issues or a fundamental flaw in the work that was performed. 2) Missing files in the review 3)The reason behind an implementation is unclear	up to 25% of the time	up to 25% of the time	Yes	Typically due to having to work through how the various parts of what is being reviewed interact with components that aren't part of the review.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Typically, I send a review out to members of our team (at least one other person on the team needs to review it). If the item is something where it interacts with another team's component, I send the review to the appropriate member of the other team. Finally, in cases where some expertise is needed and not available on my team, I send the review to someone from the larger organization."	Yes	"More obscure issues and corner cases are often brought up by individuals more familiar with the code. Similarly, I do a lot of SQL work, which not a lot of members of my team are familiar with - those familiar with how SQL works will often suggest alternate ways of performing the tasks, while those less familiar tend not to, relying on my knowledge to be doing the right thing."			grpratt
6503643	Development		18	12		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If the comments on the code review will be big then I prefer talk in person to the author. Also if I have many questions (doesn't have to be comments or request to code change).	up to 25% of the time	up to 25% of the time	Yes	Need to understand how the change fit in the existing code which require understanding the code before and after the change	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I consider the owners of the area, then people familiar with the area and then other people familiar with the technology that the code written with (like writing COM code I'll get people familiar with COM even if there are not familiar with the area I am changing)"	Yes	owners and people familiar with the area I am changing usually knows the history and reasons why the code written that way in addition why we decided for specific design. so their comments and feedback be more valuable compared to people not familiar with the area.	From my experience the tool used in code reviews make a lot of difference in the code review efficiency and the results we get from the code review. I have used code flow and Chex (in addition to manual packing scripts like sdpack or bbpack). I would say when using more efficient tool make the code review more smoother and efficient. personally I liked code flow (even if there is some things can be improved there too)	tarekms	tarekms
6503644	Other	Program management	20	8.5		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Helping improving the development process in general / First Most Important"				"I'm a PM without a strong engineering background so my need to discuss reviews is probably higher than average.  However, I also limit my reviews to things I can reasonably figure out.  I often ask to validate the code works in the way I've interpreted it to (since I can't always tell by myself simply by reviewing the code.)"	between 25% and 50% of the time	up to 25% of the time	No	"Since I lack real development skills my ability to review code I'm unfamiliar with is more limited than code I am familiar with.  Conversely, I am able to do a more thorough job with code I'm familiar with which is why it tends to take me longer.  If I can't reasonably interpret code or have little idea how it works I don't spend as much time trying to review it."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We typically include our entire team on every review.  We selectively include team members when we know it encompasses code they're most familiar with or may have had some part in developing (perhaps part of design discussions.)	No			rlongden	rlongden
6503645	Test		16	15		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Rarely - only if I do not understand what / why they are doing something OR if I want to give feedback that should be given privatly.	between 25% and 50% of the time	up to 25% of the time	Yes	Longer to read / understand 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Owners / Teams of the code / topologies	Yes	"Generally better comments, more focus on the code or  less general or on style "		shanefe	Shanefe
6503646	Development		14	14		40	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					up to 25% of the time	up to 25% of the time	Yes	You dont just look at the code changes but overall code to understand things better.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				manishg
6503647	Test		5	5		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When their approach is radically different from what I'd like	up to 25% of the time	up to 25% of the time	Yes	Code that I know well it's easy to restore context and I can faster see how the changes fit into that context	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"The team, always"	No				kirillo
6503648	Development		6	6		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If there are lots of changes or the changes look very strange and no enough comments, I will try to talk in person to the author."	between 50% and 75% of the time	up to 25% of the time	No	I don't want to spend time on the files I'm not familiar with. I'd like to leave them to the owners to review.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code original owner, test owner, dev lead, dev I trusted."	Yes	The owner almost gives the most valuable/important commetns.	"Easy to use is very important to speed up the code review process and improve the productivity. If we need a server to do code review, we need consider the access speed and the stability. For example, persons in China to access codeflow server is much slower than the persons in Redmond."	yuboxie	yuboxie
6503649	Development		15	12		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"	Learn others' code			Don't agree with the implementation.	up to 25% of the time	Never	Yes	Need to understand the logic of the implementation	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Peer devs, and dev who knows well about the area, and test owners"	Yes	The comments will focus more on the logic instead of the styles.	If would be great that code flow has a view of the code reviews that his/her reports have done.		
6503650	Development		11	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				if i don't get it	up to 25% of the time	Never	Yes	because it takes time to figure it out	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			based on code ownership	Yes	More detailed		nikozhek	nikozhek
6503651	Development		16	7		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the changes are large or complex enough that just looking at the code and putting the pieces together in my head would take too much time.	up to 25% of the time	up to 25% of the time	Yes	"Unless the change is trivial, need to understand how the changed code ties into other features/components.  Could range from quickly thinking it through to needing to look through code and understand it."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I include any people that I discussed the change with, owner(s) of the code being changed, all members of my feature crew, and cc: the entire team."	Yes	I trust them more. :)		erikd	erikd
6503652	Development		40	17		30	Yes	"Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"1. When further context is needed, typically because I need to understand how unchanged code works in order to understand the changes under review.  (""Unchanged code"" = anything the changed code depends on.) 2. When a suggestion or question is too complex to express in a sentence or two of text."	up to 25% of the time	between 25% and 50% of the time	Yes	"Usually it takes time to understand what's going on, including the assumptions made by the unfamiliar code, and its interaction with other code that is more familiar."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"It's usually pretty obvious: 1. Owner of the affected code 2. Backup to the owner (especially when I'm the owner) 3. Owners of components affected by the change (when the change involves interaction between components) 4. (As appropriate) Champions of tenets - security, accessibility, performance, globalization, etc."	Yes	"Reviewers who are familiar with the code are more likely to find ""invisible"" issues:   other pieces of code that need the same kind of change, wheel re-invention, unexpected consequences of the change, etc."	"I'm puzzled by your mention of build breaks.   Humans are very bad at seeing build breaks - compilers are very good at it.   The right way to find build breaks is to build your code (before checking it in);  don't waste a human's time.  BTW, I lied on question 5.  There's only 1 dev on my team now, but there used to be ~100.   I'm answering your survey with the mindset I had when the team was larger, so I answered (5) with a comprimise number."	sambent	sambent
6503653	Development		15	4		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					between 25% and 50% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503654	Test		14	7		12	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Helping improving the development process in general / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Very obviously descranbency that need to further clarification	up to 25% of the time	between 25% and 50% of the time	Yes	Need to understand overall design concept of this code change	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Immediately team members and lead, related/affected persons/groups"	No			elioth	elioth
6503655	Development		6	2		3	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				In a few different situations:  - too many comments in the thread sometimes require face to face communication to get clarification - when it's not obvios why things were changed/updated - at times it is easire to talk to the review author rather than publishing multiple iterations.	up to 25% of the time	up to 25% of the time	No		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Mostly based on the folks who have worked previously on that file and the immediate team members.	Yes	People familir with the code are able to identify product and business logic specifc bugs whereas non-owners comment on best practices and potential problem areas.		sachaud	sachaud
6503657	Development		18	6		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"When there is a gap between the code intent, usually expressed in the review description, and the actual implementation."	up to 25% of the time	between 25% and 50% of the time	Yes	"Familiarity with the code helps to identify more subtle bugs, whereas unfamiliar code requires balancing the attention to design, coding style, and potential bugs."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			As a team we set an alias for code reviews.	Yes	Reviewers with familiarity with the code are usually more precise and deep in their comments/feedbacks	Code reviews are usually better when the tools are fully integrated with the development environment (for example Visual Studio). Keeping track of comments is also very important. CodeFlow is excellent on that side.	piegreb	piegreb
6503659	Development		15	12		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When the design approach and/or architecture needs to be clarified, explained or I disagree."	up to 25% of the time	up to 25% of the time	Yes	Effective review takes longer for things you are not familiar with	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People who have context or those who I want to give context to	Yes	"comments are more to the point, go beyond ""space before a line "" kind of comment."		gzunino	gzunino
6503660	Test		9	7.5		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"	Robust and reusable code			"When the information in the code review sent is not sufficient to help doing the code review of the changes effectively. Also, sometimes it is possible that the changes made is not clear or there is an area that is missed while coding, it is helpful to talk in person."	between 25% and 50% of the time	between 25% and 50% of the time	Yes	The answer is neither yes or no. It depends on how big is the code change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding"			"I send the CR to the whole test team as an optional reviewers so that anyone can pickup the changes and review. In the required line, I select based on the knowledge a person has in the area I am sending the change for."	Yes	"Again, that depends on how big is the change."	It will be great that the code review process is streamedline with the build and execution of tests.	vtaneja	vtaneja
6503662	Development		16	8.5		15	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If changes required are differences in design/concepts/philosophy; if the changes being suggested are cryptic.	up to 25% of the time	between 50% and 75% of the time	Yes	"For completely new features or changes to features that I am not familiar with, code reviews mainly serve the purpose of adhering to style and any obvious changes.  But if, as a reviewer you are accountable for a broad set of features, you may have to dig deep and understand the structure/design before the code review cn be really effective - in some cases it may require a face-face discussion for the author to describe the basic framework of his implementation before the code is actually reviewed - happens mostly for new features.  For code reviews that as a reviewer you dont collectively own or accountable for, it may not take very long - though the purpose/goal of such a code review is different."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Collective owners, architects who may be accountable for the broader design, immediate manager for information and PMs to keep track of status."	Yes	"Code reviewers that are unfamiliar with feature area / code base generally comment on style, coding practices, obvious bugs, etc., where as reviewers who understand the feature area and/or own the code collectively comment about design, better approaches or in general validate that the assumptions made in code are appropriate."			girinag
6503664	Development		5	3		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				big code view request. or if it's area that I'm not familiar with.	up to 25% of the time	between 50% and 75% of the time	Yes	have to understand what the code is doing and why the author is making that change	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			team members and/or area owners	Yes	"if the reviewer is not familiar with the code, the comment is mostly around formatting, comments, general stuff which is not very useful."			zhenzhao
6503666	Test		4	4		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When there is a fundamental misunderstanding of the problem they are trying to solve, or the error in their code is too complex to attempt to explain in any other way than in person."	up to 25% of the time	up to 25% of the time	Yes	"Because I usually don't understand what is trying to be accomplished in the new files, or I  am not familiar with the details of their implementation.  "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I send it to those who either currently understand what I am working on, or those who will need to understand it.  "	Yes	"The owner of the files has better insight into the changes, and will usually provide more technical feedback, while those who are not familiar with the files will usually provide feedback more focused on general coding practices."			grhenry
6503667	Build		10	10		8	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Usually only need to talk to the author when a big bug is found, or if a different/better approach is found that requires a detailed discussion."	up to 25% of the time	up to 25% of the time	Yes	"More time is spent inspecting the whole block of code, rather than the few lines that have changed."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Always send it to the team, and specifically callout people knowledge able on the specific feature or component."	Yes	Very pecific feedback is provided on why something won't work or could be improved.			jecahill
6503668	Development		18	15		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1) If the yellow/red colouring of tools like windiff and CodeFlow make it tedious to understand what has changed (like if code is moved around files). 2) If I fundamentally disagree with the change. Having a talk in person is often more effective than a short comment. 	up to 25% of the time	up to 25% of the time	Yes	"Assuming that the change is not trivial, it requires getting familiar with what the existing code did before understanding what the changes are about. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I choose people most familiar with the code and the people that I believe will most likely make changes to this code in the future.	Yes	Newcomers to the code will have a tendency to suggest major refactoring of the code to fits the way they would have written it in the first place. People familiar with the code will concentrate on the functional aspect of the change.	"I have been questioning the value of code reviews for the last few years.  It is not that I believe they are useless, but they seem to take more and more effort with less and less value as we develop better tools that automate many of the old reasons for code reviews.  We have systems that detects build breaks and test failures before checking in. We have tools that analyze code for common mistakes. They have removed some of the motivations for code reviews.  The majority of comments these days center around ""style"" and ""readability"". These quickly and often escalate into religious wars. I have learned many years ago not to get emotionally attached to the code I write at work. Too many people will criticize/modify it. Just imagine if Picasso had his paintings reviewed on a daily basis (hey, that girl's eyes aren't straight!). As much as we want to call it software ""engineering"", it still feels like art to most of us.  I mostly consider code review comments to be just that, comments. I feel free to ignore any comment I don't deem useful. On the flip side, I'll often apply simple changes just to avoid getting into an argument. So if there's 2 ways of writing one line of code, the winning way will be the preferred way of whoever had a few minutes to spare to do my code review that day.  I could rant all day about this, but I should probably stop here. "	ptousig	
6503669	Development		6	6		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When there is a disagreement that needs to be discussed or when an explanation for a comment needs more background information.	up to 25% of the time	between 25% and 50% of the time	Yes	"When it's my code under review, I immediately know the impact of the changes so the review can be quick.  However, if it's someone else's code under review, I might not fully understand the design or the assumptions that are being baked into the code, so the review takes longer so that I can learn these things."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Area of ownership and/or expertise	Yes	"If the reviewer is familiar with the code, they tend to give more in-depth feedback.  If the reviewer is not familiar with the code, the feedback tends to include just simple things (style, null-checks, etc) or high-level observations (complexity, manageability, etc) - i.e. not as much in-depth feedback about the function of the code."	"I wasn't really familiar with the idea of ""collective code ownership"" so it was difficult for me to answer those questions.  We don't have any such concept in our team (which is fairly large).  Also, we have an ""immediate"" team (i.e. all reporting to the same lead) of about 8 developers, but the full feature team consists of over 20 developers.  All code reviews go to the full feature team. This survey asked only for ""immediate"" team but I'm wondering if that wasn't really the intention (or if I'm misinterpreting what ""immediate"" means)."	cgillum	cgillum
6503670	Development		12	7.5		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				never	up to 25% of the time	up to 25% of the time	Yes	because they are unfamiliar -- history and provenance of code is unknown	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			people on immediate team who are most impacted by a change	No		"required v. ""optional"" reviewer is wierd  - sometimes I want neither option. using an alias as a reviewer is an interesting scenario. tying comments to iterations would be helpful. a better web client for doing CodeFlow reviews would be helpful. "	olofh	olofh
6503671	Development		3.3	3.3		35	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When the amount of changes is too extensive to comprehend without context. Need to get an idea of the overall ""architecture"" of the change to start understanding the pieces."	up to 25% of the time	up to 25% of the time	Yes	New files are the hardest. There is no previous context for the functionality introduced by the change. I must understand much of the code in the class in pieces to start understanding how it pieces together.  Changes in unfamiliar areas take less time because (as long as the change isn't huge in scope) the motivation for the change through the system is clearer to see and understand. It's easier to understand a change in a small bit of behavior than entirely new subsystems.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Based on familiarity with the feature, vested interest in my change (e.g. could be management or could be consumer of my code), general knowledgeability/technical ability"	Yes	Reviewer who is very familiar is more likely to give alternative approaches and suggest improvements. Also more likely to caught design bugs or false assumptions. 		saban	saban
6503673	Development		15	6		8	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"1. something hard to explain in a few words 2. unclear about the design, purpose, motivation of the change. "	up to 25% of the time	between 25% and 50% of the time	Yes	I need to understand the bigger picture of the change. Normally that will take some more time. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"we have a smaller team, normally all the team is added to the reviewers as optional. The required reviewers are normally the area owner and team lead. "	Yes	"well if someone is not familar with the code, the comments tend to be more about format, comments and questions. If someone is familiar, we normally can get deeper comments such as pitfalls, missing conditions etc. "			
6503674	Development		18	4		12	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If typing would be too long or if comments go back and forth.	up to 25% of the time	up to 25% of the time	Yes	"Need to understand the old code first, before I can judge the diff."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"To: Domain expert, CC: whole team"	Yes	Better depth of feedback from people who are familiar.	All tools available are not really supporting a discussion about the changes.		rbeckers
6503675	Test		12	10		70	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	code quality in general			when the code review goes long and it feels like person does not understand comments	Never	Never	Yes	just to figure out the overall flow of the code. 	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			we send to a shared alias or the person who owns the feature set	Yes	they are more direct and informative			
6503676	Development		30	14.9		20	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"showing people how to perform useful code reviews. trying to get people to do a better job (at coding, and reviewing)"			rarely.  when they don't listen.   but then I mostly just talk to their manager. 	up to 25% of the time	up to 25% of the time	Yes	When I code review something I tend to make a detailed review. I normally only code review something I figure needs attention and try to get others to be paying attention.  (and to stop nit picking stupid stuff)	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I select the people whom are suppose to be the experts in that code, or whom I believe are knowledgeable in that area.   Additionally, effected / impacted / interested people are included.   And we have a policy to include a team wide code-review alias."	No	"The answer above is ""mostly or unfortunately no"".   The code review feedback, in general, is crap.   It's mostly noise about ""you can skin the cat this way"", or ""that way"", or ...   Even the talented people are infected by this disease from the people whom don't know better but think they have a lot to say.     The real, appropriate, and good feedback is rare.  Too rare.  "	"Research how to make people better reviewers.   The tool is great.  I would like it if it could: - highlight the proper spots as revisions are made. - could optionally escape out to a custom diff tool.  I'm normally fine with it, but occasionally I like to pull something out into beyond compare 3. - cross branch support "		
6503677	Development		12	10		12	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Helping improving the development process in general / Second Most Important"					up to 25% of the time	between 50% and 75% of the time	Yes						Yes				
6503678	Development		6	2		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"				When the time is limited.	between 25% and 50% of the time	up to 25% of the time	Yes	Need more time to understand code and context.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Generate better ideas, alternative approaches / Little understanding"			The team has rule for this.	No				
6503680	Development		2	2		8	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Helping improving the development process in general / Third Most Important"				If I don't understand why the chosen implementation is the best option.	More than 75% of the time	between 25% and 50% of the time	Yes	I have to spend more time trying to understand the code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Those who have a some knowledge and those it affects.	Yes	More insight with someone who knows the code.			pascalca
6503681	Test		2	2		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When there is a potential issue that is sufficiently complicated that it requires a back and forth discussion.	up to 25% of the time	up to 25% of the time	Yes	Lack of familiarity with the files themselves means reading things that aren't being changed to understand what is being changed	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Other feature team members of the same discipline, most importantly those sharing the code base."	Yes	Typically it means I would get more than just style comments.  Actual changes that would remove defects and generate better approaches.			asoule
6503683	Development		6.8	6.8		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Helping improving the development process in general				up to 25% of the time	up to 25% of the time	Yes	"I go back and forth understanding the functions called or the caller. For files known, I usually would know what the change should be."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"People who have done similar changes, are familar with code base or whose changes would be impacted by mine."	Yes	I will receive super deep feedback from people who know the code.		ankurg	ankurg
6503684	Development		12	3.5		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important"				If changes are unclear or a big example required to copy/paste.	up to 25% of the time	between 25% and 50% of the time	Yes	Depends. If logic is brand new - it may worth review it from different aspects. If files are new but written by some other template or example - it doesn't take much longer.				By feature ownership and to notify people who may depend on the changes	No		Question 14 is unclear 		nivoronk
6503685	Development		10	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important"				Mostly when some whiteboarding is required to explain the change	up to 25% of the time	between 25% and 50% of the time	No		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503686	Development		20	1.75		24	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When the submitted code shows a lack of understanding of how to use some other software component; for example, when the author does not correctly use graphics code (or has inefficient code).  When the problem to be solved has a simpler (or better solution)."	More than 75% of the time	up to 25% of the time	Yes	"Yes, when the files are new and in my area of expertise.  If files are not in my area of expertise, whether new file or modified file, I will typically not participate in the review (when ""optional"", declining if ""required"")."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I select members in my ""area"" (sub-team) to review changes made in my area.  When making general changes to areas not mine, I send an invite to the entire team (as optional reviewers)."	Yes	"Typically, the reviewer will point out deeper information than I have, in many cases sucessfully defending his stance that his code changes are correct."			
6503687	Development		10	3.75		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the feedback requires too much involved changes and using the whiteboard to explain it is easier. I still add a comment in the code review in any case.	up to 25% of the time	between 25% and 50% of the time	Yes	"Because I try to understand how things work, navigate the code, sometime have to open something not contained in the list of changes/added files. If codeflow had a feature that allowed me to navigate the code easily (like visual studio has), that would be very helpful. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			people from feature crew and/or people that worked with that code before.	Yes	they are structural/logical changes that only folks who understand the logic behind could give.	"my alias: edbillo  - Integration with visual studio (not sure if it's feasible at all, but it would be very helpful). - Ability to fix files in code source environment (as opposed to fixing them outside and having code flow pick up the changes)."	edbillo	edbillo
6503688	Development		5	5		15	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				when i want to show someone how to make something work differently. 	Never	Never	Yes					WE have an alias that includes our immediate team. 	Yes	people who are less familiar with code tend to leave more superficial feedback.	"it would be nice if I could edit code in code flow. If not as a reviewer, it would be nice if I could do this as the review owner."	aconcord	aconcord
6503689	Development		14	10		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Educate team in coding practices. Increase awareness of other areas.			Complicated algorithm not easily inferred from code. UI changes that are better reviewed with context (UI demonstration). Potential impact on other areas not considered.	up to 25% of the time	between 25% and 50% of the time	Yes	"Need to understand background feature, design, and history of code."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Familiarity with the feature. Subject area (javascript, framework, build, etc.) expert. "	Yes	Higher level design feedback if reviewer is familiar with area; lower level syntax type feedback if reviewer is less familiar with area. i.e. More familiarity means comments can relate to the big picture (information not in the code reviewed) versus lack of familiarity means comments are restricted to what is visible (just the code in the review). 		aluty	aluty
6503690	Test		7	5		10	Yes	"Helping improving the development process in general / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes	"For larger changes, need to understand the rationale and the E2E surronding this area that could be affected."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			person who has been involved in the feature area or future owners in area	No				mansong
6503691	Development		27	16		9	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				When feedback is complex and/or difficult to explain clearly and needs discussion OR when I have questions that I want timely response on OR questions on some complex area that are best explained by diagrams etc.	up to 25% of the time	between 25% and 50% of the time	Yes	"As a code reviewer you need to understand the context of any changes and understand the big/wider picture of what is going on in the code, other possible ways of doing things etc."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People who generally give rigorous, critical feedback and are reaonably familiar with that code area."	Yes	Usually get more suggestions on alternate approaches or they notice more subtle issues in the code.			brucmc
6503692	Development		15	15		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Typically, if I flag an issue in the code review, the developer will likely come talk to me if there's a specific reason for his implementation. (Such is the nature of being a lead. The dev is more motivated to have his code approved than I am to approve it - hence, he'll seek me out).  In other words, if there is a misunderstaning between expected implementation and actual implementation."	up to 25% of the time	up to 25% of the time	No	"I usually scrutinize the changes for the code files that I own and/or have more familiarity with. For code changes outside my area of ownership, I really wouldn't know how to scrutinize beyond just syntax and style changes (unless it relates to the all-up design)."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			my immediate team + corresponding test team.	No			jselbie	jselbie
6503693	Test		1.33	0.8		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				In the cases I do not understand the code or the reasons for which it has been implemented in the way it is.	up to 25% of the time	up to 25% of the time	Yes	I do not fully understand what is the code intended to do. Maybe because of a latch of comments/descriptions to explain the code.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			They will always be my team alias + others members that are impacted by these changes. Or people that contributed with hints/advice for the changes.	Yes	The owner or the person that is very familiar with the changes can find bugs or make code improvements easily than other persons. So the difference comes with more comments and those comments can be more precise and exact.	"It would be very helpful to be able to use the differentiate tool from codeflow separate from code reviews. For example, I want to diff 2 files using codeflow, I browse for both files and I see the changes/differences without having to send a code review or having someone to review my code."	ctais	ctais
6503694	Development		13	6		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"If the change is important, non-trivial, has insufficient test coverage and I'm expected to validate the change by code reviewing it. In all other cases I could e.g. ask for more comments as part of online code review tool."	between 50% and 75% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"1) Past owners, if they have time 2) People who could be affected by my change 3) Formal reviewers appointed to the code 4) People who would like to learn that code area"	Yes	People familiar with the code tend to find non-obvious design issues or propose better solutions.	"Code reviews? Code Flow tool needs the following two features: 1) In addition to rejecting CR (which means you are busy), give an option to oppose (veto) the change meaning you are completely disagreee with the change. 2) There should be a way to reset your signoff on a CL after author started a new iteration."	vitaliyt	vitaliyt
6503696	Test		2	2		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"	"I believe that my team is a bit dysfunctional when it comes to code reviews. Despite code reviews, fairly crappy code is checked in on a regular basis."			"- When code improvements need to be made. Simply bad code, bad comments, duplication, etc... - Questions about the intent of the code. Reviewers may not be experts in that feature area. - The change may collide with a change somebody else is making in par"	More than 75% of the time	between 25% and 50% of the time	Yes	"- It takes longer to review unfamiliar code because most of our code can only be understood in the context of the rest of the file. - We also do not have consistent coding standards, so at the very least we'd like to be consistent within the same file... "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			- Immediate test team (our team's policy) - Devs when appropriate. E.g. when the feature area is under a lot of churn.	Yes	"- Code owners generally have a better understanding of the intent of their code, and are able to help you avoid more pitfalls. - Code owners may be working in the code more actively, and may be making changes that conflict with the current code changes. -"	Collective Ownership sounds interesting... Our coding style and commenting needs to improve for that to be possible... We also need better ways to form collective visions around where something should be headed. Maybe Test is simply lacking technical leadership in this area?	designe	designe
6503697	Development		4	4		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				To get a better overview of the change (feature).	up to 25% of the time	More than 75% of the time	Yes	It just takes me longer to familiarize myself with the code and review the proposed changes/solution to a problem. I am usually not just reviewing the syntax but also comment on the approach to the problem and general logic of the solution - in case of unknown code this just takes me longer.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I always add the most experienced devs as the required reviewers along with any developers who know the area of the changed code. I also add new members of the team to help them learn the codebase. I also always include testers for buddy test.	Yes	"More accurate, better suggestions."	Maybe have a separate area for issues from buddy test		alkop
6503698	Development		16	12		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When there is a major architectural issue in the code - usually during the first checking of a major piece of work.	up to 25% of the time	up to 25% of the time	Yes	To get an overall understanding of the surrounding code and architecture to provide meaningful code review feedback.	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"My immediate team members, and the people who I work with on the piece of code that I am sending out for code review. I also include people who I think might provide valuable feedback."	Yes	The comments are usually have more details.	I did not understand what Question 14 really means.	manojb	manojb
6503699	Development		5	5		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				- When suggesting alternative approaches (design issues). - Disagreement with a change in general. 	up to 25% of the time	Never	Yes	I need to take time to understand the code before I can reasonably review a change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I select people who have a stake in the change and/or people who understand the area reasonably well.	Yes	Feedback tends to be much more detailed and usually more helpful.	"Renames and moving code (within or between files) are common in even minor refactors.  These can cloud a review with functional changes, so a tool that could hide these types of changes the way CodeFlow hides whitespace would be extremely helpful.  I would also like a tool that could flag common style issues (whitespace, variable casing, Hungarian usage, etc.) automatically so I can focus on the functional changes."		colina
6503700	Test		25	5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				If the context or design/solution is not clear	Never	up to 25% of the time	Yes	It needs time to understand the change (depends on the complexity)	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Work area and ownership	Yes	The comment can be related more to design			zolvarga
6503701	Development		18	18		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"For large/complex changes I often prefer to talk to author in person since it is easier to get high level point of the change in person rather than in a tool/email.  Otherwise, the scenario the comes to mind where it is necessary to talk to the author in person would be if there is contention about how something should be done/fixed.  After a certain point of back and forth in mail it is easier to just sort things out in person."	up to 25% of the time	between 25% and 50% of the time	Yes	"This seems pretty obvious, you usually need to understand the context of the surrounding code to assess the fitness of any given change.  If that code isn't something you are already familiar with then you need to spend more time looking at it in addition to the specifics of the changelist."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Most common scenario is to include the entire team for the component in question.  Very rare to pick isolated individuals for a code review.  If the change is going to impact other teams in some way (say and API change that bleeds over into somebody elses code) then would expand the scope of the review to include additional people/team alises.	Yes	"Of course, people less familiar with the code that is being change will have less useful feedback since they won't necessarily understand any subtleties or nuances of that code.  In my experience people that are not that familiar with the code in question will give shallow feedback, e.g. you forgot to check the return value of some API call, stuff that is kind of easy to check regardless of the code in question."	"I don't care much for codeflow and never use it myself.  My team has been using bbpack + email for codereview for years, and the email model produces more of a conversation about the change whereas the codeflow model seems to produce just a bunch of disjoint comments.  Codeflow seems fine to me for simple changes that will have limited feedback (you forgot to null check this allocations / okay thanks, will do), but for non trivial changes that are likely going to require some discussion I much prefer email."		
6503702	Development		10	10		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"1. Clarification of Design 2. Contention on whether feedback is valid or the right way to address feedback 3. General discussion of the changes being made, e.g. why was X done this way, have you considered Y, are you tracking Z, etc. "	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"Unless the changes are trivial, I have to be familiar with the code in order to achieve the goals of performing a code review."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			"1. The whole team for the project (dev/test) is always included in order to achieve ""Team Awareness/Transparency"". 2. In some cases, specific team members who have expert knowledge are explicitly included (instead of implicitly) in order to encourage them to be reviewers.  In some cases, I won't submit code unless an appropriate expert reviews it."	Yes	Comments/feedback tend to be more cohesive and find more issues from an expert than someone who is unfamiliar.		swenker	swenker
6503703	Development		25	4		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"1) If I believe the code is not ready for review 2) Questions about why the code works as it does 3) Political/logistical issues (e.g. a code review that fixes two bugs, one of which is controversial and the other is not.  Breaking a big code review into two, so that the most effective reviewer is on each.)  Ideally this would be dealt with before the review is out, but...   "	More than 75% of the time	More than 75% of the time	Yes	"Because to review a change, you have to understand what the old code did.  If I'm familiar, by definition, I'm not going to have to do the work necessary to get familiar.  I wonder about this question all around - there are two reasons to ""talk to"" the author: to have the author explain how the code works and to explain my feedback to the author.  I do a lot of explaining because I don't like to report the same feedback twice.  I don't do a lot of asking because the code ought to be readable in the first place."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"2-3 for substantial changes, but I might settle for 1 for a small fix."	Yes	"Well, I'm not sure you're asking quite the right question.  E.g. suppose I'm altering the code of an average, but very junior engineer.  If it's his code, I'm likely to get some pretty good insights from him.  If he's completely unfamiliar with my code, I might get nothing worthwhile at all.  A senior developer, on the other hand, should be able to provide good feedback even for code that's new to them.  So, for a junior engineer, yes, there's a huge difference.  For a senior engineer who's a good reviewer and is motivated to give you good feedback, there's not much of a difference."	"Our team used to follow the model that the code review meeting was where all feedback was collected.  That meeting tended to be a dry recitation of failings.  After we switched to using Codeflow, rather than paper, as the primary means of collecting feedback, we changed the meeting to be a forum to understand the ""Why?"" of the feedback.  It's really helped my junior folks to be able to apply the feedback in new code right away (rather than getting the feedback 3 times before adopting it)."	stbenz	stbenz
6503704	Test		6	4		20	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				Complex code logic with few comments	up to 25% of the time	between 25% and 50% of the time	Yes	Need to understand the logic first than understand the change.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1. The people who is familiar with the code 2. Component owner	No			yaoke	yaoke
6503705	Development		4	4		12	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Questions on the design, which need a lot of face to face conversation."	up to 25% of the time	between 25% and 50% of the time	Yes	I need to take longer time to understand the code and the logic behinds that.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			1. Technical people working in my area 2. Team members in this area 3. Team lead 4. All other team members (Optinal reviewer)	No			xiaos	xiaos
6503706	Test		7	5		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"When I have big concern about the code, or I need more detailed explaination on the code "	up to 25% of the time	between 25% and 50% of the time	Yes	I need to spend time to understand what the developer is trying to do in the code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1. Feature Crew 2. partner	Yes	the comments given by the reviewer who is very familiar with the code focus more on my algorithm and business logic issues. The comments from the reviewer who is unfamiliar with the code focus more on the syntax or best practice. 			
6503707	Development		4	4		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				To clarify/or discuss complicated technical issues with the change.	up to 25% of the time	Never	Yes	"To give useful comments that improve the core architect change, I need to have good understanding of the related areas first. Without such knowledge, it is very limited in area where I can do a code review. (such as only code pattern/readability/etc. that are independent to the understanding of the code.)"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Depends on the situation. In normal case, I select people who know/own the changed area the best, plus some senior. In urgent case (with simple change), I select whoever is around my office.  Every code review in my team requires CC to team Code Review alias."	No		"I would love the News feed to allow me to click on the event and guide me to where the change is. I often check the News feed to check whether the author had resolved my comments, by I don't know which one."	vasanj	vasanj
6503708	Development		10	9		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If there is a strong difference of opinion.	up to 25% of the time	up to 25% of the time	Yes	With unfamiliar code some time you have to understand the patterns already used in the file. Also with unfamiliar code you need more time to understand the fix dev is making.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1. if the person is the owner of the files/Area we always include him/her as mandatory 2. else we have an alias where whole dev is there and review from any one is accepted.	Yes	1. Better feedback if we are deviating from specs etc. 2. Better feedback if some test cases might be broken 3. Better corner case scenario feedback.			sagoel
6503709	Development		8	4		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If I can't quickly understand what's going on, I'd prefer to have them there."	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"It takes time to get into the context of the code.  In Bing, we have a huge sprawling codebase, filled with different styles and conventions."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"We send it out to the team.  But if there is someone who knows the code or area, we ping them directly too."	Yes	"Familiarity can make the review process better, since they already know the traps you might have fallen into."	Code reviewing is important and we don't do enough of it as it is.  The best tools are the ones that are nearly transparent.  I've found a lot of resistance from developers to using codeflow due to UI issues.  There is a small learning curve and some developers don't want to take the time.  	bramg	bramg
6503710	Development		12	2		2	Yes	"Avoiding build breaks / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"					up to 25% of the time	up to 25% of the time	Yes					who is working on the same project or need to be aware of the change	Yes			pazakhar	pazakhar
6503711	Development		19	15		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"complicated issues, or if I'm curious about the design/strategy"	between 50% and 75% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			team process defines that (i.e. whole dev team + test team optional)	Yes	if they are familiar then they have a better understanding of the code and why the changes are being made		mfrost	mfrost
6503712	Development		10	8		6	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Unclear code logic.	between 25% and 50% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			team members who are familiar with the code.	Yes	There is more insight on code logic.			
6503713	Development		1.5	1.5		25	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				there is missunderstanding when we talk about the code review. Or the code review is totally not right solution to do.	between 25% and 50% of the time	Never	Yes	"Becuase I am not familar with the code, I need to spend more thing to understand the code first and then understand what the change means to do. "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			the developer who works on the feature too. the dev leader of the feature the test owner who is optional to the code review	Yes	The one who is familar with the code can give more understanding about the whole scenarios.   	"It will be great if we can search our previous code review in some website, instead of our own mail box"	shansw	shansw
6503714	Test		9	8		26	No	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				when the author does not respond to emails fast enough. or when email is down:) sometimes giving review feedback over lunch is way faster than email review and a republish by the dev.	up to 25% of the time	up to 25% of the time	No	new files are easier to review. Less risk of breaking existing stuff. everything is new. you can easily find the redundant or unused code blocks.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			folks who gave good feedback in the past. folks who will respond in a timely manner.folks whos opinions I value.	Yes	knowledge of corner cases is an example.		diboyed	diboyed
6503715	Test		8	5		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				a) The problem that the code is trying to solve is not easily understood through comments in the code or other contextual information that I may already be aware of. This typically happens when new technology is being added. b) The review is going back and forth without significant improvements in the quality of the code. c) The quality of the code is bad enough that it will need to be rewritten.	up to 25% of the time	between 25% and 50% of the time	Yes	"When I review code, I look for design patterns, which do not require familiarity with the code. I also look at the overall design as a solution to the problem which typically requires me to understand the code (both new and existing) in order to ensure that the design makes sense."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Our team has a policy which dictates the people that need to sign off on reviews based on the code being changed. Otherwise, I try to select people that understand the code and will provide a quality review."	Yes	"Comments from those unfamiliar with the code either (a) center on basic issues that don't require familiarity, or (b) take a lot more time as the person asks questsions/makes comments that require clarification from my part."	The historical data provided in code reviews is really useful for tracking changes to code and making improvements to processes. Any process that is in place needs to surface this data easily.	michsco	michsco
6503716	Development		29	4.8		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1 - if comments are more complex than one-two sentence 2 - the changes are not easily understood	between 25% and 50% of the time	between 25% and 50% of the time	Yes	The difficulty to understand the change is amplified by how little I understand the original code. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			prefer to have a single/primary reviewer - avoid questions about who should be reviewing balance between who is available and who has the most knowledge about the area	Yes	the extra familiarity allows the reviewer to comment on bigger picture details			dukehar
6503718	Development		5.5	3.5		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When the approach to solution is wrong, or lots of repetitive mistakes of the same type."	between 50% and 75% of the time	More than 75% of the time	Yes	need to learn the code/area	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			people who are familiar with the code.	Yes	more in-depth feedback		jafeng	jafeng
6503720	Test		14	11		7	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"I talked to the author in person when I would like to understand the background why he/she take this way to update the code, or would like to understand the feature design."	up to 25% of the time	between 25% and 50% of the time	Yes	Need some time to understand the feature and test scenario.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Basically automatically selected from reviewers.	Yes	"More detailed feedback or suggestion about alternative, if the reviewer is familiar with the feature/code."		koheio	koheio
6503721	Development		4	2		1	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"					between 25% and 50% of the time	between 50% and 75% of the time	Yes										
6503722	Development		13.5	13.5		12	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Ensure adherence to team best practices and guidelines. Ensure the implementation matches the intended design.			Whenever problems go beyond a single section of code in one file. If there are systemic problems with the code being reviewed it's not as effective to write comments in a code review tool.	up to 25% of the time	between 50% and 75% of the time	Yes	It really depends on the impact of the changes being made. There are times when new files or files that are new to me have less of an impact outside the actual changed code in which case it takes less time to review it. Sometime changes in code I'm familiar with actually have a much bigger impact and require more time.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Developers already familiar with the code being impacted. Developers familiar with the design. Testers that will be testing the feature. PMs that provided the functional specification. If I can't find any of those then it gets sent to someone that is familiar with the technology being used (ie someone that knows XSL even if they aren't familiar with the code that I'm sending for review).	Yes	People that are already familiar with the code often know about dependencies that aren't readily apparent and can provide that feedback during code review.			jeffjon
6503723	Test		1.6	1.6		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the reasoning behind the code is not that apparent to me or when there is something I believe is fundamentally wrong on it.	between 50% and 75% of the time	up to 25% of the time	Yes	Because I need to get familiar with the whole idea in the code before making suggestions around how things are done.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			I pick people who I know have some understanding of the feature.	Yes	"Most of the times, the quality of the feedback is proportional to the understanding of the feature that the reviewer have."		frgalvan	frgalvan
6503725	Development		15	15		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1) Assumptions unclear from the code. 2) Very large changelist 3) Disagreement about interpretation of particular parts of code.	up to 25% of the time	up to 25% of the time	Yes	"May need to review files related to the change, but not altered by the changelist being reviewed."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Look within feature teams that are affected. Always send reviews to backup owner (or equivalent).	Yes	More subtle bugs and detailed feedback is likely when a reviewer is more familiar with the code.			alanshi
6503727	Development		12	4		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If it is a complicated change.  Looking at a diff, is not enought to really understand what the author is trying to do with his change."	between 50% and 75% of the time	between 50% and 75% of the time	Yes	I have to read all the code in the file (and possibly other files that are not even in the changelist) to really understand the flow of the code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Required: Owners, my lead, my architect, tester of the feature. Optional: Entire team alias."	Yes	"The difference is that a reviewer who knows the code can provide alternatives that are not necessarily in the files that are being changed.    A person who is not familiar will usually find problems specific to the change that is being made.  I.e. bad algorithm, comments, etc..."			
6503730	Development		10	8		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				1) When there is a disagreement on the comment and its there has been a few comments aded on the same topic.  2) when we dont agree on the broader change.  3) Design discussion. Code review tool is not a place to discuss design choices.	up to 25% of the time	up to 25% of the time	Yes	"Some of the related files, not chagned as part of the fix, is not present and i have to look at the code else where. "	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Major stake holders. Members of dev and test discipline.	Yes	The owner of the code provides a deeper comment that help avoid complicated bugs.	1) please provide a way to filter comments based on the iteration.  2) way to highlight my comments from others.  3) way to block completion of the code review if some reviewer is not convinced about the change. 4) More structure on the information provided during code review publish. 5) indication who where among the list of reviewers is required or optional.		sranjan
6503731	Development		15	6		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				1. Concern over design and/or overall approach. 	up to 25% of the time	between 25% and 50% of the time	Yes	1. Understand the error handling and the flow first to identify how well the new code changes fit into the existing code. Ditto for new files to ensure that code follows the flow and error handling elsewhere in the project.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1. dev team members  2. SDETs  3. Engineers involved in the design/fix 4. Code/Component owners	Yes	Code owners or reviewers familiar with the code are sometimes able to suggest better alternatives. They are also able to pick out not so obvious errors.	"I think that the design or the overall approach should already have been finalized before the coding. I see code review as scoped to improving the coding part of the development process. Sure, code review can sometime identify design/approach flaws but I hope that these are cases are exceptions!"	paragsh	paragsh
6503733	Development	-	7	4		45	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If the change appears questionable where another design may be better. if the reason for the change is unclear even from the description. if my comment is complicated where its inefficient to type as there might be a lot of back and forth.	up to 25% of the time	up to 25% of the time	Yes	I must first learn what the code was doing and then what the change does. I cannot immidiately comment on the change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who are working on the feature team + owners of the code areas affected (both test and dev)	Yes	"When people are unfamiliar with an area of code, only a few take the time to learn that code and hence you usually recieve an easy sign off, or more common, they will not review it at all. If they do review you will likely only get obvious issues, questions and style comments."	Question 14 was very unclear as to what was being asked.		jcrompt
6503734	Development		16.67	16.67		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				architectural/design issues further education 	up to 25% of the time	up to 25% of the time	Yes	to understand what the unfamiliar code is doing	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			whose code am I changing who is available to review who will give feedback		a reviewer that is familiar with the code is more likely to catch defects and suggest alternatives    	"bundle it with what tools are used to catch code elements so humans don't have to like gated-checkin prevents code breaks, stylecop keeps a consistently style, fxcop for various patterns, code coverage for at least the existance of tests.  we like code reviews because it usually can catch a certain class of problems, but they are also cause the largest impact to the speed of development."	markash	markash
6503735	Development		13	12		10	Yes	"Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important"				Code level design issues including object/class structure. It is difficult to write out long comments explaining alternate class interactions/design patterns.	between 50% and 75% of the time	between 25% and 50% of the time	Yes	One of the problems with the CR tools is that they focus attention on the code that has changed. As a result people end up reviewing only the changed code without the full context. It is important to understand the full context and this takes longer with files that you are not familiar with.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes	The reviewer is able to suggest viable alternatives or design changes. Also the reviewer is able to identify logic errors much better.	"Automated support for archiving and searching of CRs. This allows people to search for established patterns in the team rather than reinventing. Being able to flag certain CRs to your attention (regardless of whether you are on the reviewer list) based on area of ownership, interest, public interface changes etc. Better integration with unit test/test automation tools so that there is a report of some sort of test coverage. Better integration with automated CR tools such as OACR/FX cop to flag violations regardless of whether fx cop rules are enabled. "	badrir	badrir
6503736	Development		6.75	6.75		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				When the changes being reviewed are either not close to adhering to our coding best practices or the approach taken is either completely incorrect or could benefit a large redesign.	between 25% and 50% of the time	up to 25% of the time	Yes	"New files or files that I am not familiar with take longer because there are generally more changes or if I am not familiar with the code, I have to first learn what it is doing and the structure of the code to be able to do a thorough code review."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Other people who are familiar with the area to which I am making the changes or familiar with the technologies being used.  I also tend to select those who are great coders as I will hopefully learn some new approaches from them.	Yes	"Generally the comments from those who are familiar are more detailed and uncover potential issues in the changes.  Comments from those not familiar with the code can sometimes be trivial and often times make false assumptions or incorrect observations.  As an author, I sometimes spend extra time explaining how the code works or the changes in more detail (not necessarily a bad thing by the way :))"			myandek
6503740	Test		9	6		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When the coder does not buy your comments and as reviewer you think it is important for overall quality of the code and product.	up to 25% of the time	up to 25% of the time	Yes	Sometime the changes are highlighted to that specific file where its been modified due to which we have to find the references of the caller functions and understand how the change will affect the overall fix.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Feature area stake holder	Yes	Comments which uncovers the areas which coder might have not thought about.			yashrajb
6503742	Development		10	7		20	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"When I simple code comments are not enough to understand the rationale for a change or a review comment, when we've already exchanged a few code comments and it is easier to talk in person, when someone else who is not part of the review needs to be present during discussion."	between 25% and 50% of the time	up to 25% of the time	Yes	"Because it takes time to understand the design, also if the file is new it is generally more code to review."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Area owners, technology experts, people who previously edited the file, people who introduced the bug that I'm trying to fix, people requied by our development process to be present on certain code reviews."	Yes	There's a higher chance of receiving useful comment or design improvement suggestion from someone familiar with the files I'm changing.	Please consider research already done by the Visual Studio Ultimate team who worked on Code Review module for VS 2012 if you haven't already (I can put you in touch with the PMs from that team - albulank)	albulank	albulank
6503744	Development		8	4.3		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Third Most Important"				"ambiguous areas in an unfamiliar code, or ambiguous change in my familiar code."	up to 25% of the time	between 50% and 75% of the time	Yes	Because it is new 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Team members and owner of the changing code.	No			rimont	rimont
6503746	Development		3	3		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				I will talk in person if I feel there is a substantial misunderstanding of some of the code or if there is an alternative method that varies quite substantially from the code change presented.   I will also sometimes see them in person if there is a confusing part of the code that I think would be easier for them to explain face-to-face.	between 25% and 50% of the time	up to 25% of the time	No	"Reviewing files I'm largely unfamiliar with results in a more cursory review. I will review the changed lines for syntax mistakes, code style, and obvious bugs.  Since I'm not as familiar with the overall purpose and context, the review will be faster. In these situations, another code reviewer will be more knowledgable and thorough. If a more knowledgable code reviewer is not on the list, I may add him or talk to the original author in person.  Code I'm familiar with takes longer because I take the time to ensure the code makes sense in the broader context and design that might not be obvious from only looking at a few files."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"1) I select 1-2 devs that have specific knowledge about the area being changed. 2) I add the tester associated with that area or who has worked with the above devs. 3) [optional] I add a well-known general code review dev partner, but not necessarily an expert in the specific area. 4) [optional] I add a well-known general code review test partner, but not necessarily an expert in the specific area."	Yes	Usually the comments will point out a different method of going about the change -- something that fits better with the overall design of that feature or area that would not have been otherwise obvious.	"In our group we use CodeFlow. Here a few good points about CodeFlow that makes code reviews easy and effective:  1) It's quick to start a new review. 2) CodeFlow has instant comments. 3) It's very fast to update to new iterations and compare iterations to one another. 4) Since CodeFlow stores the change as an SDPack on the CodeFlow servers, it serves as a way to back up your pending changes that have not yet been submitted to a depot."	jnordi	jnordi
6503748	Test		7	2.5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				In the case where his code changes may have unforseen impact or just a design choice that I would like to discuss that would be too long to discuss using the code review tool.	up to 25% of the time	up to 25% of the time	Yes	"I have less context, so I take more time to understand what is going on."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Relevance. People that worked/are working on the same code/project.	Yes	Usually they are more valuable and relevant		renatof	renatof
6503749	Development		25	17		55	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Most of this happen in real time in CodeFlow	up to 25% of the time	up to 25% of the time	Yes	Sometime the code changes can effect the calling/called functions which are not part of the code review. You need to lookup these files outside of codeflow.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			feature team developers	Yes	Reviewer most likley has found bugs.			ericwol
6503750	Development		20	16		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important"	Collective ownership towards developing and maintaining good designs and high quality code.			"Large feature checkin. New to the code base.  Long debate about a disagreement.   I personally like to talk with people in person to the extent that it's not hurting others' productivity, and it's convenient schedule-wise. I think there is no replacement for face-to-face conversations but the tool is still extremely valuable and does make us efficient, so long as we understand that it's sometimes more efficient to talk in person. "	up to 25% of the time	between 25% and 50% of the time	Yes					"Area owners, senior members, leads, peers in test discipline etc or peers who depend on my feature or I depend on etc. "	Yes	The comments are more general not domain specific. 			
6503751	Development		15	15		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When I don't understand what the developer is trying to accomplish.	up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"The person who has worked the most in that area, or who is also working on the same project."	Yes	They find non-obvious issues and make suggestions on how to better factor the code.			
6503752	Development		13	6		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Large change Don't have the background Design or other fundamental problems with the way change is done	up to 25% of the time	up to 25% of the time	Yes	New file = bigger change Unfamiliar = more time reading and understanding	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Ppl who are involved or need to know about the change Immediate team members 	No			nimahak	nimahak
6503753	Development		9	8		23	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Usually at least one of the following reasons will trigger an in-person code review:  1) Feature change is large enough, or requires enough design context, that it benefits from an in-person walkthrough of the intended design & code for a better understanding.     In these cases in-person code reviews help much like in-person spec reviews help to guide that understanding.  2) Proposed change is controversial enough that latency or limited-context of communication through email/codeflow gets in the way of necessary discussion (both raising the barrier of entry and delaying needed discussion - and then overextending long threads past valid resolution).    3) Implementation technology is not well supported by diff / code reviewing tools. E.g.: XAML, SSIS and other ""designer-oriented"" domain languages can be positively painful to review offline without context. 4) Motivation of changes is opaque to the code itself - and has lots of small decisions that cannot be simply summarized in a change description.   e.g.: large branch integrations / resolutions often fall into this case. "	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"By definition, parsing and understanding the intended design and implemented behavior of new code takes time which correlates to the length an complexity of the code - and there is no point in reviewing and signing-off on code changes without having that level of understanding. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Usually use as Required: feature's crew (dev/test) - union - dev-owners of files/areas impacted.  Dev/Test team aliases tend to be included as optional for awareness - and to allow folks unexpectedly impacted to loop themselves into the review. 	Yes	"We depend on reviewers deeply familiar with the code/areas to help identify design issues, invalid assumptions, non-obvious risks for the change - and to provide feedback on better approaches, or help identify the need for a more generalized fix (e.g.: call out when a ""small bugfix"" is really patching a more general or systemic problem that would be better addressed by a different fix or design change). "	"There is a wide area between ""Spec Design Review"" and ""Bugfix Code Review"" where much of the interesting changes in development happen - and is where tool-gaps are felt more distinctly.   Most tools or processes seem to optimize for one side or the other - and compensate by moving anything in the middle into either a ""formal code review meeting"" or ""just a changelist"". Neither seems to provide a model that is informal/agile enough to help smooth development *and* structured enough to provide context of design and intention for the change.   We tend to compensate by using code review tools arguably optimized for offline reviews of bugfixes (in terms of tracking and velocity), sometimes to annotate in-person discussions of the code. But adding/linking context for the overall change beyond 1-dimensional text description tends to fight against the tools. Codeflow is better than most, but its annotation system is about code-lines rather than larger pieces.   I know 'literate programming' never took off, but it's probably the main approach I've seen tackle this at the right level of abstraction. "	miguelgo	miguelgo
6503754	Test		7.5	7.5			Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				1.- When the alternative approach I am recommending to take is harder to explain in words than by using a whiteboard. 	up to 25% of the time	up to 25% of the time	Yes	It takes longer because you might have to look into other areas to make sure the code dependencies are properly considered by the author.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1.- People who are the area owners  2.- People that have big dependendies on the area 3.- People that you know will provide valuable feedback based on their experience	Yes	"As he knows the area better, he will help you ensure that you are reusing code that mnight be located in other files and help you avoid code duplication.  People that are not very familiar, might focus their feedback mostly in coding mistakes, performance, and other best practices."		luisom	luisom
6503755	Test		8	6		15	No	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	1. To plan better test Matrix based on the code review sent by Dev. 2. Easily Find Product failures in the code if you have already reviewed the changes			1. If the calling code paths are not obvious for a change 2. In case the submission is complex and code is not commented properly. 3. Sometimes code submission may miss to add critical links	up to 25% of the time	up to 25% of the time	Yes	1. I would try to spend some time to simulate in mind the code paths to see what kind of inputs or scenarios code will handle or go thru. 	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			1. Technical Proficiency with Good Analytical skills  2. Area Expertise 3. Testers 	Yes	Familiar person generally provides comments related to the product behavior than non familar person who will focus more on general technical stuff or comments etc based on his skillset. 	Code Flow interface can be improved in error scenarios. I remember it took me long time to figure out that a bad synced file was causing connection disruptions to my corext tree. Error was not shown on the code flow UI.	vikrantm	vikrantm
6503756	Development		5	5		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When it is hard to communicate via writing	up to 25% of the time	up to 25% of the time	Yes	Need time to get more context about it 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			a fixed group	Yes	deep insight / high quality bugs			congch
6503757	Development		13	13		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				if it required more than 2 roundtrip of Q&A	between 25% and 50% of the time	More than 75% of the time	Yes	mostly can't figure out the historical reason to implement as such	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			immediate ownership area	Yes	concerning how it was originally designed and intentioned to			poonr
6503758	Development		6.5	4.5		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				#NAME?	between 50% and 75% of the time	up to 25% of the time	Yes	I try to understand the changes in the flow and take time to read the description and code more thoroughly.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I select people by feature area and the owners of the feature are required to give CRs. If it's not clear, I ask the person/team that touched the file last to code review it. I also always add my immediate team to all code reviews."	Yes	#NAME?	"It would be great if code review tools were more capable of being social. For example, some suggestions I can think of are: - Showing when someone is ""typing"" where (it would allow people to have conversations) - Being able to link to a line of code or comment easily, to make it share-able  Metrics pages would also be fun (how many CRs done, how many lines of code written, etc.)"		benchung
6503759	Development		6	4		9	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				when I can't understand the meaning or purpose of code change	up to 25% of the time	between 25% and 50% of the time	Yes	I need to understand the logic and then help to identify if there are any problem for the code change	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			people who are familiar with my code change	Yes	they can give some constructive proposal or better solution for you.		seli	seli
6503760	Development		4	4		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				 - Demo of UI changes  - Clarify some questions due to unfamiliar code	Never	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who are the most familiar with the code.	No				
6503761	Test		5	3		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When there's been considerable back and forth on any issues in the code review.	up to 25% of the time	up to 25% of the time	Yes	When I am looking at unfamiliar code I like to spend some time looking at the existing code base to find out existing call patterns.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			ownership defined in codetags and domain expertise.	Yes	Yes the feedback points out issues in assumptions that might have been made in the changes. The suggested insights into possible code/design improvements is also invaluable.		mksaeed	mksaeed
6503764	Test		6	2		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When it's hard to explain the detail in a short code review comment dialog	up to 25% of the time	up to 25% of the time	No	I will just focus on the changed part and give question as comment if I have any.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			The guys in feature team and experts.	Yes	THe familiar people can share more valuable information and give valuable commnets.		mingy	mingy
6503767	Test		3	1.5		60	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				when it introduce big change of the logic/arch etc. Or I have different design ideas of a big part within	Never	between 25% and 50% of the time	Yes	Need to go through the back bone of the code before looking at the changes	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"within feature team is a require, optionally add related person or who show interested in the change"	Yes	"who are previously familiar to the code can provide more constructive suggestions for architecture, easier to find code defects or potential problems on dependent components"			
6503771	Test		7	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If a bunch of new code added, like create a new source file."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	I need know the context to understand the code change	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Who works with the same feature or technical leader	No			tonyni	tonyni
6503772	Development		22	4		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important"					between 25% and 50% of the time	up to 25% of the time	Yes	"If I am reviewing familiar code, then I typically can understand the intent and the implications of the design changes without deep thinking.  Otherwise, I spend significant time on meta-level analysis."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			code owners; subject matter experts; people who might be impacted or might benefit from knowing the change/design/pattern	Yes	"I expect someone very familiar with the code to make substantive comments around potential defects Also, expect someone familiar with the code to be more defensive about any changes"	"Did not like question 14;  there are many levels of code review for each of the categories, so the answer to many of the categories could have been all four (no, little, high, & complete)"	ejenkins	
6503773	Test		5	3		20	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When there are long explanation of why the changelist need to fix or want to know the detail about the change.	between 25% and 50% of the time	between 50% and 75% of the time	Yes	Because I want to know the reason of these changes and understand a little bit more about it.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Teammate, DEV code owner. or whoever has time at that moment."	Yes	"Usually the owner would know the history of the code, and give some better suggestions on the code review. "			shiwen
6503774	Development		14	12.5		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				When the code being submitted is completely or unfamiliar and have some questions on what the author was trying to do in the code.	up to 25% of the time	between 25% and 50% of the time	Yes	It takes longer to review the file I'm not familiar with most of the time as I may need to spend more time to understand the code and may have questions for the author to understand what he/she was trying to do in a complicated function of code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People in the team and people relevant to the changes in other teams. Other teams are chosen if we are changing files owned by other teams or the other components may be affected by the changes.	Yes	"In general, if the reviewer is very familiar with the code, sometimes any missed changes are pointed out or changes which could break other functionality are pointed out. Although there is no change for most of the time."		rajasree	rajasree
6503775	Test		11	11		50	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"	I some time need some endorsement to my code change. Sometime I am not very sure if I have changed all the files that I need to.			when we cannot settle on a disagreement over email/Codeflow.	between 25% and 50% of the time	up to 25% of the time	Yes	reviewing code is a good learning oppurtunity to me. I love to review the code in the areas that I am not familiar with. I spent more time to learn the context of the change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			1. those who has knowledge in the area that I am making change. 2. those who should have visibility to what I am doing	Yes	a reviewer who is very familiar with or the owner of the files I changed in a code review can provide much deeper and specific feedback.   other reviewers (who is not so faimliar) may provide a fresh new opinion.	"I hope the comments and answers in the Codeflow can be all somewhat integrated with source depot. So that when I sdv a specific change of three years ago, I can see all the ""why"" and ""Why not"" behind that change. "	ericzhe	ericzhe
6503776	Test		8	2		5	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				He/she does not understand my comment after a cou[le of rounds on CR	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Listed people + people will directly be effected by the cahnges + people should be aware of the changes	No				
6503777	Development		6	4		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				- If I don't understand the change and I think it's because I dont have enough context/knowledge. - If my suggested change needs more discussions which can be time consuming if done on back and forth code reviews 	Never	Never	Yes	Because I have to understand the context of the change. It will obviously take more time. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes	The comments are more useful. More actionable items.		mousman	mousman
6503778	Development		4	4		11	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Mine is a very agile development team. Quite often it so happens that a few folks are designing things for the next release, while others are doing work on previous releases. People are picked up from the latter set as they become available, to start working on the next release. Many a times, they directly get to work on coding assignments, without really getting involved in the design process. Because of this, sometimes the first iteration of the first code review of a particular feautre, does not seem to fit very well with the overall design and architecture. At such a time, I feel that it's better to personally talk to the concerned person and have a discussion, instead of going back and forth on code review forum."	up to 25% of the time	up to 25% of the time	Yes	"Because I need to read more lines of code to understand the context, and the intent of the changes in that particular file."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I include at least one senior developer in the code review. I pick the one who is working on an area closest to mine. I also pick up my backup dev owner. If I am fixing bugs in somebody else's code, or if I need to touch somebody else's code in a check-in, I include them in. I include relevant members of the test team in the code review."	Yes	"If somebody is very familiar or owns the piece of code, they are sometimes able to point out a few things: 1. Design constructs which I missed out on when I created the changelist. 2. Dependent code pieces that need to be touched and probably won't be caught by build/CITs."		rahusing	rahusing
6503779	Test		9	7		25	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				If I am not familiar with the change / the change is complex enough to require an in person explanation.	up to 25% of the time	up to 25% of the time	Yes	It takes longer to familiarize myself with the new area.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"								
6503781	Development		7	4		15	Yes	"Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / First Most Important"				"address potential de-sync between code change and the intent of the change, discuss alternative approaches. "	up to 25% of the time	up to 25% of the time	Yes	"Need to build familiarity with the logic - data and control flow, so that the change can be reviewed keeping the overall structure/semantics in mind."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Code/Design Familiarity	Yes	"Usually, review comments from owners/ppl more familiar with the code, are more broad in scope - they cover the change in question as well as how it aligns with current structure/logic."		punekaur	punekaur
6503782	Test		6	3		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				A defect impacts cross multiple parts of code which is hard to discuss w/ words in code review email. An change touchs other's code.	between 50% and 75% of the time	up to 25% of the time	Yes	I need first know the background and then review the changes to see if there is any issue.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			Choose the one worked in same component but not in same part of the code.	Yes	The familiar one may give some suggestion which can improve the performance and provide a better logic of code.	"I would like to mention that in a code review, there is a chance that we need change the author of a code review submission, and it's always painful for us, hope there will be an easy way to do that thing. (dixie)"	dixie	dixie
6503783	Development		5	2		5	Yes	"Avoiding build breaks / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				#NAME?	Never	More than 75% of the time	Yes	"I dont understand the data flow, control flow ,inherent assumptions and invariants of the system"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			#NAME?	Yes	#NAME?		vivekve	vivekve
6503784	Test		6	6		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"1. need author to change the design - this is easier to explain in person (usually) 2. need author to talk to someone else about code that will conflict or affect behavior of this review 3. when it's unclear how they tested the code (yes, one could ask this in the review feedback - personal preference...) 4. when it's unclear what is the intent of a piece of code (in relation to the review)    "	up to 25% of the time	between 25% and 50% of the time	Yes	"need to take time to understand the design.  for tests, may need to understand the area to evaluate whether test is effective (really doing appropriate checks, etc.)."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"automatically in most cases (area co-owner or file owner) if not automatically, pick person who worked most recently with the code"	Yes	"reviewer's comments are often more relevant for design / behavior-type issues, less of ""what if you did it this way"" without being familiar with all the issues (which can be a time waster)."			
6503785	Development		13	13		20	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Shared technical learning was tied for third.  The priority of defects vs. alternative approaches depends on the phase of the product cycle.			"Basically never (unless there's some LCA mess, documenting all my feedback / submitter's explanations in the tool would be preferred)."	Never	up to 25% of the time	Yes	Ramp-up takes time; new files are often larger changes.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Feature team aliases and owners.	Yes	"Complete understanding makes for better feedback; owners are likely to be the primary reviewers as they are more accountable / likely to be considered ""required"" on the review."	"FYI I'm not deeply aware of the ""team assessment"" use of the code review tools in terms of metrics; for me the tools are useful for understanding the code activity on the team and quality across various developers but my management are the ones who apply metrics.  I believe they use metrics as a source of discussion points but the simple numbers are not directly used for evaluation, which I agree with."	tybeam	tybeam
6503786	Development		4	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important"				#NAME?	up to 25% of the time	between 50% and 75% of the time	Yes	"Need to talk with the owner to understand the design, and then I could give reasonable feedback"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			- People who own the file/area - People who are familiar in this area - People I've talked with on code change	Yes	"If reviewer is familiar with the area, he would likely to spot areas that my change might not cover, or even regression bugs. If reviewer is not familiar, the chances are he might not give design feedback and mostly his feedback would be on coding style."		qicai	qicai
6503787	Test		5	1		20	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				can't understand the code	between 25% and 50% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503789	Development		8	2		15	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"					between 50% and 75% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"				Yes				
6503790	Development		5	4		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"1) The author of a submission prefers in-person code reviews. Some team members prefer in-person code reviews to doing them online. Over the past few years since we started using CodeFlow fewer and fewer people have opted for in-person code reviews as they've got used to the workflow, but sometimes in-person code reviews still happen. When they do, they happen in the reviewer's office and comments are shared verbally then attached to the CodeFlow review for tracking status. 2) There are significant design and/or implementation issues with the code under review (either because the code submitted doesn't match up with designs that were originally discussed, or seeing a full implementation of said design made more shortcomings/concerns easier to notice). At some point, linear comment threads attached to a single section of code aren't effective in addressing these issues and a verbal back and forth is needed. I've found this to especially be true for newer team members. 3) If, as a reviewer, I can't fully understand the code being submitted. Often I'll ask for clarification and based on the clarification I'll either add new feedback/suggestions or withdraw feedback/suggestions I had already posted.  Note: In some cases I'll proactively reach out to authors of code reviews because of some of the reasons mentioned above, but other times (generally depending on the personality of the reviewee) they will keep an eye on code review comments and seek me out to provide context/justification/etc."	between 50% and 75% of the time	between 50% and 75% of the time	Yes	"Yes - in some instances, I may be sought out for a code review because I'm an expert in a particular feature area (e.g. I can provide feedback on business logic or some particular approach). In others it's more along the lines of a ""dev hygiene"" or ""FYI"" type code review invitation. That said, in all cases I try to understand the code being added/changed to identify issues up front, provide feedback, or learn for my own purposes."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"When sending out code reviews I always include the following at minimum:  1) The tester I'm working with to deliver the feature. This is considered non-negotiable in our organization although the tester may not have much feedback depending on the tester and specific code review. 2) A developer on my team (not necessarily my direct team but within my dev manager's org) who is an ""approved code reviewer"" - i.e. someone who has a proven track record of writing quality code and solid understanding of some (not necessarily all) areas of the product and some horizontals. 3) The team's code review alias.  Beyond that, I'll frequently include others on the team who I have found to either (a) provide valuable code review feedback in the past (b) may benefit from knowing what's going on with my changes, including a direct dependency (c) have deep understanding in the area where I'm working, even if they aren't an ""approved code reviewer"""	Yes	"In general I've noticed a direct correlation between depth of comments in a code review and level of familiarity of the reviewer, but this is not always the case (certain reviewers on my team provide great and deep feedback even when they are barely familiar with the feature area).  To elaborate: in many situations, developers (or testers) who are only vaguely familiar with the feature area or don't have deep experience with it tend to leave comments which are superficial/cosmetic. Those who are more familiar with the area usually leave better feedback."			miritche
6503791	Development		4	4		8	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1. If I don't understand the changes or motivation behind the changes. 2. If I think that the overall design/structuring of the changes need to be modified in a considerable way.	between 25% and 50% of the time	up to 25% of the time	No	"If I am not familiar with the code, usually I look for generic code mistakes and depend on someone else to review the design/structure of the changes.  But when I am familiar with the code files, I think about the changes from all possible angles and try to make sure that all scenarios are covered in the changes."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Owner of the files that I am changing. Overall component/feature owner. Owners of the components that will be impacted by the changes.	Yes	"When the reviewer is familiar with the code the comments are much more deep and useful. People who are knew to the code, would just provide feedback around better readability etc."		vipulha	vipulha
6503794	Development		32	2		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"If the intent is not clear, or if they are very far afield."	up to 25% of the time	Never	Yes	because I don't know them	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			availability trust	Yes	better			
6503797	Development		7	2		3	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When the author has coded something very different from what I'd expect for that problem.	up to 25% of the time	up to 25% of the time	Yes	I have to read some of the associated/unchanged part to understand the changes.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People who work on similar area in other teams, fellow team members who have worked on this piece before, my dev lead, my test counterpart, a partner team member whose features I might be using."	Yes	"The comments from a reviewre familiar with the code tend to be more business-logic-oriented, while comments from others tend to be more design-oriented/best-practices-oriented."		sandeepl	sandeepl
6503798	Development		4.5	1.5		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Never had that situation	up to 25% of the time	between 25% and 50% of the time	Yes	Need to understand the context	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503799	Development		2	2		59	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				(1)There is a better way to implement; (2)The author does not understand the code branch and developing enviroment clearly; (2)The author does not follow coding guidelines.	between 25% and 50% of the time	up to 25% of the time	Yes	Need more time to understand the existing/new functions in those files.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			(1)People who used to be the owners of the files I'm modifying; (2)People who are working on or used to work on the same project with me; (3)People who are senior members of my immediate team; (4)People from the team which owns the code branch.	Yes	(1)They are more responsible/responsive and give more comments/feedback than others; (2)Their comments/feedback are more detailed and actionable; (3)They give more insights on leveraging existing logic/functions and improving the code quality.		linfangw	linfangw
6503800	Development		4	4		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"				No				
6503803	Development		13	4		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If comments are not precise enough, there is potential misunderstanding or need thorough discussin."	between 25% and 50% of the time	up to 25% of the time	Yes	Obviously to get acquainted with overall structure of the code	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Partners to my immediate component, good coders, buddy, previous experience"	Yes	"He knows the domain better, hence gives immediate geedback"	"Too many crashes, big dpks take indefinitely long (sometimes never complete)"	mezbi	
6503804	Development		7	2.5		70	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When there is insufficient context for the code review (review description lacking, unfamiliar subsystem, goal of changes being introduced is unclear, etc)."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	Harder to guage whether the changes being introduced in the review are doing what is intended and in the desired manner.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Identify owners/stakeholders of the subsystem or people who have recently worked with the affected files (via version control history). Alternatively, discuss offline with people who requested the change -- they may have insight into who is impacted by said change. Ultimatley, we want people who both, care, and are familiar with the affected section of the code."	Yes	"Difference is superficial/stylistic comments/corrections vs. discussions on the stability, correctness, and efficiency of changes being introduced."		aliberm	aliberm
6503805	Development		15	11		8	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Comment is not clear or not enough	up to 25% of the time	between 25% and 50% of the time	Yes	You have to check the files not inside CR	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			There are rules for each team	No	Each peerson will have their own CR style and point			
6503806	Test		5	1		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				There is a piece of code which needs to be improved.	between 25% and 50% of the time	between 25% and 50% of the time	No		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"				No				
6503807	Development		10	2		5	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes	Need to grok into the code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			There are more or less known experts for most areas of our code.	No				alexast
6503808	Other	Program Management	20	10		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"I normally don't, we could have meetings to resolve issues when two reviewers and or owners don't agree"	up to 25% of the time	Never	Yes	styles	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"senior, co-owners, teams with dependencies "	Yes	context		geiro	geiro
6503810	Test		5	2		20	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important"				1. unclear source code which need long discussion 2. un-acceptable source code which needs communication before deny 3. extended technical info learning from the author	up to 25% of the time	Never	Yes	"background learning for the un-familiar part, un-confidence, fear making mistake in comments."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"component owner, development peers, people in different discipline."	Yes	"very familiar people will give deep comments on the impact to the underline logic, and risk in unkonw area.  "		runli	runli
6503812	Development		15	6		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				The design is not clear. The comment is not clear. 	Never	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			The expert in the area The people who are familar with the code. The people who will consume my code.	Yes	There will be less questions for clarifying the design.	"(1) categorize the comments, like question or defect.  (2) provide more detail report.  (3) log the time for code review. then the cod review effort can be took into account. (4) auto reminder"	deyuan	deyuan
6503813	Development		5	5		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				1. Some unexpected design/structural disalignment that need debate 2. Too many violating of agreed coding guidelines 	between 25% and 50% of the time	Never	Yes	Just figure out how it works	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			1) owners as required 2) alias would be impacted by this change as required 3) team member worked in this area as optional 	Yes	they would give more design-level feedbacks than giving some cheap advice to address a code snippet 	"It will be great that a team can setup a list of code guidelines, that during the review, we can easily select which code violate the guideline. it would be more efficient to educate new team members."	dapeng	dapeng
6503816	Development		6	2		110	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				The implementation is generally broken. Design flaw. Need to understand the background/requirements.	up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who worked/is working on the codebase/project. People who is familiar with related technical things.	Yes	They will catch more issues comparing to others.	"How long would a code review take. How many people would be involved in a code review, does that related to the efficiency of code review?"	reyang	reyang
6503818	Development		10.3	10.3		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When I don't understand what a piece of code is trying to do, and it would be faster to talk in person than to do it through CodeFlow or email. "	up to 25% of the time	up to 25% of the time	Yes	"Because I need to look at the code surrounding the change, or code calling into/called by the changed function, to fully understand what's going on. With familiar code, I already know all of that, so I only need to look at the diffs."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"The team has a defined list of people. For the junior developers, it their lead. For senior developers/leads, it's the other senior developers/leads on the team."	Yes	"Reviewers that are very familiar with the code are more likely to be able to point out subtle bugs. For example, when functions have unintuitive behavior/bad names, a change may look good to a reviewer that does not know about these behaviors. But the code owner may know, and be able to point out bugs caused by them."	"For question #10, I replied that I only talk to the change author less than 25 percent of the time. But that is because usually, the change author has come talk to me *before* starting to make changes to my code area, so I already have a good understanding of what is going on."	yasufs	yasufs
6503819	Development		25	5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Rarely, but if the changes just don't fit with the way other pieces have been built. Also, it does not appear to work as it is intended to be used."	up to 25% of the time	up to 25% of the time	Yes	"Mostly I like to see the bigger picture, I take it as a time to learn something in our code base I have not used."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			All team members on team related changes. Several common code owners on common calss changes. Specific content experts	Yes	"Specfic syntax changes, method/parameter naming changes. Ideas for making something more generic."		kseifert	kseifert
6503820	Development		4	1		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance"				"Need to understand the context of the code review, the code review only show the changed files, not include files without change"	between 25% and 50% of the time	More than 75% of the time	Yes	Need to understand the code context	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding"			The people understand the code most	No		Code flow better support review history. (i.e. I could get all the review I have add comments and all the review I send easily)		chawu
6503821	Development		6	6		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					between 25% and 50% of the time	Never	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503822	Development		17	5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"only if a comment gets rejected as ""won't fix"" w/o reasonable explanation"	up to 25% of the time	up to 25% of the time	Yes	takes more time to grasp at least basic idea of what's going on	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"as a lead I have two reasons: - balancing the load is first reason, if a person is loaded with high priority work, I'd rather put somebody else as required - secondly, if I want somebody to take ownership of a piece of code I put them as required otherwise: - familiarity with the code to speed up review - reviewers from other teams if a shared library is modified to raise awareness in other teams"	Yes	feedback from people familiar with the code is more detailed and generally is more valuable		maklep	
6503823	Test		5	0.7		10	Yes	Finding defects/bugs / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important				Something cannot described by several sentences	between 25% and 50% of the time	up to 25% of the time	Yes	It takes more time to understand the change context	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			The code owner. People who may impacted by my change. 	No				dazhou
6503825	Test		11	3		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"If there is a fundamental issue to discuss, one that doesn't map to merely one or several lines of code (for example, to discuss concerns about the overall design that managed to go undiscussed prior to implementation). Also, any time that code review comments are going back and forth in an unproductive manner."	between 25% and 50% of the time	Never	Yes	More time needed to gain a basic understanding of the code before proceeding with the review.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Who are the code owners/stakeholders. By convention we also include the team alias as an optional reviewer for transparency.	Yes	Higher chance of finding bugs and code issues stemming from a misundertanding of the original code. At times these types of issues could also be avoided if code is more readable and better documented.		robvanw	robvanw
6503826	Development		15	10		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important"	To help the team maintain good design and code quality.			"For new codes, need to talk to developer in person to understand the code structure and major design considerations.  For some design / code logic questions, need to talk to developer in person to find which design is better."	up to 25% of the time	between 25% and 50% of the time	Yes	"I need to understand what is the effect of the code change and what is the side effect of the change. To archive that, I need to understand the codes related to the change. It takes more time to understand the unfamiliar codes as every developer doing things differently."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"The feature owners, field experts, team members. Most of the time, there is also a team DL for code review."	Yes	"The owner or who familiar with the code will give more commens in the code design and logic, as well as other best practices."	The reseacher should talk to developers in person.	shdong	
6503827	Test		12	6		70	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Different opinion of the implementation	up to 25% of the time	up to 25% of the time	Yes	Need to understand the whole picture of the implementation	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People in the related teams	No				
6503828	Research		12	7		10	No	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Don't understand some aspects of the code, especially complex algorithm."	up to 25% of the time	up to 25% of the time	Yes	"Need to understand not just the changes, but also the surrounding code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"People who own the code, who work with me, or those who are available."	Yes				paulhsu
6503829	Development		0	0		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				have concerns with his/her code or do not understand his/her code	up to 25% of the time	up to 25% of the time	Yes	Spend some time to understand the code.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"code owner, senior engineer worked on this area in my team, and people who is affect by my modification"	Yes				wzhan
6503830	Test		15	12		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"1. If the author has not provided enough background, fix info, or inline comments for their changes 2. if someone else is making similar changes.  It's just faster to discuss how to proceed in person"	between 25% and 50% of the time	up to 25% of the time	Yes	"Takes more time to understand what the impact of the changes may be, and what additional dependencies may be broken"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"people with experience in that area, or consumers of the code.  "	No			cwarren	cwarren
6503831	Test		6	4		10	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				E.g. I don't agree the fix/change to some issue. And I need to write more message or add attachment to show why I don't agree.	up to 25% of the time	up to 25% of the time	Yes	I need to check the reference of the files that I am not familiar with.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The files owners, the compoment owners, my dev/test partners."	Yes	They know more dependency of the code. And they may have some ideas/suggestions with big scope.			
6503832	Development		20	12		70	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When I disagree with the overall approach of the change (or part of the change), or when effective communication can't be done in an ""email-like"" fashion"	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"Kinda obvious, no?"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People who own the code, test owners, people who are proficient with the particular technology being used, people I trust in general"	Yes	Comments tend towards the design behind the change more than technicalities. Sometimes comments are wrt some personal/local convention that the owner wants to maintain.		zivc	zivc
6503837	Development	4	6	6		15	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"senior memeber, the owner of code file"	Yes			leow	leow
6503839	Development		15	9.5		6	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				- when more context is necessary to understand the changes being reviewed - when there are fundamental differences of opinion on aspects of the changes - when suggestions/comments are sizeable in terms of length or effect - i.e. it's easier to discuss in 	between 25% and 50% of the time	up to 25% of the time	No	"I decline reviewing significant changes to code I'm not familiar with. Of those that remain, fairly often the changes are simple enough/self-contained so as to make reviewing easy.  "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			#NAME?	Yes	"Feedback from reviewers unfamiliar with the code is usually generic, and usually refer to style, spelling, comments and/or asking for clarifying comments. Sometimes these comments result in 'won't fix'-type responses.  Feedback from reviewers familiar with the code is terse, to the point, and is usually addressed in further changes ('resolved'-type response.)"	"It would be great if one could 'park' code reviews and re-submit or link to existing code reviews from different enlistments. For instance, large code changes (feature first-implementation type work) receive significant feedback, and there is a length of time between iterations. Easily finding and reusing the original code review request helps with preserving the context and ensuring continuity.  This would also help with moving changes between branches/clients."	dragosav	dragosav
6503840	Test		2.5	0.5			Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important"				"If I need to make a comment in codeflow that might take more than a few lines, I try to talk to the person either through chat or in person"	up to 25% of the time	up to 25% of the time	Yes	I try to get some context before I begin reviewing the changes	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding"			"1) owner/owners of the code 2) if its a test case, the product developer 3) At times, someone in a mentor role"	Yes	They are more about alternate and better approaches rather than readability			
6503842	Test		6	2		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				1. Multiple iterations of a CR 2. Urgent review needed	up to 25% of the time	up to 25% of the time	No	"Since the review is only for the highlighted code changes, the attention mainly is drawn to the modified code. Also, the feature owner also is added to the review alias to make sure overall logic is understood."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			"1. Feature crew including the lead 2. Feature leads with which the component is integrated 3. Global test alias as an FYI on the change 4. If its a product code change, include the dev team too"	Yes	Comments on the tool are subtle and real feedback is given in person	"1. CodeFlow is of no use if I want to browse through the active CR submissions waiting on me or the CRs I created. The only way to view these dpks is via email which is a huge dependency. CodeFlow should have a ""Start screen/dashboard-like"" experience at the time of launch, displaying the active CRs submitted by me and the ones awaiting my response.   2. While reviewing dpks, there should be a Home button or equivalent to take me to Start screen/dashboard. In this way, when I am done with a given CR, I can go back to the other ones via the dashboard. Today, it requires re-launch the tool for every new CR from emails.  3. Comments are tied to the line numbers and not the actual code lines. Thus, it gets very annoying with iterations containing code additions/deletions "	spanb	spanb
6503844	Test		1	1		3	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Large design changes or major code refactoring	up to 25% of the time	between 25% and 50% of the time	Yes	"Cannot simply look at code changes to see if they are ok, have to look at entire files and make sure they are designed and coded well"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Group of ""virtual"" team members who work on the same projects as myself"	Yes	"Better comments, more detailed feedback and finds more bugs when the reviewer is familiar with the code. "	Use of tools such as CodeFlow help enable tracking of code reviews and thought process/design decisions. Need a way to improve syntax highlighting and readability for large code changes	jordansh	jordansh
6503845	Test		4.25	4.25		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Too many comments / misunderstandings on what is being said in the comments  If the code is bad or the approach is no longer applicable, and the review should be pulled (or go in a completely different direction)"	More than 75% of the time	between 25% and 50% of the time	Yes	"It's new code, and I'm trying to learn what the person is doing and/or why they're doing it.  Then I read the description to look for glaring holes in their logic around it."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I choose my feature owners as well as people who are familiar with the code - we always attach the Test team's alias (I'm on the test team) for general awareness so everyone knows what everyone else is currently working on at any given time (great for dependencies).	Yes	"It really depends on the reviewer, but usually they're more adamant on having changes made their way to fit with their styles and standards (as opposed to different or better approaches)  They're also usually much more detailed since they know what's going on.  Sometimes a backstory is presented on why things are done a certain way and the pitfalls of a specific approach."		algore	algore
6503846	Development		4	4		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"1, if the code is difficult to explain. 2, when my comments are difficult to explain."	up to 25% of the time	between 50% and 75% of the time	Yes	because I am not familiar with the codes.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Dev Lead and people who is relatively familiar with my codes.	Yes				haitaog
6503847	Development		12	12		38	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important"				code not readable or too messy to review	up to 25% of the time	up to 25% of the time	Yes	spending more time to understand the change and whether it is a good change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			code owners; senior people in the team; people who give meaningful review feedbacks	Yes				junhuaw
6503857	Development		10	2		25	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"1. Whenever any design change occurs during the code review, we have to talk to the author 2. In case of multiple iterations, generally if it more that 3 3. In case of description/comments are not proper "	up to 25% of the time	between 25% and 50% of the time	No	"Code being new or old doesn't matter, what matter's is that whether you know that area or not."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Include those: 1. Who owns the code 2. Who own the product 3. Expert of that area or domain 4. Dev Lead 5. Optional - whole team	Yes	1. The assessment of side effect will be better 2. Alternative solutions provided in many cases		manojgup	manojgup
6503858	Development		5	5		1	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When I can't understand the design logic in the code	up to 25% of the time	up to 25% of the time	Yes	"Other than review the grammar, I need more time to understand the logic"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Dev peer + Test owner + Code review group alias	Yes	The reviewer who is familiar with the feature can give more commonts for the design and logic. And reviewer who is not familiar will focus more on the grammar issues.I'll get more confidence if there is at least one expert reviewed my code.	"From team wide, we are looking for a way to value the code review quality, like how many comments are valid, how many bugs are found by code review..."	shanliu	shanliu
6503859	Development		8	2		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important"	n/a			if the logic implemented is not clear enough	up to 25% of the time	between 25% and 50% of the time	Yes	Mostly to understand logic 	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"person who familiar with the code, feature area"	Yes	"deppends, some times geetings more comments that are not related or no comments at all."	n/a	n/a	
6503861	Development		12	6		12	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important"				when changes are to areas of the system that i am not familiar with - in that case am not sure of the impact of a change to a few files	Never	up to 25% of the time	Yes	If not familar need to get context - often the code review doesnt have this context	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"area owners, responsive devs"	No		would be nice to see code diffs in context (ie. navigate easily to other files)	rakelkar	rakelkar
6503862	Development		11	6		10	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When I can figure out what is happen in 5 minutes	More than 75% of the time	between 25% and 50% of the time	Yes	"usually you have to get a lay of the land, and sequence of events before you can truely review the code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"based on developing a backup technology owner, then who can do it with the smallest impact time wise."	Yes	"without understanding comments are usually questions with superfishal fixes, like codeing standards."		wesbarc	wesbarc
6503864	Development							"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"					between 50% and 75% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"				Yes				
6503866	Development		12	5.5		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If it's not clear what the goal of the code change is.	between 25% and 50% of the time	up to 25% of the time	Yes	need more time to understand if the code change is correct	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I select people who are familiar with the area or have touched that part of the code base before	Yes	more detailed/specific feedback from people who are familiar with the code		joannez	joannez
6503867	Test		14	13		11	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				when the code is completely different from expectations; when major coding standards are not being followed; when the code is not documented nor self-describing so as to require asking the coder to explain their logic or define what a macro does or the like.	up to 25% of the time	up to 25% of the time	Yes	I scrutinize new files.  I make assertions about the files that I am already familiar with (trusting to only have to look at the changes lines as opposed to all lines).	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"feature team members; direct, engaged leads/managers; partners; original code owners; mentees"	No			rmyers	rmyers
6503868	Test		2	2		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	Learning the code Learning how to fix issues by doing CR of the people who are senior in the team			If the change is going to break something like the functionality If the person doing the change has misunderstood the present code and made fixes accordingly If I have better suggestions for the fixes	up to 25% of the time	Never	Yes	Since it is not my territory	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Owners of the related features Also, all the people who are going to be affected by the change senior members"	No				insingh
6503869	Development		6	6		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"	"There is a DPK link pointing to the server, when I send the code review, I would not worry about losing the changes."			"In the condition that  1. I do not understand the code. 2. Big changes are needed for the code, for example, architecture change."	up to 25% of the time	between 25% and 50% of the time	Yes	Need to get familar with the code.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"just use the team alias, or people who recently made changes to the files."	Yes	Owners focus more on the whole architecture.			yinx
6503873	Development		10	8		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Not much comments and monolithic procedural code. Discussing pros and cons of different approaches.  Integration issues in case of parallel development. 	up to 25% of the time	between 50% and 75% of the time	Yes	"If we already know of the component design it helps, otherwise to takes time to understand.   Other important thing is also we don't have any inteliisense (All we have is max keyword highlighter) which makes moving through the code and understanding difficult. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			The ones with whom our components needs to integrate (or work) with. This gives us the better ROI. 	Yes	"Completness. People not familiar used to give only local comments (like style, guidance, better API etc...) which can be IMO automated with the help of tools.   I still believe that if we enable good Intellisense then even these people will get insights and can give more valudable feedback. "		kirankk	kirankk
6503874	Development		4	4		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Mostly when the low level design needs change, it is required to talk to the person, otherwise it takes a large number of comments/iterations to get those changes. Another case when in person interaction is required is when the code review is time-critcal and we cannot afford to go through cycles."	up to 25% of the time	between 25% and 50% of the time	Yes	"Especially with new code, it takes a while to get the hang of the overall control flow and abstractions. Generally, there is a ramp-up time in getting yourself familiarizing with the code before you can give meaningful comments beyond coding practices."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Mostly feature crew members familiar with the feature, previous owners of the code being modified, subject matter experts."	Yes	"Mostly the people very familiar with the code base have a discussion about the inner workings and better alternatives there, while people less familiar just focus on readability and associated aspects."		upendras	
6503875	Development		9.5	7		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1. When the author does not mention what the bug was and how this is fixing the defect. 2.When the change is very large more than a couple of 100 lines of change. 3. When a large change is without any significant comment.	up to 25% of the time	More than 75% of the time	No	1. The review time is prortional to the scenario/technology which has been changed. If the a technology which i am not familiar with has been used in that scenarion i would need more hand holding to figure out what each api is doing.	"Avoiding build breaks / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			1. Owner of the code. 2. People who would have used the techology i have used in the current change. 3. Owners of the api which i have used to figure if the usage is correct.	Yes	"1. People who are familiar suggest changes for the better or suggest alternatives for a better solution. 2. People who are unfimilar either have queries about how the solution is working, or a completly orthogonal suggestion about how the code should actually be done which may or may not be feasible to implement dependening on the timeline of the project"			
6503876	Test		3	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When seeking clarifications for a complex piece of code. Codeflow comments make it harder to have real time conversations.	between 25% and 50% of the time	up to 25% of the time	Yes	"While reviewing the actual code change maybe easier, it would be fairly hard to understand the collateral of the change and the choice of design in the change."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Test Case owner, Test Library owner, Common code reviewer alias, Subject Matter Experts"	Yes	Assertion of their view point.	 - Having lync integration would help getting hold of folks for instant communication.	raviup	
6503877	Test		4	11		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When I fully do not understand why he needs to make this change or I feel it is more easier to talk directly for some big change	up to 25% of the time	Never	Yes	"For the new files, usually the author is the guy who understands it the most. Usually, I just ask questions for the part i do not understand or ask to put more comments so that it could be understandable in the future. "	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			The persons who originally author this piece of the code. The persons who are responsible for this area.	Yes	They know the history and know how the code is used in other places. They can suggest something I overlook at the first. 		brianxie	brianxie
6503883	Development		3.5	2		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important"					Never	up to 25% of the time	No		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				
6503885	Development		7	7		18	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				1) Avoid multiple iterations and arrive at a consensus 2) Evaluation of an entirely different approach than the one being worked on - more for a personal touch.	More than 75% of the time	between 25% and 50% of the time	Yes	1) Context buildup for side effect analysis for state changes 2) The coding conventions being followed in the file (specially for ported/legacy code)  	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1) Subject matter experts 2) Consumers of the common code when required 3) Backup owner for the code 4) As needed when broader awareness of code is needed	Yes	"Better comments around core logic, state changes rather than syntactic structure of the code."		avinashp	avinashp
6503887	Development		4	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"1. Major bug in design/code. 2. Code is very unclear. 3. If I set the status to waiting, I either send a mail or talk F2F "	up to 25% of the time	Never	Yes	"As the question stated, I need to understand the file context (but most of the time it's about 30% more time than reviewing familiar code)"	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			We have a DL for code reviews + my team members	Yes	"When an owner review a familiar file, he will give more comments (more chance for a waiting status)"	Code reviews only works if the team has an expert (care + knowledge) most team just use it as a rubber stamp. If code analysis is not on (style cop + fxcop) %70 of the comments in most teams (I've been at 3) are about styling and conventions.	lironle	lironle
6503888	Development		8	1.5		30	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				when there's a relatively big misunderstanding (on my side) owhen i think there's an inherent mistake in the changes	up to 25% of the time	up to 25% of the time	Yes	"it takes time to understand the retionale and the suggested flow, getting to know the new (to me?) code"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"i always choose the test counterpart and the dev reviewer that's mandatory in addition, people who own the area or that have very familiar with it"	Yes	usually the feedback is greater when the area is owned by a person		shmike	shmike
6503889	Development		3	3		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"Mostly, if code is not clear to me or code is doing something for which I have a possible better way to suggest."	up to 25% of the time	between 50% and 75% of the time	Yes	"Coz I have to understand the design and the feature. Also, think about alternatives."									
6503890	Test		15	3.5		25	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				#NAME?	Never	Never	Yes	It takes longer to understand the unfamiliar/completely new code and the context.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Code Review is always sent to team alias, additionally FC members are copied and marked as required reviewers."	Yes	"Person familiar with code gives comments on code design, algo, context etc. Others will usually give comments on code readability, coding guidelines, general coding practices etc."		nejain	nejain
6503891	Development		5	5		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"More often than not, when I need to talk to a fellow developer in person, it is for 'design' (versus just 'code') related discussions. "	up to 25% of the time	between 50% and 75% of the time	Yes	"To be able to give high quality comments as part of the CR, I need to spend time myself trying to understand the existing code that's being modified thoroughly.  This means I need to debug the code myself, look at history of related checkins, etc to do my homework well even before I can give my first comment.  All this can be partly solved if the person sending his code for review does his bit by detailing what a person not very familiar with the code would need to be able to do a high quality CR, but this is not always efficient for the team as a whole.  "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"These are the people I select for the CR: 1. component/code owners 2. folks who I think can scrutinize my code well and sign off 3. folks impacted by my change 4. folks who should know what I am changing as an FYI  For trivial code changes for fixing build breaks, it doesn't really matter who I am adding to the CR. "	Yes	"The quality of comments are class apart in these 2 cases.  If a reviewer is not familiar with the code, his comments are more around the following: 1. Team/language coding conventions/styles 2. Comments aimed to improve readability (variable names, spacing, etc)  If a reviewer owns the file/code/component, his comments are of the following nature: 1. The 2 categories of comments mentioned above 2. Design flaws 3. Non trivial bugs in code   "	"I am not sure if this is relevant to the scope of your research, but I would mention it regardless.  As per the current development practices, everything that gets checked in scrutinized/reviewed. This means there are extensive design discussions wherever required. However, all this is lost once the code is checked in. If I were to look at the discussions that happened, and why was something done in a particular manner when a piece of code was checked in a few years back, I need to do one of the following: 1. look at the checkin description (in source depot, TFS, etc) 2. contact the code owner (but he might not be in the same team or Microsoft, anymore) 3. reason it out myself.  If the person who checked in the code in the first place had checked in the detailed design discussions that happened as part of the checkin description, I would be a happy person. But it doesn't always happen as it is not enforced by the tool and because sometimes it is just not possible (example: cases where i have a picture capturing the design, or a document may be and I can't add these files as part of the checkin description).   Letting users checkin metadata - design documents, email threads, etc - along with the code could be a good way of solving the problems listed above.  Just a vague thought :) Not sure if it's relevant here!"	shrirs	shrirs
6503892	Development		14	14		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	Ensuring that there are other pair of eyes looking at the changes and confirming or giving different perspective to the changes.			If the overall approach in the changes is not understood or the comments are not good enough to explain the changes.	up to 25% of the time	up to 25% of the time	Yes	To understand the overall flow and ensure that the changes are correct.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Leads, senior devs who are familiar with the code, peer devs in the same feature crew, QA if applicable."	Yes	"Those who are familiar will have move detailed questions/feedback about the scenarios. Those who are not familiar will typically give feedback on the coding guidelines/comments/code duplicacy, etc."		neerajar	neerajar
6503894	Development		3	3		100	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"There is a potential bug, or better solution."	between 25% and 50% of the time	Never	No	"Normally each owner will review each part. Otherwise, it will take a lot of time to understand the whole flow."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Familiar with the part I changed.	Yes	"Sometimes, there are some tricky logic we didn't considered in the change."	"Once the service is down, we can still do codereviews by someway. Currently, we can't."	chyu	chyu
6503896	Development		8	7		28	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"	Coaching junior team members in writing effective code. Evaluating how the feature is coming along. 			Unclear code flow. Sometimes it is better to talk to the developer about the code change then write big emails.	More than 75% of the time	More than 75% of the time	Yes	You may not be familiar with code flow.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Familarity with the code\ownership Developer reputation Tester of the code and sometime PM 	Yes	Better understanding of the code flow and history helps when you are making changes on ancient code.	Is a way to track developer karma (like how many issues were found after the developer reviewed the code and was checked in). This would require very tight integration with the lab build process an deployment (and or test run).	sanjayg	sanjayg
6503897	Development		24	5.5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				- When understanding isn't reached quickly - When discusison gets complicated enough to require a whiteboard	up to 25% of the time	up to 25% of the time	Yes	Get familiar before commenting would add to the discussion	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			- Ownership of familiarity with code I'm changing - Understanding of the scenarios involved	Yes	Comments from those less familiar with the code tend to be more mechanical and have less value.			
6503900	Development		31	6		30	Yes	"Finding defects/bugs / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				questionable or unclear coding practice 	More than 75% of the time	up to 25% of the time	Yes	different coding styles/standards on different projects. hard to understand a single change in the context of the entire system. different coding language (C++ vs. C#)	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			we have a list of aliases all CRs are sent to	Yes	"unfamiliar reviewers comment on style, typos/grammar in comments and may suggest ""we use [some cool feature] on our product that you should consider.  people familiar with the product are aware of code NOT IN THE REVIEW that might be impacted."	you didn't ask any questions about Code Flow.	donfr	donfr
6503901	Development		25	10		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Typically when e.g. I think that there is a better design approach to solve whatever problem the code need to solve. 	up to 25% of the time	up to 25% of the time	Yes	"It's harder to put such files into their context. Would help a lot if the files could be inspected from within visual studio where features like ""goto definition"" are available"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I generally send to the devs in my immediate workgroup and related workgroups	Yes	If the reviewer is more familiar with the code then he can suggest alternative approaches to the design.		jfalkebo	
6503902	Test		1.5	1.5		2	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"When the overall design or implementation is not clear to me, I will want to talk in person."	up to 25% of the time	between 25% and 50% of the time	Yes	Often I would need to read a little bit of the new files to get a general idea of the impact of the change. 	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"I would normally include tester of the feature area. If it is a common tool or library change, I would include my Dev peers. "	No		"When the changes are big and complex, sometimes CodeFlow will not show the changes in a good way. I would group the changes badly. "	tiano	tiano
6503905	Development		25	10		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Keeping track of comments and rationale on code changes / First Most Important"				CodeFlow almost eliminated this need. We can solve most of issues via CF.	Never	up to 25% of the time	No	Our application is written using same standards and module architecture so it's usually not a problem for code review.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"By team, expertise and feature specific agreements"	Yes	Get more functional insights from people familiar with area/module			
6503908	Development		16	8		9	Yes	"Avoiding build breaks / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"	Making sure that the developer does enough testing. This is enforced by asking the developer to list down all the test cases that he has run before sending for code review.			When the change is not clear and needs more information. This generally happens when the code changes are huge.  This can also happen when some of the comments are not closed even after 2-3 iterations.	up to 25% of the time	up to 25% of the time	Yes	As it takes time understand the surrounding code and how does it impact different callers and various scenarios around them.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"People who are familiar with that code, senior people in the team."	Yes	"It will be complete and thorough and will get comments related to alternate ideas, missing of some important scenarios. "	None.	ramamar	ramamar
6503910	Development		12	3		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				If we're in a strong disagreement under the code changes in question	up to 25% of the time	Never	Yes	It doesn't hurt to understand what is the code being changes is doing in the first place	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Folks who own the code plus immediate team members	Yes	"People not closely familiar with the code typically look at things like style, readability etc., since it's hard for them to judge the correctness of the change in the view of a bigger picture."		dshapor	dshapor
6503911	Development		7	7		6	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When we need to discuss the design or other such high level changes. Doing them over chat would take numerous iterations. When we need a very fast turnaround time.	up to 25% of the time	between 25% and 50% of the time	Yes	"If I am not familiar with the files, then 1. I need to repeatedly scroll up and down to find out what function is getting modified and what the older logic is 2. I need to search for definition of functions which might seem relevant and go through them too to understand the logic."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Defined by the team. Usually each area is assigned a primary and secondary owner during development stage.	Yes	"For trivial feedback, there isnt lots of difference. But for design or other such indepth feedback there is a difference.  When people who already know the code point out an issue, its usually something I should fix.  While for people who point out issues without prior knowledge of the file point out issues which are there because its a hack/workaround/.... Frequently the result of this feedback is to add extra comments to make it clear why we are doing so."		sivaramp	
6503914	Development		14	9		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the changes are very complicated and the description does not include other approaches that were considered.	up to 25% of the time	up to 25% of the time	Yes	Takes me time to understand the entire flow.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Owner of the code or dev lead if there is no clear owner.	Yes	Better suggestions for alternative solutions from code owners.			vijayko
6503915	Development		5	2		15	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"							Yes										
6503916	Development		7	7		4	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				General overall design of the code If there are two many comments making the code review difficult to read 	up to 25% of the time	up to 25% of the time	Yes	"If the code is unfamiliar it takes longer to determine good design, suggestion on better designs etc."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Primarily team members or ""strong"" developers on other teams."	No				aheskin
6503918	Management and Administration		20	13		7	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"Complex or embarrasing feedback on the review, alternative approaches"	up to 25% of the time	up to 25% of the time	Yes	Especially new files represent a challenge due to the sie of the diffs and the likelihood of issues.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Team policy, partners in other teams, stage of the change (under discussion/for submission)"	Yes	"Familiarity yields better comments, lack of familiarity often results in uninformed suggestions or questions for clarification."	Tools for understanding/reading code are very much in their infancy and need improvement badly :)		rolandr
6503919	Development		3	3		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				disagreement on review comments complicated change that needs clarification high risky change that needs deep understanding	up to 25% of the time	between 25% and 50% of the time	Yes	understand the logic and risks from scratch	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"required: code owner, dependent feature dev owner, dev lead optional: senior peer, entire immediate team (including test and pm)"	Yes	potential risk / bug coding style	code review outside corpnet is not very convenient	zichsun	zichsun
6503922	Development		15	11		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Complex changes that aren't easy to explain with just comments.  Or if it is just faster to have a quick conversation, outlining the changes."	between 50% and 75% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Area knowledge.	Yes			wknoll	wknoll
6503925	Test		4.5	4.5		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When there is an issue that can't easibly be resolved.		between 25% and 50% of the time	Yes	Because I have to ramp up on the codebase	"Avoiding build breaks / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Usgin a DL and my immediate team and branch ownership	Yes	Those who are more familiar give more detail		gearmah	gearmah
6503929	Test		5	3		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				1. not understanding the code. 2. not agree with the changes	between 25% and 50% of the time	between 25% and 50% of the time	Yes	casue i don't know the code and have to understand it	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			i send the cr to the peaple that are working in that area	No				yuvalt
6503930	Development		8	5		7	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance"				For some background stories	Never	between 25% and 50% of the time	Yes	Make sure I understand that change	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Owners or someone who should take a look.	Yes	Actionable or not.			bingli
6503931	Development		6	6		9	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 25% and 50% of the time	between 25% and 50% of the time	No		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"				No			amitku	amitku
6503935	Development		5	5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1) When i need to explain the scenario that were not considered in the changes.	between 50% and 75% of the time	up to 25% of the time	Yes	Generally the code flow is not proper. Mostly method names are not proper or they do extra thing as compared to their name. Some times we need to have named params to understand what the paramter is for. Using of var for return type from a method is not readable. we have to go to and fro from the caller to callee to understand the flow. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			1) Owners for the code 2) Someone senior in my team.	Yes	Mostly the scenarios are brought up. Then coding guidelines.	One big help would be to have F12 kind of feature into code review.	siddhap	siddhap
6503939	Development		9	7		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important"				"If there are non-trivial changes to make, or if the change itself would justify the opportunity to make a major restructuring or a different approach."	between 25% and 50% of the time	up to 25% of the time	Yes	I first need to understand the code well enough before knowing whether the changes make sense or not.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			If I'm the code owner I look for the next best co-owner. Else I look up for one or two members of the owner team plus a member of my team. For major changes I try to include a principal-level dev that has visibility of the entire product.	Yes	Usually the comments are much more constructive and about less petty issues.	"I am not a big codeflow fan. I see the value in some cases, but I feel the tool and the process flow is a bit overblown for the majority of reviews."	rafaeltc	rafaeltc
6503941	Test		12	12		50	Yes	"Helping improving the development process in general / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				#NAME?	between 25% and 50% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes			linliu	linliu
6503944	Test		8	3		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				If I'm unable to understand the submitter's intentions with a given change.	up to 25% of the time	between 25% and 50% of the time	Yes	"Takes longer because I have to read more of the code to understand what's going on, and not just focus on the actual changes."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code owner if it's not my own code, otherwise people from the same feature crew."	Yes	More constructive feedback.		skjalga	skjalga
6503947	Test		7	7		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When I am not sure what parts of code is going to do.	up to 25% of the time	between 25% and 50% of the time	No	because I have already understood the basic idea of the codes.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"people who own the codes, people who are familiar the codes, people who own the related codes, people who have free time"	No				kaeu
6503949	Development		14	5.5		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				Face-to-face talk may help in the following situations: * Sometimes I need to know more about the background/scenarios of the coded feature. * Sometimes we have different opinions on some design or implementations that may require potentially long discussions or several rounds of debates.	up to 25% of the time	between 25% and 50% of the time	Yes	Need to know some background information.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"* Co-owner of the same area. * Lead * SME * ""Upsream/downstream"" of the code"	Yes	* Can identify key issues or incorrect approaches immediately * Can give important suggestions * Can raise reasonable concerns or questions		yuhuan	yuhuan
6503953	Test		17	9		9	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"I'm a lead, so I use CR to be able to keep track of what my team is developing, get a hands-on knowledge of the code they are developing and to be able to evaluate their capabilities. I also use code review as a way to be responsible for the quality of the code my team develops (i.e. identify problems and prevent them during the coding phase)"			"The context of the code change (if it is not clear) and issues I find. Many times this can be done using codeflow, but sometimes it is easier to do it F2F."	up to 25% of the time	up to 25% of the time	Yes	"because during code review I focus on the changes. When the code is familiar, it is easy to understand what the change is. If the code is unfamiliar, it takes time to understand what the function does and only then I can understand the meaning of the change"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			based on ownership of the feature and a larger peer group that is optional	Yes	people who are familiar with the area tend to give comments on how the change will affect the end product more (rather than focus on the actual coding practices)		oriy	oriy
6503958	Development		6	1.5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If i have some additional information, such as alternatrive fix or maybe i saw this bug already fixed somewhere else."	up to 25% of the time	between 25% and 50% of the time	No		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I try to pick up people, who are familiar with code area i am working with."	No			oleks	oleks
6503960	Test		5	1		8	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				can't open in code flow.	up to 25% of the time	between 25% and 50% of the time	Yes	It takes time to get familar with the code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			As process required.	Yes	More or less.	How could we summarize the comments? We want to export all comments and replies with the status including resolved or won't fixed before close. This really important for improve team code quality and helpful to us.		jinghuiz
6503961	Development		2	2		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If I dissagree with the change or if the change contains bugs whith I spot during code ireview. 	between 25% and 50% of the time	up to 25% of the time	Yes	I need to look through the unchanged parts of those files as well. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Sends to entire team. 	No				olanat
6503963	Development		19	5		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance"				When a lot of changes are involved or when there is a design change.	up to 25% of the time	More than 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Other members on the team who are directly familiar with the work area or who can contribute in a meaningful way	Yes	I tend to get detailed comments.	Can we include some kind of metrics as part of CR process?	amrutk	
6503972	Development		5	5		18	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				* When there is a different means of accomplishing the problem which may not have been considered. * When we differ on code readability concerns - and I believe that new code has the potential to reduce readabiliy. * To understand the rationale behind a design decision or seek clarification on code.	up to 25% of the time	up to 25% of the time	Yes	"Obvious reasons: it takes time to understand the code, related dependencies and how it interacts with other components and if contracts made are like to be broken in edge cases.  Also, requires tracking changes with current enlistment (a lot of following code around through View Definitions) which consumes quite a bit of time."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"* People who are aware of what I'm working on and are informed on the change/design et al. * People who own or have worked on the code section in the past. * People who own related components that this could potentially break. * Anyone else who can find bugs and is likely to provide input :)  CC: * Members of the feature crew * Entire team for tracking, input "	Yes	"More input in terms of cases to watch out for, suggestions for refactoring where layering is broken by the new change and identification of potential bugs in fringe cases not considered.  Code review can also result in bugs/poor readability etc being identified in existing code (not code which has been changed)"		arisen	arisen
6503974	Documentation and Localization		14	12.5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance"	We use code reviews for string reviews as well - editing strings in-context to save on later translation cost.			As part of the code review? Hardly ever. Only if it is completely unclear what the code is trying to do. But we talk every single day.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"Our code base is huge, and when I review a change in an area that I am not familiar with, I need to spend time figuring out the architecture."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			N/A	Yes	Reviewers who are not familiar often ask more questions for clarification.			edupont
6503978	Test		22	16		23	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				If they don't understand the comments.	between 25% and 50% of the time	between 25% and 50% of the time	No	I generally focus on the areas that I am expert in and provide the right ideas. And then try to understand the code changes and ask questions accordingly.  	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"1) People in the work group, dev and test 2) People that has expert in the area of changes 3) People that can provide good code feedback 4) People that I want to share the knowledge in product and in coding."	Yes	They can provide good feedback to make sure the changes are correct or if there are other better approaches.	How to make code review easily viewable rather than based on author invitation only? Code Flow is a good in the right direction.	conradc	conradc
6503981	Test		2	2		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				.	between 50% and 75% of the time	between 25% and 50% of the time	Yes	.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The owner of the files, the feture members, mandatory reviwers in our team."	Yes	.	.	inbarm	inbarm
6503983	Development		4	0.4		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				To understand the rationale behind a given change.	between 50% and 75% of the time	More than 75% of the time	Yes	You need to get familiar with the topic at hand and with the functional requirements.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			At least one developer and one tester (often 1 or 2 extra people). The whole dev and test team are also get the code review as optional reviewers.	Yes	Someone familiar with the files will be able to provide in depth comments.	"From a functionnal point of view, better integration with the version control and IDE tools would help being more productive. But I doubt that this matters from a research point of view :-)"	anceller	anceller
6503986	Development		10	2.5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1. Very complex changelists 2. To understand completely the specs behind the changelist 3. If the change seems extremely unreasonable to me	between 50% and 75% of the time	between 50% and 75% of the time	Yes	"Takes time to figure the flow of the code, its structure and coding standarts."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Owners of the code, other experienced developers "	Yes	comments would usually be more relevant for the complete flow of the component and its coherency.			uzit
6503990	Development		2	2		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If a comment would be longer than 2 short sentences.	More than 75% of the time	up to 25% of the time	Yes	"Understanding the overall structure takes time. Otherwise, I would only be able to make shallow comments."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"They fall into two camps: a) the potential reviewer is already familiar with the code, b) the reviewer is known to be especially strict"	Yes	I think it is obvious 		wilrich	wilrich
6503992	Test		16	10		7	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Whenever I don't understand fully the rationale behind an approach/decision to obtain the background/context;	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"Well, if I'm familiar with the files I probably understand what the code there does, so not being familiar with a file will obviously take me more time to understand what the code there does and what are the implications on the affected code (in the CR)"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Distribution list defined by process + area owners	Yes	"It isn't necessarily always the case, but typically when making changes to code which is familiar to a reviewer yields better comments since there is greater understanding of the code as a whole and how it impacts adjacent code"	"Note: I characterized ""build breaks"" above as not only a compilation break but as a change that prevents the system from being used in it's majority (like a BVT break), which we typically consider as disruptive as a compilation error during an official build."	pedrotei	pedrotei
6503994	Test		12	10		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Non-obvious coding not explained through comments	between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Knowledge of reviewers expertise	Yes	Reviewer is typically more thorough		jan	jan
6503995	Development		7	3		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				- If the motivations behind the change are unclear. - If the proposed architecture (class/method names and design patterns) are not well-thought out and it would be faster to explain in person than to write it all out. - If no response is given to a comme	between 50% and 75% of the time	up to 25% of the time	Yes	The trickiest part is understanding how the changes in question fit into context. It's not always apparent where a modified method or class is being consumed unless those locations are part of the review.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Always select dev/test members of feature crew. Always ""CC"" dedicated CR alias for my product. Typically assign to dev/test lead if the change is important or a hotfix. Occasionally CC someone who might be familiar with the code's original intent or familiar with a technology that has been brought in."	Yes	People who are familiar with the code can identify if the code change can cause a regression. They can also suggest possible alternatives that still complete the objective. People who are unfamiliar with the code tend to find obvious stuff (which is good) and people who are familiar occasionally overlook it.	"One of the hardest things to do in a code review is separate the conversations about style/organization/structure from the comments about real design/performance/reliability/testability issues. As a result, it's too easy to get distracted by one vein of inquiry and ignore the more important stuff. It's also too easy to make style comments and then sign off on fixes for them but fail to get to the real meat of design issues.  Once someone has submitted a CR package it's almost too late to effect any real change in the code proposed. Yes, a good design process should help this but unless your design doc includes code there are going to be surprises once coding starts. The CR process unfortunately becomes the place to address those issues but the tools are suddenly very limiting. Comment on a file or a line of code, wait for a change, but the request was to delete the class and re-implement something different. All of a sudden the whole conversation, attached to a deleted line, is now lost or very disorganized."	tmichon	tmichon
6503996	Test		11.75	6.25		15	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"				When the design of a fix is not clear. When a fix doesn't follow the proper design.	up to 25% of the time	up to 25% of the time	Yes	When I know the code I often do not need to spend time looking up context. I can focus on the fix. When I do not know the code I may end up looking into files not in the review or reviewing large unchanged parts of the code to get context.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"code review alias for the org, the dev/test involved, last person to touch the file, feature owner"	Yes	"more detailed, precise feedback, sometimes to the point of nitpicking. Often provide more insight,explanation of why the comment was made"		grobyns	grobyns
6504000	Other	Program Management	15	3		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Not enough comments and reason for code changes not clear.  No design associated with a large change. Comments in code review are not being addressed. Large change where code review in codeflow may not be the best way to review the code (in person multiple member review preferred)	up to 25% of the time	up to 25% of the time	Yes	Get familiar with the code. Understand impact of changes.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Expertise (SME), Seniority, working on similar / overlapping projects "	Yes	"Comments are more quick, actionable and detailed when the reviewer is familiar or owns the code. "			rajieas
6504001	Development		15	13		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				To follow up on the comments made in the tool. Happens regularly for non-trivial code reviews.	between 50% and 75% of the time	between 25% and 50% of the time	Yes	"When I don't know the code, I can only make superficial comments, not deep analysis of the solution presented for review."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"The whole team (ours is small). For larger teams, I identify the owners of the area as required, the rest of the team optional/FYI."	Yes	Makes feedback better!	CodeFlow is a fantastic tool that I use almost daily.  Please make it work with Git! 	arturl	arturl
6504004	Development		10	5		4.5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				I could take a discusion offline in case I think it will not bring any value to the audience.	up to 25% of the time	up to 25% of the time	Yes	It really depends on the pack bing sent out. In general I try to get a feeling of what the code is ment to do in general (withouth the latest change) and then take the latest changes into account.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"We have a standard code review aliases, but, we always hand pick someone which is familiar with the area, for example - looking at the file history"	Yes	"After a while, there is no difference as folk get to learn the code base. In general, this also depens on the author and the code area (quality, history and so on), but, I've seen two buckets:  1. people that are not familiar with an area that is being changed: if they write a review, the focus will be on small/immediate issues - wrong spelling for example or a comment 2. people with understanting of the code: focus more on architecture, integration, will try to provide alternatives  Sometimes people with more understanding of the code will use a code review as an opportunity to educate and/or set an example"	Most of the times I don't finish/close the review in an attempt to spam less. Sometimes the ammount of emails generated by a review is larger than I would like it to be.	aar	
6504007	Development		21	10		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If the code changes are crisp and clear I rarely speak with the author. But if I have suggestions to the review which goes beyond simple changes, i.e. requires refactorings I useually discuss the code with the author. This is to share knowledge (the author might have good arguments), but I also try to raise the awareness if the code doesnt clearly express the intent."	between 25% and 50% of the time	up to 25% of the time	Yes	"If you need to understand structural things in the unfamiliar code it does take longer time. If you just do peephole review with a narrow focus in the code lines, it does not take longer time. "	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I usually select the team devs + involved tester and relevant external developers.	Yes	"This of cause depends on the quality of the code, but in general the more knowledge the reviewer got the better feedback you can get on the implementation. "	"Before codeflow we used email for reviews, and I think emails are supperior for sharing best practices and creating consensus of how we would like to do things. Often these discussions disapear in the actual review, as the tool has more focus on signing of code than learning.  I would suggest the ability to add some kind of tacks in the reviews and a tool allowing us to consolidate the interesting review comments to best practice guides or EE discussions. "	mniel	mniel
6504009	Test		7	3		3	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If my review commement is not easily understand  If  the developer insist his idea and the codes did not match the code rule	between 25% and 50% of the time	up to 25% of the time	Yes	"I need to understand what occured. What I knnow, What I didnot know  Need to know the whole story and see if the change is correct"	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			According to what codes I am changing.	Yes	"If he is very familiar with this, I will respect more about his comments . Maybe I didnot think it before. "		shl	shl
6504011	Test		6	5		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Helping improving the development process in general / Second Most Important"					between 50% and 75% of the time	More than 75% of the time	Yes		"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding"				Yes				
6504017	Development		23	10		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"1. When the reason behind the code change is not clear, e.g. what problem are we fixing? 2. When the code change itself is not clear. 3. To suggest a different approach. 4. If the code changes is especially risky."	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"The initial code base first needs to be understood, even without any changes. Then, the risk of the change is greater due to the lack of familiarity with the code so more scrutiny is usually applied."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"It varies: people familiar with the code; people unfamiliar with the code but familiar with the domain area (or a particular bug); occasionally architects for design input, usually for feature work."	Yes	"People familiar with or owning the code are very protective and less objective about the changes - it can be a struggle convincing them of a change; those unfamiliar are more objective and their input is more pure, and conflict/pushback based on ownership is less common."	"We have found that our code reviews provide a quite superficial aid to code improvement and preventing regressions, but there is a common perception that it is the primary way to prevent bugs in code. Our experience is that it is not a great help in finding logical errors in a code change, but is more a sanity check of simply things like buffer sizes being wrong or guidlines being violated. So there is often the question: ""why didnt we catch that in code review"" and the answer is usually ""nobody could have caught that in a code review"". We are probably not conducting code reviews with enough discipline, but even so it is hard to see that we can improve on catching logical run time errors by code inspection alone and it would be great benefit to improve that."	dmccrae	dmccrae
6504022	Test		2.5	2.5		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"The main reasons for me to talk to the author in person are: 1. when it is hard to understand code (using weird libraries or special script languages) 2. or when it is obvious the specific issue will go into a long conversation, doing it in codeflow comments could take days, and in person it can be solved in minutes."	up to 25% of the time	up to 25% of the time	Yes	"If the files are new, I should understand totally understand the concept and also look for every little change done (in opposite to an old file, where I know most of the file is submitted and was reviewed and tested, and I have reference in the old version to understand the change). If it is unfamiliar file that was change, it will take me more time to review it, as I will try to understand the logics of the change, and if I'm not familiar with the file, I will have to learn it (in opposite to a familiar file, where I already understand the old logics, and I only need to understand whats new)."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"People in the imidiate team (1-4 people) that should be familiar with the code, and others that I think are familiar with the change or with the area of the change.  In addition, I'm putting as optional reviewer an DL which includes my all team (around 50 people), so if one of them finds this change interesting, he can join the review.  *this DL, is special for codereviews, pepole can remove themselves from it, or move the invitiation to a special folder (so their inbox won't blown up)."	Yes	"most of the time, a reviewer that is not familiar with the file, will comment about the style of the code, readability of the code, comments and implmetation.  a familiar reviewer will question the logics and the usage of specific APIs."		aviadm	aviadm
6504025	Development		5	3		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Developing a sense of trust in the group and willing to improve continuously			If there is a recurring unsound code I want to undestand if it is a problem with the skills of the Dev or a more general problem with the existing code or libraries (could be ours or third party ones).	up to 25% of the time	up to 25% of the time	No	"There is a general sense of trust in the team and aside from the general understanding, we concentrate on the modified parts of the code more than on the existing ones."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I send the codereview to all the Devs of my team and to the PM as well (we are not such a large team anyway)	No	"Only sometimes and in that case, I am willing to learn why and improve myself and the team."	Code reviews are a great tool to improve the team and build trust among the people maintaining products together.	frnidito	
6504026	Test		4	2		4	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				only when we don't agree on the feedback i give	up to 25% of the time	Never	Yes	"lots of code, hard to understand"	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			people that are in my team - we have the same scope	Yes	they have more meaningful comments		lbaciu	lbaciu
6504028	Test		12	2		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	learn from each other			when the code or the motivation to write it is not clear	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			first from the feature team then ones that are free then ones that i can learn from	Yes	"a familiar code will make the reviewr more ""deeper"" "		arnonma	arnonma
6504029	Development		3	0		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Long code review, unclear paterns, discussion about alternative approach"	between 50% and 75% of the time	up to 25% of the time	Yes	"make the big picture of unfamiliar code, imagine the intention takes time"	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			depending on the familariy of the reader with the current code	Yes	higher probaiblity to detect uncovered edge case			
6504033	Test		8	6		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When you need an explanation about the architecture of the solution	More than 75% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Peers and owners of the code or feature being touched	Yes	"The reviewers familiarity can be judged by the kind of comments they put in. If a reviewer is not familiar with the code, he/she will look for patterns or tiny little details. You might get feedback on the documentation, naming convenations used and some comments on the design. If the reviewer is familiar with the code, you get a more high level concerns and ideas to improve code and discussion about differnet scenarios the code can be in."		chethant	chethant
6504034	Development		3.5	0.5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"never needed to, all comments are done via the CodeFlow tool. That way, we keep a written trace of the comments and the replies, and other members can see the discussion."	Never	Never	Yes	"Obviously it takes more time to understand how the code works, and how the new code will impact the existing code."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"We always send the code review to the entire team as optional reviewers. The mandatory reviewers are the persons who needs to be aware of the change of code, and the persons who have enough knowledge on this part of the code to provide a more thorough review."	Yes	"The comments will not only concern best practises, readability, questions or things like that. The comments will also concern logic, performance of the algorithm, possible improvments, etc."		gvelez	gvelez
6504043	Development		25	4		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"	We are working with lots of unit tests and automated BVT's. This is why build break and finding defects are not main motivations for code reviews.			"When it is not obvious what my suggestion is, or my suggestion cannnot be described consisely.  When a design choice is not the best and needs discussion. For edge cases of coding styles. A discussion is necessary to judge how to apply existing coding styles or how to create an additional code style rule."	up to 25% of the time	up to 25% of the time	No	"For question 10: We use collective ownership, i.e. noone in the code ""owns"" any particular files."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who are familiar with the feature areas. People who are good at review feedback. Always include the immediate team for sharing what is going on.	Yes	Less architecture/design questions in familiar code.			svenros
6504046	Development		10	10		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Typically if I feel I need to understand more about an area, in particular around the scenarios. I.e., ""is it ok to assume this?"", which typically requires scenario knowledge that I might now have."	up to 25% of the time	up to 25% of the time	Yes	It takes longer because I need to understand the scenarios and the components (classes) in order to evaluate whether the code changes are good or not.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"In general, the dev+tester who are most familiar with the area. But it depends on availability of these people. And if I happened to discuss the issue with a particular dev/tester (perhaps the person who discovered the issue), then I might choose them instead."	Yes	"If the reviewer is familiar with the code, I get more feedback on the highlevel design."		chrishd	chrishd
6504048	Development		11	6		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 25% and 50% of the time	between 25% and 50% of the time	Yes					I look for SME in the area which is affected.	No				
6504057	Development		5	2		25	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				No				rgandham
6504065	Test		7	4.7		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"Almost never, but whenever there is a misunderstanding it is cleared very fast and usually both sides are pleased with end results."	between 25% and 50% of the time	up to 25% of the time	Yes	Simply to get to know the code flow and what test does and potentially could be doing more.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The file owners and all my tes colegues, as well as any other people that I know might give me deeper insight."	Yes	The comments are usually more meaningfull and there is usually more of them.		jelenac@microsoft.com	jelenac@microsoft.com
6504068	Development		10	3		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important"				In case of misunderstanding	between 25% and 50% of the time	up to 25% of the time	Yes	it is longer to understand the code	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I choose peaple that are the most familiar with the files I changed	Yes	"When the reviewer is very familiar with the files, he can detect bugs more easily than others"			laetgab
6504069	Test		3	2		20	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"When my question regarding code is too involved to be captured as a simple comment, or has a good chance of spawning a high level discussion that would be more effective in face to face conversation than in code review comments. Also when I need more clarification on the context of the review, to save the submitter time to educate everybody in the comments."	between 25% and 50% of the time	up to 25% of the time	No	"I don't scrutinize code that I don't know well that deeply, as it's not part of my job in test; Most of the time I only take time to look for obvious flaws (breaks, code smells). With the codebase I know, I take more time to analyse the changes from the functional perspective and provide feedback that is specific to the feature the change concerns."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Those are people involved in the feature that the change concerns: owners of the code or testers of the feature. If applicable, area experts in particular technology being used. Also per convention, for transparency, an immediate team (eg. test team for all test automation code)"	Yes	"Owners or people very familiar with the code tend to provide more insightful feedback and catch issues that are not necessarily contained within the change itself, but are more contextual with the rest of the feature (eg. ""you need to add an IP to ACL for this to work"")"		astarik	astarik
6504074	Development		17	9		22	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If discussions in code flow go back and forth a number of times, then at that point talking to the author is often required."	up to 25% of the time	up to 25% of the time	No	"Typically the owner\person most familair with the code would also be on the same review, so typically I'd spend the same amount of time on the review but would not give it the same depth of scrutiny."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I would add people I know have worked in the space and the owners of the sources.	Yes	Typically get more in depth comments and a larger number of comments and suggestions.	Typically we see a very small number of people (about 2) who are generally included on all reviews (because they are considered as providing great feedback and have a broad knowledge of the project as a whole) as well as others who are owners of the source files in question or have worked in the space.	andremcq	andremcq
6504084	Test		5.1	1.6		15	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When I am not satisfied FiX done, Or I think alternative better approch exist, which can not be explained as simple comments"	up to 25% of the time	up to 25% of the time	Yes	To understand Change of code in unfamilier files	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			FC + DEV/TEST team	Yes	"Normally,He can suggest better way of doing the fix"		sgupta	sgupta
6504087	Development		12	6		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Quite rare. If objectives are not clear.	up to 25% of the time	up to 25% of the time	Yes	Need more time to understand logic behind it. We are developing accounting system. And one flag could change a lot in many other places.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Peoples involved in this functionality. + some people are doing better review than other. 	Yes	Peoples not familiar have tendency to review code quality mostly.		dmytrk	dmytrk
6504097	Test		2	2		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"The main condition would be when the code area that has been touched is totally unknown (new framework). Secondly, when I disagree with the approach taken and would try to explain in person the flow of the solution, with both advantages and disadvantages."	up to 25% of the time	More than 75% of the time	Yes	Identify roles of the framework and patterns in the framework.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on ownership of the areas that I touch in my submission and based on the people involved in the current development.	Yes	New reviewers might not be familiar with some framework tweaks/limitations. 		ancioc	ancioc
6504119	Development		5.5	2.5		8	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When the changes are extensive and/or non trivial and I have comments that are better given in a face-to-face discussion (whith immediate feedback)  than with inline comments. We try to keep all comments in the review itself whenever possible.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	I need not only understand the content of the change but also the surrounding code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"The team is split in two sub teams (online and offline). A change is sent to the whole subteam the service touched belong to plus any other person in the other team that might be affected by the change. Usually the whole team is cc'd on the change as an optional reviewer, to keep everybody aware of all the changes. This won't of course scale to larger teams."	Yes	"When the reviewer is not familiar, the comments are more about style or obvious bugs. When the reviewer is familiar, the comments are more in depth and often contain design suggestions and tweaks."		giderett@microsoft.com	giderett
6504123	Development		6	6		42	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Conflicts about design.	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Feature owners and backups and Subject Matter experts.	No				
6504142	Development		13	6		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If the code is somewhat unfamiliar to me, or if the changelist is big it is nice with an introduction to the overall strategy/patterns that was used for the change."	between 25% and 50% of the time	More than 75% of the time	Yes	"The hardest part of our code is not so much the technical solutions, it is more the business logic. So if it is unfamilar code, I need to first understand where in the overall processes it fits in (unless I do it as a pure technical review without focus on the business logic but only on the best practices and coding standards).  "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Normally I choose the person which I know has the required domain knowledge, so he can give me feedback on not only the technical side but also catch business logic errors. We have a review alias we also include in all review, to increase team awareness of the fixes going in.  "	Yes	Then it can be a business logic review intead of a pure technical and code standard review.			anderso
6504148	Design and UX		7	7		6	No	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If there is a lot of to and fro, for example the owner of the code does not understand the feedback. This is much faster to resolve in person and then track the outcome of the conversation in the tool. The other occasion tends to be when there is a problem with the fundamentals of the approach though this should be caught during the dev design review as opposed to during the code review but it does happen sometimes."	between 25% and 50% of the time	between 25% and 50% of the time	Yes	If I am familar with the code I can follow it much faster and understand the impact of the changes for example. It depends at what level of abstraction you are reviewing the code changes as well. It is possible to remove some of this delta by doing a more centred code review and not looking at the bigger picture.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"1. People that have a ""stack"" on the code and this consists of two layers. The first is people actively involved in the feature or someone we have a direct dependency on with a public facing bit for example. 2. The ""team"" who would not have strong knowledge of the feature but can still provide more generic feedback on coding standards & practices."	Yes	"The feedback tends to be much more indepth and more useful. It also tends to be apparent that as they effectively have a ""stack"" in the code they spend more time. If someone is loosely related to a feature/code then you tend to find them signing off fast and not with the same amount of due dilligence."	"In the above example there will always be some outlayers as well. People who have no stack in the code but are still very dilligent in reviewing code and giving feedback. It is also important to create the right culture for feedback. This is not easy as sometimes feedback can be harsh and interpreted as being ""personal"". The tool that the review is carried out in has a big part to play in the effectiveness of code reviews in the company."	mholly	mholly
6504153	Development		3	2		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"If the code logic is not clear, or the quality is very bad."	up to 25% of the time	between 50% and 75% of the time	Yes	Because I need time to understand the code and its functionality	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"The code owner, the tech lead"	Yes	The owner can have better understanding of my code and is able to provide more concrete suggestions		feshen	
6504155	Development		21.5	21.5		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When the overall architecture is unfamiliar. A change in isolation may look harmless, but if I'm unfamiliar with the surrounding architecture, I rarely have any idea if the change is correct, beneficial, and most importantly, harmless."	up to 25% of the time	between 25% and 50% of the time	Yes	"Individual files are rarely the problem, but more how they fit into the overall architecture. Big, complex architectures are difficult to keep in my head and hence changes to them (even a few small lines) can be daunting to understand."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			It's mostly automatic - we've set up a DL picker that chooses the right subteams to review particular areas of the code.	Yes	"Those most familiar with the architecture are able to provide the most insightful feedback, while those with less familiarity provide more localized feedback."		davewh	davewh
6504169	Test		7	7		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If the code review comments would be very lengthy because of recommended design change or alternate approach.  	between 50% and 75% of the time	up to 25% of the time	Yes	It takes some time to acquire context on the code under review.  	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I choose people who are more likely to have some context on the code change in question.  If I do not have strong feelings regarding people who have context, I have a few code reviewers that I use more frequently than others.   "	Yes	"Comments are generally higher quality when the reviewer has more context.  Frequently when you include someone with little or no context, the comments are largely around them attempting to understand the code under review.  "			kgoodman
6504178	Development		25	6		12	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Only if my feedback is complicated, or if I can't understand the nature of the changes on my own."	up to 25% of the time	up to 25% of the time	Yes	You can't do a complete review if you don't understand the code area being modified.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People who are familiar with the code area first.  Optionally add additional senior reviewers if the changes are particulary big and/or risky.	Yes	The feedback tends to be more design oriented vs superficial.			
6504179	Test		13	7		40	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Almost never.  I prefer using the CodeFlow comments to comment on and have discussions about the code under review.	Never	Never	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Reviews go to a general alias that on our team.  I add additional people as necessary: either people who have specific expertise in what my changes are about or people who are required to approve submissions.	Yes	"Yes.  Someone who is more familiar will typically provide more in depth feedback.  Someone who is unfamiliar typically asks more questions that are of the form ""what is this for?"""		ddeblois	ddeblois
6504182	Development		12	3		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Usually use lync, but for some discussions in person is better if the person is located in the same building."	up to 25% of the time	Never	Yes	Need to review portions of code outside those being changed to understand the change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"People who own the code, are familiar with it, or likely to have relevant comments."	Yes	More/better feedback from Authors familiar with the code.		alexwil	alexwil
6504185	Development		12	10		11	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"Motivations in the list overlap, but learning and product quality are my motivators in general."			"Quite rarely and always with code at hand - when I feel that I potentially cannot embrace the whole idea of the change. On other cases CodeFlow, e-mail and Lync are enough."	up to 25% of the time	up to 25% of the time	Yes	If the code is unfamiliar / new I need more time to understand if the change 'fits in'. Sometimes I consider adding co-reviewer - if I feel that my concerns about unfamiliar feature will be too generic.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			If not agreed specifically - these are people familiar with the feature (or at least feature area). Finding them via SD history sometimes.	Yes	"I believe that reviewer familiar with the area of the change can consider more side effects of my changes. This is still true if I am familiar with the feature area as well, since different experiences produce different angles of view. For live example - steady and consistent approach of Core DEV vs nimbleness and injective coding of GFM DEV."	Good tools are the second key to good code review. [ correct attitude is the first ] Currently using CodeFlow I consider it a great tool.	gverny	gverny
6504195	Test		6	6		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				when the design is really bad or more generally when communication effeciecy isn't good enough via a tool.	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			domain knowledge or those that will be required to have domain knowledge in the future.	No			andremic	andremic
6504198	Test		6	2		13	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"Well, in many cases the CR is really unneeded but only a process that extends the time requires for checking in new code. In these cases, sorry to say, the only motivation is that CR is obligatory. (however, sometimes even in these cases people have some good comments which eventually make the CR valueable). "			"1. When you want to understand the reasons for a cestain implementation / change, before you write comments. 2. When you think that it would be faster if the one who wrote the code will give you some background and present you his changes. Usually when you are not familiar enough with that code area."	up to 25% of the time	up to 25% of the time	No	"It depends actually how important is your review. If you really want to understand every little thing that is checked in, then you'll need time to understand the new code and get familiar with that area. However, in most cases where you're not so familiar with that code, then you also don't need to understand every little thing in order to review the new code."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"their relevance to the new changes, and if they are considered seniors in my team.  "	Yes	"The comments may be in a higher level - not only C# general comments, but rather comments that are more valuable."		tomersch	tomersch
6504201	Development		12	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				If the author is lacking some key domain knowledge for the area they are changing and introducing a subtle but hard to identify bug.  If an issue has gone through several iterations without being resolved or if there are several reviewers taking different positions on the same issue.	up to 25% of the time	between 25% and 50% of the time	Yes	"It really depends on the size of the review.  Typically new files have a lot more code in them than a targetted bug fix.  Additionally, to really understand the impact of a change in an unfamiliar file, you often need to review code that isn't directly part of the change to get the full context of the change being made."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"2 reviewers from 2 of the 3 buckets:  1) Senior developer 2) Area owner/expert 3) junior developer who needs exposure to an area  Bucket 1 & 2 could end up as the same person, but not always."	No				
6504207	Test		12	2		25	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Helping improving the development process in general / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important"				Never	Never	Never	Yes	"If it's code I know, I'll just read the deltas. If it's code I'm not as familiar with, I'll read more of the code surrounding the deltas to see what the code is trying to accomplish"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have an alias for the entire team to submit the code reviews to	No				ryanjo
6504215	Test		7.5	4.5		7	Yes	"Avoiding build breaks / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"	Team Awareness/Transparency			There are two primary reasons I sometimes need to talk to the author in person: 1. When more background context is needed to frame the code review  2. When there is disagreements about particular comments and an in person conversation can sometimes be quicker than a back and forth in email or a tool.	up to 25% of the time	between 25% and 50% of the time	Yes	It often takes longer to review because you have to read additional code to gain background to ensure that the existing code isn't being negatively impacted by the new changes.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding"			"I always pick stakeholders, people from the team who need awareness, people familiar with the code historically, and people with a history of providing challenging and good review feedback."	Yes	People familiar with the code often have deeper historical information and are also a bit more protective and particular about what changes they would like to see done.	One thing our team has started to do is have code review checklists to help bring a minimum set of things we check at the start of a review. THis list includes things like accessiblity of a classes and properties (should they be public/internal/private/sealed) etc. I think having a basic checklist that can continue to be expanded upon can help teams a lot.	mlandin	mlandin
6504216	Test		1	1		10	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Helping improving the development process in general / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Team member/co-worker	Yes				
6504217	Development		10	10		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important"				If the diff is not straight forward enough to understand exactly what changes were made or if the changes made are not commented and straight forward to understand by the reviewer.	up to 25% of the time	up to 25% of the time	Yes	To do a thorough review it is still nice to bring down the changes into your environment and step through the changes to understand the change in logic.  If it is an area that is not familiar this naturally takes longer to figure out how to excercise the logic being changed.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Subject Matter Experts in the area.  Those who have ownership of the area being impacted.	Yes	Someone familiar will get to the more high impact bugs that may be the result of the code changes.	Code reviews also drive accountability.  Developers are less likely to take shortcuts or produce poor code if they know that it will have to be reviewed prior to submission.		brelind
6504218	Development		11	11		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	between 50% and 75% of the time	Yes	I need to understand the code before I can perform code review. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People who are familier with the code, followed by people in the immediate group."	Yes	"People who know the code better tend to give better code review feedback, since they know how the code works. People who are not familier with the code do nto generally comment about the big picture, but rather whether the code does what it is supposed to do."			rsistla
6504219	Development		5	4		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Usually I'll do it if there is something that I don't understand, or that I consider may have an adverse effect on some other part of the module / other modules. To generalize, if there is something that is too complex or time-consuming to ping-pong in a review, it's preferable to do it in person."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	There is a learning process involved.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"The people that I know have a good knowledge of the area, and/or will be ""affected"" by the change (i.e. when other team owns the code)."	Yes	"Less generic -- less about style, conventions, and ""local impact"", and more about the functional implications of the changes in a broader level or ideas to improve things."	"One thing that CodeFlow (and automated code review tools in general) makes less transparent is what people are commenting on -- you only see that if you're part of the review, but not in one of the DLs that get sent the review on CC.  The consequence of that is less visibility into all the other reviews while they are in process, and comments or clarifications that other people than the requested reviewers will only surface after the review is completed (if they bother to chech the completed reviews) and it's usually too late and costly to re-open a bug for applying some additional comments."	jrend	jrend
6504249	Test		11	7		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"				"large code review or not sure why they did something, but i am not quite sure it is wrong"	between 25% and 50% of the time	up to 25% of the time	Yes	really?				"involved, knowledgeable of area, senior/experienced"	Yes	it really depends on the person doing the code review		japaroly	japaroly
6504269	Test		5	5		40	Yes	"Finding defects/bugs / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important"				"Often for clarification if I have more complex questions about the design or motivation for a change, since those types of discussions are not easy to have within code review tools (and can cause unnecessary noise for other reviewers)"	between 50% and 75% of the time	up to 25% of the time	Yes	"Rather than just looking at the changes (diff), I often need to spend time looking at existing code to see exactly what the new code is doing, how it interacts, etc."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Our team has reviewer aliases that contain all of the reviewers for a particular feature area.  Beyond that, I will specifically add people I know are knowledgeable about that area, own the code, or have a shared interest in what I am working on."	Yes	"Comments are much more focused and usually include suggestions on how to fit better with the rest of the codebase.  When reviewers are not very familiar with the files, much of the feedback is generic (add comments, use a helper function, etc)"		dacarr	dacarr
6504271	Test		8	5.5		8	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"				"When unable to understand the rationale behind the code, the code written could be good, but need to understand why that particular peice of code is required. Also, when issues are too complicated to write and better can be discussed in person."	up to 25% of the time	up to 25% of the time	Yes	"If I am not familiar with particular product for which the dev or test code is written, I need to follow the code carefully to understand what the product code or test case is trying to achieve, specialy when I have limited functional/domain knowledge in that area."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People from my team and who have the knowledge of the functional area. Also people affected by the code change, they may not be working directly on the product."	No				
6504272	Test		7.5	7.5		7	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				If I don't understand a section a code and can't figure it out from the comments / description.	up to 25% of the time	between 50% and 75% of the time	Yes	"Make sure I don't make mistakes or miss something, and also to better understand what that code does."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Immediate teammates	Yes	Usually it's more technical or nit-picky (in a good way)			hemanths
6504273	Development		9	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Whenever there is a question about a portion of the code review	between 25% and 50% of the time	up to 25% of the time	Yes	"Because I am unfamiliar with them. Also, new files have a larger delta, since they are not just changes to existing code."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Our team has standard code review aliases. Also add area experts.	Yes	The comments and reviews are generally better.		charhays	charhays
6504287	Test		1	1		13	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Rare cases - usually handled through CodeFlow's comments	Never	Never	Yes	Need to get a better overview.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			A combination of relevance (e.g. send test code to the relevant devs) and how quickly I think they'll review it (the punishment for giving me quick reviews is being sent more reviews)	No			riedgar	riedgar
6504289	Development		14	7		25	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important"				Usually only if I disagree with the method that are using to do something.	between 50% and 75% of the time	up to 25% of the time	Yes	I have to take the time to get familiar with how the code works before I can do a thorough review of the changes that are being made. If I am reviewing changes to code that I own or am very familiar with I already know how the code works so I can just look at the changes and should already know how they fit in.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I usually select other people that are familiar in the area that I am working in so that they will have the most knowledge of the changes that I am making. I also include our team as optional reviewers so anyone can take a look that might have some insight.	Yes	"Typically the more familiar someone is with the code, the more comments they will have because they are more in tune with how the code truly works."		mattand	mattand
6504291	Development		6.75	5.5		6	Yes	"Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				If the change is huge or does more than what is necessary to address a change.	Never	between 25% and 50% of the time	Yes	"For files that you are not familiar with, as a reviewer you need to ensure there are no possibility of regressions. So you will need to scan the surrounding code and understand it before signing off on the change."	"Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding"			People who are familiar or have some knowledge of the code area being sent for review.	Yes	If folks are familiar then the comments are more specific otherwise it seems to be more general like stylistic feedback.			
6504304	Development		5	4		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"	Having code reviews helps different developers learn a new codebase without having to work in it at the time.			When the change is large enough and there isn't a big picture explanation of the change.	Never	up to 25% of the time	Yes	I am mainly trying to understand the whole picture and why a certain change is needed. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I select those who are familiar to the code, as well as a large code review alias to allow everyone to see the change, if they want to."	Yes	"People more familiar with the code usually comment on the actual change, instead of stylistic changes, or other random code not in the change."			
6504308	Test		40	10		12	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important"				"When checking in large changes or changes where only a shelfset that can be reviewed within Visual Studio gives a good idea of what the changes really mean.  By that I mean code review ""differences"" sometime obscure the meaning of what is being changed and it is necessary to use the power of Visual Studio to ""find all reference"" or ""go to definition"" to learn what a large change really means."	up to 25% of the time	between 25% and 50% of the time	No	"New files are not cluttered with ""difference"" (red/yellow interspersed).  It is easier to read a new clean file than try to figure out what the code will look like from a codeflow with many changes in it.  Also, files with which I am familiar have often been in the code base longer and so there is a risk of introducing bugs or introducing class dependencies that affect cohesion/coupling.  If not caught in a review, these changes can encumber the design for a long time.  If larger changes affect these files, it is necessary to be a bit more careful with established code.  If I'm not familiar with the code, and its a new file, I'm most interested in the readability since that usually indicates how well the code can be maintained long term. If its a modification to an existing code base, presumably the code is accompanied by unit and other tests that validate it.  Again in this case, I'm most interested in readability and making sure the intent of the change clearly comes through from the new lines of code that are written."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Area of ownership, difficulty of the problem that the code solves (and the amount of attention I know that person will spend reviewing the changes), ability of the reviewer to spot code design errors such as the SOLID principles (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion)."	Yes	"The more familiar the person is with the code, generally the more insightful are the comments."			
6504309	Development		2	2		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	Never											
6504318	Development		11	7		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"When the new code is significantly flawed, or if there is a better way to do it but which is complicated or increases the scope of the change. "	up to 25% of the time	up to 25% of the time	Yes	"If there are many changes especially in multiple files or methods, I need to get an understanding of what all the code does before I can understand the changes. Basically, you need context. Comments in the code help a lot when code is unfamiliar.  If the changes are small, e.g. all within one function, it is easy to gain that context and review. Doesn't really take any longer when code is familiar or not. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Usually one person who is most familiar with the code I'm working on, and another chosen mostly at random. "	Yes	"People unfamiliar with code will look for obvious problems, e.g. style problems, missing comments, naming conventions. Bugs they point out are frequently small in scope (e.g. null pointers, arithmetic errors, etc.)  People familiar with the code will provide feedback on how your changes may potentially affect other unchanged sections of code.  "	"The ""motivation for code reviews"" as asked above can differ depending on the immediate team. When there are junior developers, Shared Technical Learning, Team Assessment, and Team Awareness/Transparency become more important. Code reviews help to teach and guide junior devs. I view my current team as being experienced, so this I prioritized things differently above. "	richcarr	richcarr
6504320	Development		33	7		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When I need to get the bigger picture of what is going on.	up to 25% of the time	between 50% and 75% of the time	Yes	I need to understand the overall design in order to make sensible comments.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1) Members of my team 2) Code owner 3) Others that have a stake	Yes	Review comments from a reviewer familiar with the code are likely to be more substantive and less stylistic.		richb	richb
6504328	Test		5	5		2	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Required are people that work on the feature, optional are my surrounding team."	Yes	ALways get better feedback when your reviewer knows the code and is currently working on the feature that the review is sent out for because they are most interested and most knowledgable overall about the topic.			adamdep
6504338	Development		10	8		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Architectural and design consistency.			"When implementation departs significantly from desired architecture/design in person discussion is warranted. When comment(s) are sufficiently subtle or complex, following up in person to ensure understanding. When comment in review has more than one iteration of responses it is more effective to just discuss/resolve the point in person."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	Understanding the impact of the change within the context of unfamiliar code is more time consuming.  If it doesn't take you more time then one is likely focusing on the cosmetics of the code and not really reviewing the implementation relative to the intent of the change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"When change is complex, may choose based on area expert to provide best feedback.  When change is impactful, choose area owners to improve transparency. When change is minor, may be based purely on availability."	Yes	Generally code review feedback is more valuable and relevant when reviewers are familiar with one another.  The familiarity brings a certain baseline of trust and understanding so that the review can be focused on the important aspects of the change (such as correctness and design) as opposed to focusing on cosmetics details that have limited value.   Particularly early in a code reviewer/reviewee relationship there can be a certain amount of competition for each to demonstrate their expertise and figure out one another's styles.		derekme	derekme
6504340	Development		7	6		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When I don't understand a logic or when I am suggesting a new approach and we need to brainstorm for the same.	up to 25% of the time	Never	Yes	Trying to understand the new code for team ownership and getting to know the changes for the review.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Immediate team and colloborator	Yes	More detailed and more logic-oriented		arvindjo	arvindjo
6504341	Development		14	5		7	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important"				Complex or very large changes; changes I don't understand without a human intervention.	between 25% and 50% of the time	between 25% and 50% of the time	No	"Familiar files: I spend time examining the change closely, hence long time Unfamiliar files: I spend time understanding the code, hence the same long time"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Owners of the code area or experts in that area, test owners, several senior folks and the entire engineering team is always optionally invited, so everyone can pitch in. This usually produces effective reviews"	Yes	"The comments of a familiar reviewer are usually more ""deep"" and meaningful."		vladikb	vladikb
6504346	Development		9	7		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"I prefer doing in person code reviews, but that is not the standard for my current team.  I talk to the author in person when what I have to say about the code would be an easier message to deliver in person, or when my comment would be more than a sentence or two, or when I expect a discussion/debate. In those cases, I'll leave a comment in CodeFlow indicating that I'm taking it off line."	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"If I'm trying to do a proper review of a change in an area I'm not familiar with, I will almost always talk to the author of the change. However, generally when I'm reviewing in an area I'm not familiar with, I'm doing it for my own edification, not trying to provide useful feedback. In that case, I will generally take whatever time I have available and will often not involve the author. "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"my immediate team always. If I'm working in an area primarily owned by someone else, or where a particular person has deep knowledge, I'll specifically call them out. If there is another team who has a stake in the change (as an owner of the code area or as a user of the feature), I'll include the team alias for that team as well."	Yes	"Reviewers who are not familiar with the code area tend to make comments that fall into two categories: 1) typo-type comments, and other comments that require only reading/understanding a few lines of code at a time (mis-spelling, suggestions for better method/variable names, etc) 2) questions about how the code works Reviewers who are very familiar with the code tend to leave more comments about how the change will interact with other related areas of the codebase (e.g. this change will have an unintended consequence over there)."			
6504349	Test		7	6		1	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If the flaw in their code is something complicated or if they completely didn't follow the right design pattern, I'll go talk with them to make sure they understand what I mean."	up to 25% of the time	up to 25% of the time	Yes	"In general yes since it takes longer to figure out what they are doing. But depending upon how much time I have to do a thorough review, sometimes it can be quicker because I'm not looking for as many flaws since it won't be as obvious to me since I'm not familiar with the code."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have an alias we send the code review to and someone on the alias does the review.	Yes	Comments reflect a deeper and more technical understanding of the code. Reviewers that are not that familiar with the code tend to leave more style/semantic comments than functionality/purpose comments.		jostrick	jostrick
6504356	Development		17	12		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Makes the developer much more careful when they know they have to send this out for review. They take more time to verify the fix and make sure it's readable. 			If I don't understand that problem or the change. 	up to 25% of the time	up to 25% of the time	Yes	"I don't know what's supposed to happen with that code. With code I understand, I already know a lot of the details about how it works. "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"I select people who know something about that area, or have a vested interest in it. "	Yes	They provide more details about things that could possibly go wrong. 		andyho	andyho
6504361	Test		10	7		100	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"When the intention of a group of code is not clear, in such case make individual comments doesn't help"	between 25% and 50% of the time	between 50% and 75% of the time	Yes	"For new files all the code needs to be reviewed, when is only modification are few lines typically. Also for not familiar code is important to understand the original intent and the change."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			By ownership areas and affected areas	Yes	Those comments usually have suggestion for design or code reutilization form existing libraries	"One of the challenges with codeflow is that the comments loose the context between multiple iterations because are tied to code lines, and the fixes usually change the number of lines"	jaimeta	jaimeta
6504367	Development		8	0.7		3	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				#NAME?	up to 25% of the time	between 25% and 50% of the time	Yes	Because I try to understand the idea behind the code and it takes time	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Usally all my team. If I know that changes I made are in files that owned by person I can add him/her as a required person and leave others as optional.	Yes	"Comments are more about some defects/bugs, rather than about Code Improvement"		kpugin	kpugin
6504369	Development		9	4.5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Comment resolved and reopened more than twice.	between 50% and 75% of the time	between 25% and 50% of the time	Yes	It takes time to get holistic view and understanding of the codes.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Technical expertise in the area or code owner.	Yes	"Usually, they can come up with ideas or potential issues that I didn't think of because they've worked on the codes long enough to understand the integration points and the contexts of code consumption."		aswingu	aswingu
6504372	Development		4	2		20	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Large or complex code changes that are difficult to review unless in person.  Changes that appear irrational.  Code reviews that would require a large number of comments.	between 50% and 75% of the time	Never	Yes	Trying to understand the code area and the changes simultaneously.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People I've communicated with during a change.  Pair programmers. Immediate scrum team group alias. Code stewards for the area.	Yes	Comments and feedback have much higher value.  They find real problems versus pedantic or styling/convention issues.	"CodeFlow is so awesome.  I love it. I wish there was better Mac support, which includes a client and syntax highlighting on both platforms for mac specific code files like .mm, .m, .hh.  Also, I wish .hpp files were treated like .h for syntax highlighting.  Thanks for all the improvements."	dawol	dawol
6504378	Development		10	5		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important"	Help improve the overall knowledge of the team (i.e. help junior developers get exposed to more code quickly and learn from the reviews).			If the review has gone back and forth a few times it is likely easier to resolve in person.  Additionally if you want to get clarity on a complex problem I find it easier to do so in person.	up to 25% of the time	between 25% and 50% of the time	Yes	"Depending on the type of review it could go either way, but to gain the full context into the change and provide a useful review I do find it necessary to at least have some understanding of the overall intent of the change and the code that is being modified rather than just going off only what is changing."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Typically I will send it to the applicable owner or direct peer on the team who helps manage the portion of code being modified.  Additionally I will send it to other developers I have consistently gotten good feedback from.	Yes	"You will often time get good bug/use method X here from someone very familiar with the code as they know what is available or potentially some behavior you did not consider.  Those less familiar still provide very good design and potetial issue feedback, but it is generally less tactical."		gabew	gabew
6504380	Test		15	7		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				If the intent or design is unclear. Also sometimes if the volume of comments/issues is large.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"Part of the code review is to understand the problem being solved as well as the design - if unfamiliar with it, it does take more time to come up to speed"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			6	Yes	"If familiar, the feedback is usually more around design and the solution. If unfamiliar, I typically just get feedback on style, comments, etc."		jodav	jodav
6504383	Development		3	3		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"					between 25% and 50% of the time	between 25% and 50% of the time	Yes	the changes are typically less incremental so its harder to see what the new code is doing when you don't have the context of the old code	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			They have subject area knowledge of the area of the code being worked on They were part of the design process They expressed interest	Yes	Comments usually have greater depth  They are more likely to suggest a refactoring			jboehm
6504385	Test		6	4		30	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Keeping track of comments and rationale on code changes / First Most Important"				Strong recommendations for revamping of whole change. Getting a firm grasp of an unfamiliar section of code.	up to 25% of the time	up to 25% of the time	Yes	Finding my way around.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Convention, area ownership."	Yes	More detail comes with familiarity.			
6504386	Development		15	7		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If there are a lot of mistakes/errors in the code change	up to 25% of the time	up to 25% of the time	Yes	In most cases it takes longer since you need to get an idea of why the code was changed in the way the engineer did and how that impacts the rest of the code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Try to send it to at least 1 dev and 1 test. Try for people who know/understand that area of the code base.	Yes	More detailed and less generic		jrendean	jrendean
6504388	Development		20	5		8	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"When proposed solution is inappropriate or if there is a cleaner alternative solution.   Codeflow also lends itself mostly to iterative refinements of existing codebase, or minor refactoring, as opposed to new modules/functionality or major restructuring.  Those are best handled by other means, or in person. "	up to 25% of the time	between 25% and 50% of the time	Yes	Review without grokking is useless. Takes time to grok and obtain prerequisite background needed to understand purpose/method of dpk. 	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Knowledgeable peers, mandatory signoff groups.  "	Yes	"Those unfamiliar with codebase comment only on  style and formatting and religious issues. Such comments are generally useless, and serve only to allow the submitter of such comments to feel useful and be noticed for prestige-accrual purposes.   Feedback from subject matter /codebase experts actually highlight potential bugs or performance concerns, and may propose well considered alternative approaches which will benefit the deliverable product."	"Current process includes mandatory signoff groups even for obvious/trivial changes, such that for some subset of updates, the primary function of the mandatory review process is to introduce latency.  Use of codeflow may actually increase latency in such cases, due to async nature of interaction. In ""the old days"" used to walk to peer's office and do immediate review on-screen, and get it over with quickly.  Now, with codeflow, the same process occurs async via email requiring a much longer elapsed timeframe. "	gbaker	gbaker
6504390	Development		14	7		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"If I have a better idea or approach of doing things, it is easier to explain in person than write a comment. Also if most of the code is correct, except for one minor change, then i talk to the author in person."	up to 25% of the time	between 25% and 50% of the time	Yes	To familiarize myself with the approach and logic of the code	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I send it to everyone on my team	Yes	it is very detailed and brings an element of history as well with it.			sufern
6504391	Development		6.7	6.7		30	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important"	ensuring proper Hungarian and code semantics			if I disagree with their approach and the reasons are too complicated to communicate in a few lines of email	up to 25% of the time	Never	Yes	because I have to first understand the general codeflow before I can review their specific change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			whoever owns the code or is familiar with similar areas of code.	Yes	often they suggest alternative approaches or have little tweaks to the code change.		brianma	brianma
6504393	Development		20	11		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 25% and 50% of the time	between 25% and 50% of the time	Yes	Seriously?	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on sub-team.	Yes	Better understands the code nuances.			samconn
6504395	Test		4.5	1.5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important"				When I don't understand a block of code and the comments aren't good enough.	Never	between 25% and 50% of the time	Yes	Because I don't know them so I need to figure out what the code is doing	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			immediate peers and devs	Yes	usually less comments	please make Code Flow have the ability to highlight code correctly between iterations. When changes happen between iterations then the highlighting and commenting get all screwed up. Very annoying		stfro
6504397	Development		12	12		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Typically when I don't understand the context or reason for a change.	between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Code/area ownership is the main criterion; also, we try to include our test team on important reviews."	No			ryanston	ryanston
6504405	Development		12	12		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"- When I do not understand the intent of code change -- understanding intent usually takes a high-bandwidth conversaion - When my feedback is sensitive (e.g. the quality is low, but I don't want to say so publicly)"	up to 25% of the time	between 25% and 50% of the time	Yes	I have to understand the original intent of the files being modified to know whether the changes make sense.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"It always goes to our feature crew, plus any other interested parties."	Yes	The comments tend to be much more interesting and detailed when the reviewer is familiar with the code under review.		michbern	michbern
6504406	Development		10	9		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Get context on why a change was done in particular way, understand the bigger picture, brainstorm other ways of accomplishing the same task, etc."	up to 25% of the time	between 50% and 75% of the time	Yes	"understanding the flow of the code takes longer, may not understand the relationship between objects/methods, etc."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"We typically try to choose people who are familiar with the code in question or who are domain experts.  If neither of those are available, we typically have at least 2 people sign off on the review, making sure that at least one of those is at least ""Senior"" level."	Yes	The reviewer tends to have more context on how the change might affect other scenarios.  He/she also knows the common patterns used and can ensure that we have consistent code quality/style.		joncole	joncole
6504411	Development		17.5	12		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"When their responses to questions raised within CodeFlow are too terse, or when there is something fundamentally wrong with the entire check-in."	between 50% and 75% of the time	up to 25% of the time	No	"New files are easier to review since they carry no baggage and there is no existing code that depends on them. Existing files which are not owned by me are hardest to review since I have to first understand what they do and then figure out how the changes impact the existing system. However, when files are not owned by me, I'm typically not the main reviewer, so overall I don't put as much effort into the review process as in the cases where I am the main owner/reviewer."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Technical leads and parties who are affected by the change.	Yes	People who are familiar with the code will provide more substantive comments which people who are less familiar will tend to concentrate on more aesthetic/mechanical aspects of the code being changed.		ylevanon	ylevanon
6504414	Development		3	3		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"					between 25% and 50% of the time	between 50% and 75% of the time	Yes	"The value in a code review is to find logical bugs and also possibly better ways of sloving a problem, this can only happened with new code if you fully understand it"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			select people that are familer with the code or the feature that i am working on	Yes	if the code review is just for following the coding standards or will the reviewer find deep logical errors that i might have missed	"In my experience the quality of a revier that a reviewer gives is different person to person regardless of ownership of code or their level, it might "	alexsha	alexsha
6504416	Test		14	12		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				What are they trying to address?	between 25% and 50% of the time	between 50% and 75% of the time	Yes	Understanding what is being done and how it fits into the overall solution.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Team and those who have touched the code before.	Yes	Much shorter.  Better understanding of the types of bugs that would get through or a better understanding of the coding style one has.			jasonci
6504418	Development		15	4		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				- If a new component is introduced that doesn't mesh with the established architecture - If a new design is introduces that is overly complicated - If code is being modified in an area that I'm not familiar with	up to 25% of the time	between 25% and 50% of the time	No	"On average, I'm estimating about the same time for both.  If I'm familiar with the code, I tend to analyze the changes in more detail with an eye for how it fits into the overall design and logic flow.  For code I'm not familiar with, I may spend time understanding the code and logic flow, but less time examining the detailed changes."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"People who have the most experience in the area, people with whom I may have collaborated with when designing the feature, the code ""owner"" if there is one."	Yes	Feedback tends to be more targeted and detailed in scope.		lamoore	lamoore
6504420	Test		7	2		14	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the logic is very complicated.	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			I select the people who are familiar with my work.	Yes	"The more familiar they, the more issues they can find "			kgao
6504422	Development		11	7		4	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Usually when I want author to make significant adjustments to his change.	between 25% and 50% of the time	up to 25% of the time	Yes	"I need to understand what's going on in this new (for me) file first, right?"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I pick those who know most of the code that I'm changing, or where a part of design process for new code."	No			alexeyg	alexeyg
6504423	Development		10	9		8	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important"				When there are time constraints or if the issues/topic at hand is tedious to discuss via comments/mail.	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"We mandate a particular alias - ends up going to the whole team (PM, test, management, etc.)"	No				pjlittle
6504438	Development		7	5		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"				"Whenever the code review does not globally go into the direction it is supposed to. I would also directly talk to the the author if my comments are too important to be wrote down. In 99% of the cases, I won't go talk to the author for a technical reason."	between 25% and 50% of the time	up to 25% of the time	Yes	"We take code reviews very seriously. If I am asked for a review, I will spend the necessary time to understand what the code does first, and what can be improved then. When I know the code, I just skip the first step."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I send it to developers / testers that are in my direct area of collaboration. I always put my whole team (including PMs) in CC.	Yes	I will take a great care of his comment and think twice before replying anything.		yabromba	yabromba
6504449	Development		19	13		6	No	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Sometimes it is useful to demonstrate the operation of the app with the pending changes. Other times it is necessary to use a whiteboard to explain the changes. Both of the above are sometimes difficult to capture in code or review comments.	between 50% and 75% of the time	between 50% and 75% of the time	Yes	Additional time is required to understand the overall purpose of the existing code in a file with which I am not familiar.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I usually choose people who have at least some familiarity with the code being modified.	Yes	I get more and better comments from people familiar with the code.	I really like the diffing engine in CodeFlow. I wish it was exposed as a general purpose diffing tool that worked with TFS. I normally use TfsOdd (from http://toolbox) for that but it appears to be orphaned and is getting quite old and it doesn't support TFS 11.	adamszo	adamszo
6504450	Development		25	11		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"In case of a more complex design issue, or to walk through the comments to explain review comments."	up to 25% of the time	up to 25% of the time	No	Will focus on the areas where I can add value.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			familiarity with the code base or general expertise in a certain area (ie performance)	No			mwories	mwories
6504454	Development		13	6		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes	"It all depends on what the changes (codes) about. For the areas that I am familiar, it won't take long to review. Otherwise, it might take a bit longer."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			people with domain knowledge about the change I make	No				
6504455	Test		9	6.75		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"- If the approach is far off where it needs to be. Example from recent history, we had one particular review (1000's of lines of code) for remote management for a queue, the developer implemented his own serialization, comminication and client/server arch"	up to 25% of the time	up to 25% of the time	Yes	"Small changes in the scope of a large system, it can be difficult to understand the broader impact. I like to dig around and see how the whole thing ties in. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Feature team + QA + any avaliable expert in that area. E.g. if i'm doing threading, I'll including our ""threading dude"". "	No				pprice
6504457	Development		1	0.5		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Never.	Never	Never	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"All code reviews go to the same alias (and at minimum, everyone on my immediate team is on that alias)."	Yes	More likely to catch design flaws.			mattdev
6504459	Test		6	6		35	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Only if there are multiple iterations and comments are lost, I request them to re-submit."	up to 25% of the time	up to 25% of the time	Yes	"- Take time to personally understand the coding style and workflow of newer files, helping me in the future code reviews and also if I take ownership of the code I'm reviewing later, also to help select good examples for others."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Fixed set of code reviewers on  our team Top developers/testers familiar with the code Set of people whos files I'm modifying Relevant people from the bug if related to a bug fix	Yes	More questions like why this is done way and not the other from  a newbie to that code		sampatel	sampatel
6504461	Design and UX		2	2		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Whenever there's a part of the code that doesn't make sense, I'll reach out to the reviewer. Also, when put onto a code review without much context to the problem, I'll reach out."	between 50% and 75% of the time	between 25% and 50% of the time	Yes	"It takes me a while to understand exactly what's going on in the code. In order to provide meaningful feedback that can actually improve the code, I need to review it."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"First, I add all my immediate team members. Next, I'll add people who have been involved in coming up with the problems and solutions."	Yes	"If the reviewer isn't familiar with the code, they tend to comment much more on code cleanliness than on actual correctness."		hetappen	hetappen
6504465	Development		3.5	3.5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				The code changeset is very big. Or have totally different implementation approach. Or the code change is a little bit hard to follow.	up to 25% of the time	between 25% and 50% of the time	Yes	Takes more time to understand the logic.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have area owner on our team. So first chose from this list. Then any person working on the project. Then the owner of the code if he/she's not included yet. Then related team alias.	Yes	"Owner or reviewer who's very familiar with the code tend to give more constructive, or more from the design perspective. Other people more from the code improvement like clear comments, dead code, etc. "		qiyuan	qiyuan
6504469	Development		15	13		3	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				When it is too length or unefficient to explain the reasons behind comments/suggestion to the change.	between 25% and 50% of the time	up to 25% of the time	Yes	Need to understand the flow and logic overall.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"ownership, or familarity of area of changes."	No			haof	haof
6504474	Test		4	4		20	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"Code consistency, design integrity and validation."			"Unless the comment requires more in deep talk, we do. Otherwise, codeflow is good."	More than 75% of the time	More than 75% of the time	Yes	Need to understand functionality being tested/developed.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We always pick immediate team for small changes/updates. Any new test has to go through software review team with proper documentation.	Yes	In general we always get good reviews and feedback. But mostly there's always a person included in the review who is an expert in the area.			alcastan
6504479	Development		4	2		3	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"					up to 25% of the time	up to 25% of the time	No		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes				danielvo
6504482	Development		2.2	2.2		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"1. When I have major disagreements with some code style and think they are better explained/justified in conversation, with diagrams, ... than in code review text  2. When I am lacking context on the change (Why are we changing this? Why are we fixing something here instead of there?)  3. When the changes are so big that I need more high-level design background to consider whether this is an appropriate solution"	between 25% and 50% of the time	up to 25% of the time	Yes	I don't sign off on changes that I don't understand. It takes me longer to understand code I'm not familiar with.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The teams I work with have several distribution groups specifically for code reviews (i.e., experts on a feature area). If I'm making changes to feature X, I add FeatureXCodeReviews.  I also try to add: 1. The tester who will validate my changes (I am dev) 2. Other relevant code owners 3. Whoever opened bug/request, if relevant"	Yes	"Often people who fully understand the code leave more valuable feedback. E.g., higher-level recommendations or design suggestions. IMO these are highly valuable. Anyone can say, ""Hey, looks like you can use this pointer before valid initialization."""		aulidaka	aulidaka
6504485	Test		3.5	1		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"In case, there are multiple iterations to address the same comment."	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have a team alias to which we send all code reviews.	Yes	Their feedback has more depth.	I am not a big fan of diffing functionality in codeflow. It could use some work.		adraut
6504488	Test		2	2		7	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Code Design	up to 25% of the time	up to 25% of the time	Yes	Of Cause	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			team mate	No				hanl
6504489	Development		9.5	9.5		8	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				when the entire code needs to get changed either due to bad design or due to wrong scenario implementation	Never	between 25% and 50% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"people that have worked in that area, or owners of the code or subject matter experts"	No				nirand
6504509	Test		2	0.5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				If questions about the code are too complex or if I dont have idea about what the code does.	up to 25% of the time	between 50% and 75% of the time	Yes	You need to read the context of each change in order to understand the change and evaluate if there is another way to achieve the same result in a better way.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			"As a tester, I must send my code reviews to all other testers in my team (peers), to my lead and if it applies, to all involved developers."	Yes	"The process is smoothly. When they are not familiar with the code, they normally ask more questions about the way you did something, not neccesarily because it's wrong but to understand the code and get a better idea of what are you doing."		miantoc	miantoc
6504511	Test		10	10		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If it is a large code review (a couple hundred lines or more) then we require an in-person architecture and code review.  This allows all the technical leads to provide feedback and become familar with any major changes to the test automation system.	up to 25% of the time	between 25% and 50% of the time	Yes	As a code reviewer it is my job to make sure no duplicated code is added to the code base.  This has a tendency to happen in test automation libraries. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			There is a set list of people that are the official code reviewers for a specific area of the code base.	Yes	There are more suggestions on how the new code should fit with in the structure of the code base.	Our team uses a tool called CodeFlow (http://codeflow).  We really like it makes it easy to share comments. 	enewman	enewman
6504517	Development		1	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"I would talk in person to a developer if the code I reviewed from them was fundamentally confused about what should be happening (i.e., the developer misunderstood what the goal of the code was to begin with). It would be important for me to touch bases with the developer at this point to understand the confusion.  "	up to 25% of the time	between 25% and 50% of the time	Yes	"For files that are new, I feel that I need to read each line more thoroughly and think about the implications of each line; it takes time to form a mental model of the state of a piece of code. If I know the code well, it is easier for me to see that a piece of code erroneously does something to the state of the code."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Our team has a designated ""always must review ___ person's code."" We also add an ""expert"" in that area on our code review as well. When our team hits lockdown before a product ships, we further increase the requirements for the code reviews: we require three sign-offs. The first is the person listed above, the second is an expert in the area, and the third is a person who isn't familiar with the code. Finally, after those are approved, the code goes to a room full of senior+ devs that review the code in a round-table format."	Yes	"The code review comments are typically more detailed, with more information focused on the whole effect on the code. When someone reviews my code without being familiar with the code, the comments are generally very low-level (""you should name the variable X, you should not use that standard function""). "		codym	codym
6504521	Development		4	1		7	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"Generally, only if I have concerns about the approach the author uses to solving the problems that are too serious or complex to fit into the annotated-diff format of CodeFlow or similar code review tools."	up to 25% of the time	up to 25% of the time	Yes	"Because I read through those files more carefully (and often in full), as opposed to files I am familiar with, where I only look at the areas that have changed."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			"I choose people who have made the most changes to the source files recently, as they are going to be most familiar with my changes. (Our team does not have strict code ownership.) In addition, I always include the whole team as a secondary reviewer (""optional"" reviewer in CodeFlow)."	No			miratana	miratana
6504522	Development		13	11		8	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"When suggesting alternate solutions, performance related improvements it is getting critical to talk to author in person."	up to 25% of the time	up to 25% of the time	Yes	"New additions always take longer to understand the implimentation and also to check if it falls in best practices, improved code reusability. There are cases where code review on delta changes are easier due to the limited nature of changes."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Mandated reviewers are most times SMEs in specific area. Always we include entire dev team alias in the optional list.	Yes	SMEs can bring in the tribal knowledge on specific implementation and help in slippery slopes. This has been major advantage of let the SMEs review the code at least once.	"The tool is great and very friendly. It will be nice to keep the optional alias all the time during the conversation of emails. Currently, when you submit the review comment, the email is limited to folks in mandated list. It should keep the optional reviewers in the notification. That will help rest of team to catchup and learn from code review exercise."	pramoo	pramoo
6504526	Development		10	4		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Design has major problems Context/intent of change is not clear	More than 75% of the time	up to 25% of the time	No	I do less in-depth review of such files	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Org structure and familiarity with the code	Yes	Much more detailed feedback from people who know the code well/own the files			dmatson
6504532	Test		6	5		3	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"The code needs too much change that major part needs to be rewritten. Review comments got rejected and several back and forth discussion on it, which personally i think in-person talk helps clarify confusions."	up to 25% of the time	between 50% and 75% of the time	Yes	Needs sometime to understand the context and design of the new code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Related stakeholders of code. Person may be affected by code change. Technical guru in team. 	Yes	People tends to ask questions more in feedback if they not familiar with code.		danwu	danwu
6504540	Test		7	4.8		12	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If there is a point of contention or misunderstanding between myself and the submitter, then I will proceed to talk in person."	up to 25% of the time	up to 25% of the time	Yes	"Extra time is needed to get some context of the code changes.  Without familiarity, more time allows me to discern connections and implications in the code that I am not currently aware of."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Based on team ownership of the code.  If the code you are touching is test code, the review is sent to the SDET team.  If the code is game engine code, it is sent to the engine team.  If the code touches a broad range of files, then the review should be sent to the entire dev team."	Yes	"If the reviewer is very familiar with the code, they are more likely to offer better suggestions and ideas for ways to accomplish your goal with the change."	"An unspoken expectation that arose from our code reviews is that the owner (or someone familiar with the code) be required to sign-off on the code review when that review was sent to the entire team.  In this manner, I believe we get visibility of the code to the entire team, but still get the people familiar with the context of the change to make meaningful comments."	kevinn	kevinn
6504541	Development		10	10		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				#NAME?	between 25% and 50% of the time	up to 25% of the time	Yes	"In many cases, I want to understand the context of the change.  For files that are new to me, I need to take time to understand the file, whereas for familiar code I can usually focus on the change."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"Prefer people who have already edited or reviewed the code in question.  Of I'm editing code that someone else owns/works on primarily, I will choose them first.  The rest of the team is added as optional/FYI and can choose to review."	Yes	"Varies based on the reviewer, but generally: -feedback is more specific -feedback is often more useful -sometimes feedback is too conservative The positives outweigh the negatives generally."		joshm	joshm
6504543	Test		1.5	1		12	Yes	"Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If I have been assigned as a reviewer but do not understand the changes being made (what they do or why they are doing it), I may go to the author for further clarification.  If I make a comment that they do not understand or resolve as ""Won't Fix"" I may go discuss it with them."	up to 25% of the time	between 25% and 50% of the time	Yes	"I typically will look at the whole file (or a larger part of it) to understand where the changes fit in to the whole structure of the file.  If I'm already familiar with the code, I can look at only the changes and get the same level of understanding."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People whose areas of ownership relate to the code review.  People whose input I value highly - those who have a proven record of providing valuable input in code reviews.  For small changes, I sometimes pick people who do not often have a lot of input so that my small change will not turn into a much larger change because the reviewer finds some unrelated issue in the file."	Yes	"I often find that if someone is familiar with the code, they have more input - sometimes it is more design-focused and less about correctness."		nocantor	nocantor
6504553	Development		5	5		1	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				The code change has major issue or doesn't comply with the design.	up to 25% of the time	up to 25% of the time	Yes	Need more context and background to understand the change.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Code owner and dependent component's owner.	Yes	"If the reviewer is very familiar with the code, he is more likely to provide some insightful comments."		mima	mima
6504555	Development		18	17		12	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance"				"Code that seems to not meet the requirement as I understand it, or code that is overly complex"	up to 25% of the time	between 25% and 50% of the time	Yes	"I like the understand the intent of the module, so I can well-informed comments "	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding"			"Based on pre-established area ownership or expertise, project leads, and a general code review alias for the team (listed as optional)"	Yes	"Concise, deeper comments.  More questions around the intent of the requirement."		glmiller	glmiller
6504556	Development		15	12		9	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"If the changelist is sustential, either new feature or big change to existing design, I think is important to have face to face discussion. Otherwise code review becomes mostly focused on code convention, and pure language level best practices as opposed to a discussion around how that fits in the overall picture of what we do."	between 50% and 75% of the time	up to 25% of the time	Yes	"Hard to say. In the end, I think it requires more effort and takes longer in order to provide insightful feedback."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I tend to include people that are familiar with the area being modified, or people you want to be aware of the changes you are making for backup ocverage."	Yes	"Good code reviewer usually provide good feedback regardless, but if the reviewer is familiar with the area they will provide a lot more insightful feedback and information. Otherwise it becomes more generic comments as far as style, code convention, and best practices."		lucianad	lucianad
6504560	Development		14	2.75		9	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Design considerations.	up to 25% of the time	up to 25% of the time	Yes	Understanding the component is vital to understanding the contextual aspects of the code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"It is based on my sub-team within my immediate team (ie. currently the ""Monitoring"" team)."	Yes	Comments from familiar people are more about the design of the component and less about code practices.		pflickin	pflickin
6504567	Development		11	11		49	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When their comments are sufficiently lacking or unclear and a round of codeflow/e-mail reviews has not been productive.  When under a time pressure, will fire off a Codeflow review and then visit the person to get the review done live."	up to 25% of the time	up to 25% of the time	Yes	Must first understand context of the existing code before you can understand the changes being made to it.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Area experts Previous reviewers Idle/Available reviewers 	Yes	"Usually will look at the change with a historical perspective of the kinds of problems that typically happen in that area. Those unfamiliar will still catch surface problems, but not deeper problems that require a more in depth understanding of the area and previous bugs that have occurred."		abishop	abishop
6504576	Test		5	3		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"					up to 25% of the time	between 25% and 50% of the time	No		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"								
6504577	Development		26	14		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"usage of appropriate patterns, alternate solutions"	up to 25% of the time	between 25% and 50% of the time	Yes	"most of the time it takes longer to reveal code intentions, or get a bird's eye view of the overall design, distnguish between intrinsic complexity and accidental complexity, etc."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"connections to area/s of code change, seniority"	Yes	"more pertinent/valuable comments, feedback is usually more structural in this case, better chance to catch a bug/defect."		cmihai	cmihai
6504579	Test		10	6		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	#NAME?			"- if the changes I propose will be very drastic, I would talk 1st with the code owner and then I would sent my written comments"	between 50% and 75% of the time	between 25% and 50% of the time	Yes	I need to understand the whole code flow	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Finding defects/bugs / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			#NAME?	Yes	#NAME?			
6504581	Test		12	9		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				During design changes needs	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			SRT members + feature crue	Yes	"More targeted comments, known design compromises are not commented upon."			
6504585	Development		6	5		20	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Helping improving the development process in general / Second Most Important"				"When a code review turns into a back and forth exchange of opinions, or if the changes are not clear by looking at the code itself."	Never	between 50% and 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Based on area ownership	Yes				
6504593	Development		17	7		13	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				In two cases: 1. I completely diagree with the approach/code and do not want to publicly comment on this. Usually happens with more junior developers... 2. I do not understand how the code change solves the problem/implements feature and need more context.	up to 25% of the time	up to 25% of the time	Yes	"1. Unfamiliarity with the code, its structure, dependenies, etc. 2. Actualy take the time to learn this code to give feedback I can be accountable for."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Using two criteria: 1. People who I trust to provide better feedback 2. People who are familiar with the area.	Yes	"More in-depth feedback, related to innerworkings of the code, its dependencies, etc."		pashag	pashag
6504594	Development		25	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				Code review is too complicated. Code review design is not obvious. Discuss alternative ways. Interested to learn more about the issue.	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			I send my code reviews to all team members.	Yes	Better code review comments.			
6504597	Development		8	6		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important"				"Usually if I don't understand the motivation for the change. It some cases the code may be so complex that talking in person may help, but that's rare."	up to 25% of the time	up to 25% of the time	Yes	Try to understand the design and flow of the code. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People on my direct team or people who own (have recently worked on) the files I've touched. If someone else will eventually be working on these files I make sure they're included as well.	Yes	"More likely to critique the algorithm and methodology of the new code, whereas those less familiar may just focus on syntax and obvious bugs."			trevora
6504599	Development		16	15		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the change is so complex that I need an overview of how the code currently works, what's broken (or needs to be added), and exactly how the implemented change fixes the defect or implements the new feature."	up to 25% of the time	up to 25% of the time	Yes	"I have to read more of the code to understand the context of the changes, and to verify that the changes don't have unintended side effects."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Standard team-specific code review request alias	Yes	"The reviewer often has comments about the correctness of the change or unanticipated side effects, vs. coding guidelines (syntax)."	"The motivations for code reviews change based on the reviewer & code review initiator.  For junior reviewers, Shared Technical Learning is one of the top 3 (as reading the code changes helps increase their knowledge).  For senior reviewers, 'Generate better ideas' is one of the top 3 (as it's expected they have the API knowledge already, and they are able to suggest alternative approaches)."	jdooley	jdooley
6504600	Development		13	13		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			File/component ownership and/or expertize	Yes	More detailed			
6504602	Development		18.5	18.5		7	Yes	"Finding defects/bugs / Third Most Important;#Helping improving the development process in general / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				"In person (as opposed to comments in CodeFlow, say), it's really only if I have a question about the motivation behind the change that's likely to be too complicated to ask about in CodeFlow or email.  For my particular team, this is often because we're responding to changes from an outside team, and it's easier to get this background information in person."	up to 25% of the time	up to 25% of the time	Yes	"Beyond obvious errors (like syntactic ones, which the compiler will catch), I'm looking for changes that impact expectations in other parts of the code.  If I'm not as familiar with the files I'm reviewing, I may even have to open files that aren't a part of the change to understand the full context."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I send code reviews to the team that owns the code.  In general, this is my immediate team, but sometimes it's to ""peer"" teams if my changes cross over into their ""territory""."	Yes	"Reviewers who are very familiar or owners are typically faster to respond, and have much more specific suggestions and recommendations.  This is especially true when changes cross over into another team's code, and leveraging their expertise in the review is invaluable."	"I hadn't thought about this much before, but based on question 15, a code review tool that automatically suggested reviewers based on the changes would be excellent.  (For example, by looking at the people most often associated with check-ins of the changed files.)  Also, a way to rate feedback as ""useful/not useful"" that could roll into whether a reviewer was considered a high-value reviewer.  (Which could then inform the choice of who to send a review to.)  Basically, ""gameification"" of code reviewing.  I think that could impact the code review process in a good way."	JaredR	JaredR
6504605	Development		23	21		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				When the description of the checkin does not include enough detail to understand the motivation of the fix.  And/Or if there are not enough comments.	Never	up to 25% of the time	Yes	"If I don't understand the current functionality, it is more difficult to understand the changes."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Required reviewers: People who have modified the code before, those with the most skill in the area (native/managed for example), tester for the area.  Optional reviewers: Junior developers, manager/lead"	Yes	"The comments contain more information about the design, rather than the details."		sampa	sampa
6504607	Development		15	12		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"When I have questions about the motivation of the code, or if I don't understand what it is doing. Typically the former. If I don't understand the code, we'll have a conversation about improvement or documentation."	between 50% and 75% of the time	between 50% and 75% of the time	Yes	I'd like to understand the implications of the change	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Just the whole dev team.	No				lamadio@microsoft.com
6504610	Test		8	4		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"When I found the same issue over multiple parts of the code, I prefer to talk with the person to get more information of why that decision was made."	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			We have a list of reviewers to select the next one to submit to	No				
6504613	Test		15	15		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	Typically to share ideas for coding.  Protect from simple mistakes.  Also makes everyone familiar with the code changes that are happening around us.			Typically only when the change a large one and spread out and the interdependencies are not completely clear or I have a question on the use of a specific method over another.	between 25% and 50% of the time	up to 25% of the time	Yes	It just take longer to get an overall picture of the code and it's dependencies and the negative impacts the change could have as well as making sure the style follows the existing code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Those who have knowledge of the code and people I believe have good coding skills and I want to learn from.	Yes	"Typically I get better feedback when from someone who has good coding skills but may not be as familiar with the code.  They will question why it is coded a certain way even if I am just following the existing code.  Someone who is familiar with the code will let it slide knowing it is the original style the code was written.  Even if I don't change the code to keep the style similar, I can use the information later if a major rewrite happens or developing other similar code in the future."		tsing	tsing
6504616	Development		5	0.3333333		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"There are a variety of reasons.  * Want to include draw a picture for them, which is not possible to do in CodeFlow.  * Sometimes it's faster to have a discussion with them in person in person.  * When I need to reference several differnt parts of the change. That is, there's no way to comment on multiple files all at once."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	"I have to spend time familiarizing myself with the code before I can review it properly. This may involve reading dev specs to figure out what it is supposed to do, etc. I don't have to do this if I'm already familiar with the code."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			I generally require the test engineer and the person who wrote the code originally if I'm modifying someone else's code.  I put the rest of my team as optional reviewers so that they can look at it if the want to.	Yes	"People familiar with the code can generally comment more on whether the code is doing what it is intended to do rather than what it actually does. i.e. Does it do what the spec says?  People less familiar with the code generally comment mostly on best practices, style, etc. Things that aren't as critical to the correctness of the code, but improve the quality of it."	"I think code reviews are valuable in two ways:  1. It allows other people to look at the code and make sure it is correct. No one is perfect and I have found many bugs just by inspecting the code.  2. By increasing code visibility, you increase the opportunity to learn new best practices, patterns, and techniques. I've learned better ways to do things that improve my code by reviewing other people's code.  To maximize the benefits, I think we need to instill a culture where you sign off only when you believe the code is as good as it can be. Google has one of the best code bases in the world because their engineers do this.  Also, I've noticed some people dislike putting more than 2-3 iterations. I think this is because they feel like many iterations marks them as a ""bad programmer"" who can't get it right the first time. This is wrong and a bad attitude to have in my opinion. We should encourage many and fast iterations."	jameslao	jameslao
6504619	Development		5.5	4.5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If they're unable to communicate effectively with written English, or if I anticipate a serious design discussion.  In many cases, others don't comment effectively (either in source or in reviews). I frequently need to discuss in person when that is the case."	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I choose one other that has some level of familiarity, or the other developer most likely to disagree with the changes -- I also include the rest of the team as optional."	Yes	"Yes, if someone is very familiar they often can prevent bugs, or know the correct scope for a change (missed/impacted scenarios)."			
6504621	Development		19	8		20	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Too many comments, approach is generally completely off track.   Reasoning for a comment is hard or too long to describe."	up to 25% of the time	up to 25% of the time	No	It only takes longer if I don't understand the feature/bug/issue the person is trying to fix.  Overall though the basic patterns are the same.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"We have an alias per feature area, goes to everyone on the alias."	Yes	"Generally this is about focus, most people just don't care about that area so the feedback is light.  People tend to focus on their specific part. As architect, I care about the entire code base, so doesn't matter how familiar I am.  There are a couple others like me. "	"Other tools besides codeflow added to concept of a checklist, so that beginning code reviewers can learn what to look for.  Would also love some sort of ""engagement"" score that tells how much people are engaging the process.  Would love if I can enforce more process, such as you cannot close a review with active comments.  I created the Code Review Tool, before CodeFlow, which gained some traction.  Dropped it for CodeFlow as they leapfrogged us a bit especially with multiple iterations and better differencing, but still missing a few things."	clevel	clevel
6504622	Development		10	3.5		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"if my comments are to long, if the code is too far from the goal."	up to 25% of the time	up to 25% of the time	Yes		"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding"			"all my team cced, the person who is most familar with the arae is mai reviewer. "	Yes	"deeper commenmts, more substance, design comments vs. style comments."		gkliot	gkliot
6504624	Test		16	14		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				When the comments are missing to better understand the changes	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Each author has the assigned reviewer	Yes				
6504630	Development		10	10		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If my comment is large enough that I can't leave it in the review itself.  If the reviewer dismisses comments with no justification.	Never	Never	Yes	Large changes in unknown systems requires additional time to understand the structure of the code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Team CR aliases are included as optional. Immediate test, dev are included as required reviewers.  Additional people are added on a as-needed basis."	Yes			mstark	mstark
6504632	Test		5	2		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Most typically if there is a design choice I do not understand the reasoning behind I will discuss with the author why they made such a choice. Otherwise, it is usually because I disagree with some change that is being made and we need to resolve it, despite the code being technically correct. The other one is if I notice a consistent issue with code not meeting our standards I will go talk to the author about how to set up their IDE to prevent issues like it in the future."	up to 25% of the time	between 50% and 75% of the time	Yes	I have to read through closely to understand what is being done. An existing file I am very familiar with I know the code already so the changes are easier to evaluate.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"First up are any owners of the files I have modified. Next are other people working on the same project as I am. I will typically include my lead to give him insight into the changes I am making. Finally I will include people who might be interested in my changes due to code ownership changes, ramp-up, or their role in giving me advice around my changes."	Yes	"They typically provide a deeper review with better evaluation of my changes. Someone less familiar with the files will give higher level advice on the code changes but are typically more focused on style/standards/comments to keep the code clean, readable, and maintainable."		joelrei	joelrei
6504638	Test		6	0.8		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Not Top 3 Importance"									"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding"			Automatically selected based on person's area and expertise	No				richa
6504648	Development		3	3		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				If I don't agree with the direction/design of the code change	between 50% and 75% of the time	up to 25% of the time	Yes	It takes a little bit of time 					Yes				
6504650	Development		9	9		2	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"1) If a comment could lead to a discussion. Face-to-face conversation is much more efficient than e-mail or CodeFlow comments when it comes to back-and-forth discussion. 2) If a changeset is large, a high-level description is often more efficient in person, since I can ask questions during the course of the description. 3) Similarly, even a small bug fix that has subtle implications can be better discussed in person, so we can hash out the issues we think of."	up to 25% of the time	More than 75% of the time	Yes	"I like to have a clear understanding of what the code in question does, so I read it thoroughly. When it calls out to other files, which might not have been included in the changeset, I need to look them up manually."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"There is one other developer on my feature, so he does most of my code reviews. When I'm working in areas outside my feature, I find a feature owner, or at least someone who is familiar with the area affected."	Yes	"If the reviewer is unfamiliar with the code, they have to take my word that I'm doing the right thing. Usually that means they aren't going to catch anything I haven't already thought of."			jodavis
6504658	Test		2	1		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When there is a disagreement or confusion in the code review discussion, and it would be simpler to discuss in person."	between 25% and 50% of the time	up to 25% of the time	Yes	"I have to analyse entire files and their dependencies if I'm wholly unfamiliar with them, while files I'm familiar with I can simply review the changes being made."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I send code reviews to my immediate team members (unless I feel certain they would not be interested in/affected by the changes, and know that they are busy), as well as anyone I've discussed the changes with or is directly affected by them."	Yes	"Feedback is more helpful, generally, and requires less discussion about the merits of different choices."			daweisz
6504659	Development		8	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				* Huge changes that I want to internalize the whole design. * Areas where I'm completely unfamiliar with the code	up to 25% of the time	between 25% and 50% of the time	Yes	I may not understand the environment or constraints where the code is being introduced.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			* People on my team * People who have owned code in that area * Code Tags for ownership	Yes	"If they are familiar I get better feedback.  If the reviewer is unfamiliar, it seems like a ""rubber stamp"", where they didn't understand what I did."	"Teams need to be more hardcore about code reviews.  Too many rubber stamps where it's required to get CR signoffs, but the reviewer is too lazy to do a good job reviewing and understanding."		
6504667	Development		13	5		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important"				when there's a philosophical difference in approach	between 25% and 50% of the time	up to 25% of the time	Yes	"When reviewing familar code, I can just look at changes. When reviewing unfamiliar code, I need to take the time to understand the code prior to changes"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I add the original author and cc the code review alias	Yes	the owner can give me better insight into the logic for the most efficient approach			amdullar
6504672	Development		10	6.5		8	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance"				"The change could cause regression, better way to implement it, incorrect design, etc."	between 50% and 75% of the time	between 25% and 50% of the time	Yes	It takes longer to understand the code which is written by others.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Lead, people who use the feature and test counterparts."	Yes	They tender to give more valuable feedback.		haitaoj	
6504673	Development		13	4		3	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important"				"When the code changes are huge, and I need to understand the reasoning behind the code changes. "	up to 25% of the time	between 50% and 75% of the time	Yes	You need to understand the business logic behind the changes.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Team policy	Yes	More relevant and helpful		zhwa	zhwa
6504675	Test		9.5	9		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If the issues cannot be addressed by comments and questions and/or require in depth follow up	Never	between 25% and 50% of the time	Yes	Lack of familiarity with the initial code setup	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who are familiar with the area under review	Yes	"For someone who is unfamiliar with the area, the comments and feedback are generally generic"	Would be great to extend CF to allow visual studio like jumping to function and variable definitions		smitagu
6504688	Development		15	11		6	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When their review code is specifically questionable, but not due to defects. Or when I am not familiar enough on a specific element or resource."	up to 25% of the time	up to 25% of the time	Yes	"The new code may be inroducing new or added design. If so, this new code needs to be in compliance with established quality bars and our best practices. Also, the related unit tests or lack of need attention too."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			All immediate team members are required. Extended team members are added as optional.	Yes	"One with deeper knowledge is likely to impart a more complete, poignant review."			
6504720	Test		7	6		10	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				#NAME?	up to 25% of the time	up to 25% of the time	Yes	Need to also read the unchanged code to fully understand the intention of author's change.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Feature team, ownwer of the code modified, experts in the area, immediate team members, code review alias."	Yes	- Thoroughness of comments/feedback. - Unnecessary comments/questions that takes author's time.	"For team awareness and collective code ownership, I think it would be interesting to research effectiveness of comments/feedback if there were feature to flag comments that are helpful. This way other team members can go through comments much quicker without overlooking important comments. Also correlation between number of reviewers, turnaround time, number of comments and number of lines changed due to code review might lead to good guideline/expectation for submitter/reviewer."	taksaku	taksaku
6504721	Test		18	15		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				For any issue that requires more than a few short sentences to explain. I still use the code review tool (code flow) to put a brief summary of the issue as a reminder.	up to 25% of the time	up to 25% of the time	Yes	"The real answer for Q12 is ""it depends"". For simple new files e.g. enums, simple container classes it does not take longer. It does for code with interdependencies or higher complexity. Other than the amount of code that needs to be reviewed some new files take more time because code review tools do not facilitate understanding code context (e.g. where is the class/method being used, where is it defined, etc)"	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Owners of the code I'm changing, people involved in the feature/project (with good understanding of the code or at least the context in which it will be used), people mandated by internal processes"	Yes	"People familiar with the code are more likely to give useful feedback (e.g. alternative approaches, code reusability) vs. the other ones who usually stop at naming conventions and superficial code readability aspects."	"For Q14: build breaks may be caused by trivial stuff such as compile errors. Those could be caught in CR with low understanding. However, there are other processes in place to catch those (e.g. don't submit a CR if you cannot build on your machine). More subtle build break causes (platform-specific, automatic code generation, strong name checks) need a high level of understanding to catch in a CR. Usually not feasible to do, so we have other processes in place for those too."		
6504756	Development		12.5	12.5		6	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Fundamental design alternative, design not clear"	up to 25% of the time	between 50% and 75% of the time	Yes	Have to understand the context for the new code/file.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Send to the entire team.	Yes	Deeper understanding of existing design and design history.			erinhon
6504763	Development		5	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the code change is for a project or a bug that I'm not familiar with, or if the change is large enough that it will take me a long time to figure out how the pieces fit together."	up to 25% of the time	between 50% and 75% of the time	Yes	I need to get some context as to what the file does and where it's used before I can evaluate the change that's been made to it.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I usually pick the dev/test owners of the feature that's being modified, as well as people from other teams who might be affected by the change I'm making."	Yes	"Much more detailed feedback from the owner, as well as better suggestions for refactoring the code to be more maintainable/readable."		archak	archak
6504770	Development		15	13		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the rational for a change is not obvious. When something is complex ant not easily understandable.	between 50% and 75% of the time	between 50% and 75% of the time	Yes	"It takes more time due to trying to understand dependencies and potential side effects. With code I already own, I can usually see more easily what those will be."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who are familiar with the code/scenario if possible. People who have a dependency or interest on the change.	Yes	Usually see more side effects or unnecessary or missing necessary changes.		dlinsley	dlinsley
6504781	Development		13	4		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				"if i don't understand the code, or the rationale behind it. if my comments aren't easy enough to understand and i need to explain face to face. if i feel the code is way-of and misses the intention."	up to 25% of the time	between 25% and 50% of the time	Yes	"it's harder to produce a quality review without understand the context, knowing the intention behind the code etc. therefore, it takes a lot more time to try and see if code that might correct on its own, is in fact breaking the end to end scenarios somehow"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"code owner or co-owner or a person who knows this code well. people who i respect technically and can give me good feedback. if possible, combine the above :)"	Yes	feedback will be more thorough and will be able to point out bugs/issues that span outside of the scope of the immediate submission.			sherlich
6504782	Development		18	18		44	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If the intent of a change is not clear and commenting does not provide appropriate context, I will follow up with a developer. Alternatively, I may be very busy and want to hear the intent from the developer rather than having to reverse engineer the problem space in the review."	up to 25% of the time	between 25% and 50% of the time	Yes	"For a given change size and/or complexity, understanding how the change fits into the overall intent of the code takes longer."				"I choose from code area owners (assuming that I can find them) or subject matter experts from similar areas (if I cannot find the actual owner). For areas within the team where our ownership is well understood, I will typically try to select a senior developer to double check my work and any affected team members in order to raise awareness of my changes."	Yes	Reviewers that are familiar with the code are able to consider the change within the context of nonobvious or subtle scenarios that potentially had not been considered.			jasonsm
6504792	Test		1	1		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If the conversation we are carrying within CodeFlow itself gets too big.	up to 25% of the time	up to 25% of the time	Yes	Just to get acquainted with the code and what it does.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"The people who are also working on the same set of code, the people who are affected by the code review submission (their work takes a dependency / is a dependency)."	Yes	"More in-depth, less clarification questions."		ederlynl	ederlynl
6504797	Development		14	2		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Helping improving the development process in general / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				Reasons for a change is not obvious based on the change description and code modifications.	up to 25% of the time	up to 25% of the time	Yes	In order to understand the context code within the files being modified.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Immediate team members who have worked in the code space being modified. Immediate team members who will need to understand the code space being modified.	Yes	"Comments/Feedback is generally more in-depth.  Comments may include logical coding flaws, suggestions on better design, historical context, etc."			alchin
6504802	Development		3.5	3		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If there is a general reocurring pattern that I want to fix e.g. poor style. Also if I can't express the reason for my opinions well enough to fit in a small text box.	up to 25% of the time	up to 25% of the time	Yes	In order to feel like I'm helping catch bugs I need to gain an understanding about the call structures and behaviors. In order to comment on style I need to see what the existing style for that project already is.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Those people who are designated as review buddies for a product.	Yes	I will put a higher weight on comments given by people familiar with the code.			mava
6504820	Test		10	4.5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Whenever something is too complex to explain only via tools.	between 50% and 75% of the time	up to 25% of the time	Yes	Time is spent in getting to know the files.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			SRT alias	Yes	Feedback is more relevant when the person owns the code.		afurtado	afurtado
6504822	Development		16	7		16	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance"				When seeking clarification / asking question that likely require more than a one sentence answer.	up to 25% of the time	up to 25% of the time	Yes	"Less context on the individual change, its purpose, etc..."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Based on code area ownership / knowledge. Team code-review alias.	Yes	Trust the answer more readily.			dbalma
6504832	Development		4.3	3.2		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"If there is a better design, then that needs to be talked in person to ensure everyone is on the same page. "	up to 25% of the time	up to 25% of the time	Yes	 Familiar files are easy to comprehend and easy to make sense of the new changes and its impact. 	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I select people who own the code and who worked on it before. 	Yes	I get more comments about the code quality of the changes apart from normal code review feedback. 			rajpon
6504836	Development		15	12.5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When grasping more context for the change. Or the context isnt clear at all.	up to 25% of the time	up to 25% of the time	Yes	"Becasue I need to grasp the understand the whole (it is not already there), reviweing a change is simpler becasue it usually means I already have seen parts of that area.  (New files are similar to new ""to me"" areas)."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			People that are aware of the area. Or depend on it.	Yes	Their comments seems to have deeper meaning (their input goes beyond the superficial comments on code reviews).			
6504843	Development		1	1		2	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				If the author is making unexpected changes	up to 25% of the time	Never	Yes	Must examine all of the code (even the unchanged portions) to understand the changes.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Owners of the code or my team	Yes	They enforce the code standards that are specific to their code.			josiahg
6504849	Development		11	7		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				To clarify a suggestion or question that cannot be resolved in 2-3 sentences of a review. Also to provide alternative algorithms that won't fit in a code review tool.	up to 25% of the time	up to 25% of the time	Yes	Often need to understand the business logic before determining whether the implementation makese sense.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			1. Members of immediate team (Dev and SDET). 2. Previous owner/developer of affected code. 3. Any outside experts (technical or project) that may have somethign to contribute.	Yes	Original owner can provide insight into the original decisions made when coding. What may look like an inefficient process may have had a good reason for being implemented.		jaredk	jaredk
6504860	Test		7.5	6.2		3	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Helping improving the development process in general / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				new joinee or different coding style	up to 25% of the time	Never	Yes	Lack of comments and familiarity	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Generate better ideas, alternative approaches / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"				Yes			nimishv	nimishv
6504875	Development		2	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When seeing totally unexpected changes, or when there is disagreement on implementation based on specific use-case analysis. Sometimes functional designs need to be re-considered."	up to 25% of the time	between 25% and 50% of the time	Yes	"Big-picture impact analysis requires contextual understanding. When reviewing a small, unfamiliar change, it is often necessary to read through much more code than that being reviewed."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Assigned area of responsibility or historical familiarity. Assigned tester is always included. Remaining dev team becomes optional.	Yes	Quality of comments is higher if reviewers are more familiar with the files being reviewed.		brmorton	brmorton
6504882	Development		10	7		7	Yes	"Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important"	A significant part of the team is in a remote location. Often times code reviews are the most productive way of communicating between devs. Sometimes it is easier to understand the point by looking at code than by sending emails.			When I am confused or not sure what the code is supposed to do. IN other words when i'm lacking context.	up to 25% of the time	More than 75% of the time	Yes	"Because I have to figure out the context in which the code change is made. Familiar files rarely change significantly and even if they do, the context usually stays the same."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes	More to the point.			piotrci
6504884	Development		13	11		8	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance"				"1. When the code you're reviewing is new to you and you need to get a better overall understanding of the area or how the part you're reviewing plugs into the whole. 2. If there's a signficant disagreement on the design of the feature, comments at that point become a bit moot, and whiteboarding or f2f discussions are necessary."	between 25% and 50% of the time	between 50% and 75% of the time	Yes	"It takes a little more time to ramp up on the code area.  You don't want to simply sign-off if the atomic change looks good, because that change while looking good atomically, may not work correctly with the whole system."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"1. Someone who has worked on/owns the feature area 2. Someone who works on similar aspects of the feature (another UI peer for a UI change or another services peer for a services-level change) 3. Someone whom I discussed the fix with for advice on the design 4. Always add the team so that anyone can choose to review.  Sometimes I don't choose someone specifically, and just add the team CR alias and let someone who has free time to do it."	Yes	"When a non-UI dev reviews UI code, they sometimes miss a lot of intricacies in the language and user interaction model that a UI dev doesn't.  I've found a number of bugs in UI code that a principal level services dev completely missed, and the opposite has been true as well (he has identified services level bugs that I've missed)."		howardwo	howardwo
6504886	Development		17	6		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"rarely, ususally just if design makes no sense"	up to 25% of the time	up to 25% of the time	Yes	"didn't write it, or are evaluating more than just changes"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"co-owner, owners of code being used or that will be dependent on new code/change, rest of team"	Yes	"the less familiar reviewers make more superficial comments, more likely to be comment / naming related less likely to find bugs"			jimcook
6504892	Development		10	10		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important"				When questions are not being efficiently resolved through text comments. When the code in question has more severe defects and needs some design discussion.	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code reviews always go to all immediate members of my team, but only one or two people are required to complete the review."	Yes	"Feedback is generally more thoughtful and more useful. When people are not familiar with the code, they often don't want to make a the investment to fully understand the code, in which case feedback is more based around coding style and logic errors than design flaws."		ryantrem	ryantrem
6504910	Development		1.5	0.9		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If the change requires a more detailed explanation. Common for large code reviews.	between 50% and 75% of the time	up to 25% of the time	Yes	Since you need to spend more time to understand the logic	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Owners of APIs, team members and code owners."	Yes	More detailed			
6504913	Test		1	1		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"I typically never talk in person- I make comments on the buddytest, or sometimes send an email."	Never	Never	Yes	Because I need to get acquainted with some of the existing code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Based on the current procedure for code check ins.  Normally just my immediate team reviews the code, but as the code base gets locked down, a more testers beyond my immediate team are invited to review.  Also, I invite any individuals who would also use the code (normally just my immediate team)."	Yes	They tend to be deeper comments (not just style comments) and more likely to criticize or suggest an alternative solution.			audreyla
6504916	Other	Program Manager	6	6		40	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Functionality that is not as expected.	up to 25% of the time	between 25% and 50% of the time	Yes										
6504922	Development		7	7		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important"				when additional clarification or understanding of written responses are required.   Id suggest having a common set of reasons for making comments for changes.  readability code duplication unused code performance supportability  have these as check boxes under the review comments and allow them to check all that apply to the comments they are making. This will help drive productive comments.	up to 25% of the time	between 25% and 50% of the time	Yes	many times there are changes to code that uses other objects for which the code is not available. Therefore its hard to know if the changes are or are not breaking something in that class that is not available. 	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"set list of people on my immediate group, and anyone effected by the change."	Yes	The feedback tends to be more actionable and thought out; understood.   There is less noise from the perspective of ignorant comments.   However sometimes there tends to be more nit picking comments about style. 	add the reason for comment check boxes I requested. This would be great and help drive us to thinking about our code comments in terms of what is the benefit of the requested change.	reidmi	reidmi
6504932	Test		15	2.6		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If there's an alternate/better way of doing something. If there's an obvious flaw/bug If coding standards/guidelines are not being met	between 50% and 75% of the time	up to 25% of the time	Yes	Knowledge of the files being reviewed aids in speading up the review process. If they are new files time needs to be spent ion understanding the new situation as to be effective in code reviewing it.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			Their familiarity with the code that im submitting for review Their years of experience and seniority	Yes	They are more specific to the design rather than simple syntax/efficiency kind of comments		eltitus	eltitus
6504956	Development		22	6		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	"I work on an open source components, and code reviews help assure us that we are putting our best foot forward. "			When I don't understand something.	up to 25% of the time	up to 25% of the time	No	"Because it is rare that I am made required on those types of reviews, and I rarely perform them if I'm optional."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Designated backup expert and another senior dev as desginated by the team lead or chosen by myself.  I am the only dev who works on the component full time.  Code reviews are the primary mechanish by which the backup gets to know the code and what is changing.	Yes	"Naturally.  If you know something well, you're able to make more insightful comments and suggestions."	Like the git integration.	jaykint	jaykint
6504984	Development		12	12		30	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Helping improving the development process in general / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding"				No				
6504986	Development		11.5	3.5		4	Yes	Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important				"When risky changes are being made, and/or changes may affect partner teams in a way that wasn't foreseen."	between 50% and 75% of the time	up to 25% of the time	Yes	"Need to understand the code briefly, and what it does, before being able to give meaningful and constructive feedback on the code (at least 90% of the cases)."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"- Always adding immediate team members as optional reviewers - Always adding owners of the code, or people with specially throrough understanding of the code I'm changing as required reviewers - Running Source Depot code change triggers and inviting diffe"	Yes	"Person may be reviewing the code, and what is does; more thoroughly than other reviewers."		demyren	demyren
6504991	Development		14	11		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"- When the change is big, to understand the deeper general concepts about the change. - When the person is close-by - When there is something I don't understand that would take too long to deal with by mail/im. - When there are a couple changes I want mad"	up to 25% of the time	up to 25% of the time	Yes	"I have to understand not only the change, but the reason for the change, and what other systems it may affect. When you are familiar the area, most of the time this is obvious. When you aren't, this takes time."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"- If I'm unsure of my change, I select the people who will be the most insightful. - If I'm confident enough about my change, I pick the most available person. - I try to avoid people who have a need to feel like they are important and systematically find"	No		"I think the biggest problem of code reviews is code velocity. Oftentimes, I will use the honor system and sign-off on something with a comment and trust the developer to do the right thing and change their code based on my comments.  I think sometimes people miss the point that code velocity is very important, and that in the time it takes to do a code review, we could have checked the code in and fixed the two bugs in it.  Before filling an issue, I try to apply the ""What will happen if it's checked-in as is?"" criteria. If it's not ""bad enough"", the issue should probably not be filed. I diverge from this early on when checking-in entire features, and with new developers that need to get into the coding mold of the product."		sebazim
6505016	Development		2	2		7	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				To explain a complicated change or area in the code.	up to 25% of the time	between 25% and 50% of the time	Yes	I try to understand the logic behind the code to make sure that it makes sense to me.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			People who are working on the feature or will be impacted by the change or should be aware of the change	Yes	People unfamiliar with the code want more comments explaining the code and people familiar with the code notice bugs and suggest improvements			rosteen
6505024	Development		4	4		30	Yes	"Avoiding build breaks / Third Most Important;#Finding defects/bugs / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				When the code is in an area that I'm not familiar with.  Or when the code is difficult to understand.	Never	More than 75% of the time	Yes	Takes time to understand the code before I try to review the changes.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Choose people who own this area of the code. 	Yes	The reviewers who know the area tend to give more comments.		pleong	pleong
6505048	Development		10	6		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				1. I case we cannot resolve our differences via email 2. Better undersnad code change	up to 25% of the time	up to 25% of the time	Yes	It takes longer to understand the fix	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			1. Based on the aria of ownership 2. Expertise level	Yes	"Code owner may point out the dependencies which could be affected by the change, suggest better solution."		aboudzko	aboudzko
6505050	Development		11.5	11.5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When the change suggested is major and I'm not expecting to be addressed immediately When the changelist reveals other major issues	up to 25% of the time	up to 25% of the time	No		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Feature crew + dev team as optional	Yes	"Higher probability of uncovering functional issues, beyond nit-picking."		csalvan	csalvan
6505057	Development		20	6		25	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"	Some code areas (e.g. javascript perf) require sign-off from a small set of drivers.				between 25% and 50% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Other area owners; relevant partner teams; required code review aliases; team code review alias	Yes	"Different audiences return different types of comments. Specialist reviewers generally respond with comments specific to their area (upgrade, loc, javascript perf, etc.); area owners / partners leave more detailed comments; testers ask questions about how code changes affect them."	"I pretty much ignore the emails - I get 20+ a day - and rely on the dashboard. That gives me almost everything I need, but I don't have an easy way to tell when a new revision has started. CodeFlow itself is also not great at showing me what changed between revisions."	randeen	randeen
6505063	Development		9	5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When I need a walkthrough of the code or similar, to better understand at a high level what the code does and why it needs to do this."	up to 25% of the time	between 25% and 50% of the time	Yes	Because I first need to understand the existing code before I can make valid contributions to the review.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"If I know ownership area, I use that knowledge, alternately I look at history in SD to understand who/what team has previously been modifying the affected objects."	Yes	"Reviewers unfamiliar with the code tend to give less functional review feedback, like code style."		thomastj	thomastj
6505066	Test		8.5	4		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"1) In case I've some suggestions, concerns or questions which are very better talked f-2-f with the author and when the concerns are addressed then post the summary back on code flow for everyone else to see. 2) In case there is something seriously wrong with the piece of code like design issues. 3) To say thanks for good handwriting :-)  "	between 25% and 50% of the time	up to 25% of the time	Yes	"To get familiar myself with the code/files, to get the overall context."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Peer testers, developer and PM are my default selections. I chose all other reviewers based on my experience with other team member's experience and also their review track record. The quality if review matter here a lot.  "	Yes	Mostly based on design aspects.	"[majam]Provide a way to ""like""/""pass smiles"" on review comments/feedback in code flow."	majam	majam
6505067	Development		3	3		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				#NAME?	up to 25% of the time	between 25% and 50% of the time	Yes	"If the files are new/unfamiliar, then understanding the context for the code review takes longer. The reviewer needs to understand the code surrounding the change, not just those lines that are being changed."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			- The owner/author of the files is included. - Anyone closely involved with the project is included. - Dev lead/proxy for dev lead is included. - The larger team under my dev manager is cc'd and can choose to join the review.	Yes	"Those who review with little understanding tend to focus on style issues or surface issues. The comments are usually deeper if the reviewer is someone with deeper understanding or someone who spends a lot of time on the review and understands the broader context. These comments, in addition to style issues, also generate good discussions on design, architecture and algorithms."	"I feel that current CR tools (such as Codeflow) make it hard to provide deep comments, because they don't aid in understanding the bigger context for the code change. Facilities available inside IDE (such as find all references, class diagrams, etc) are not available inside codeflow. Further, CR is in general a slow process whereas in-person CR is usually much quicker and leads to deeper discussions."	magar	magar
6505090	Development		11	10		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Overly complex changes -- especially ones that are not very clearly explainable in the code (missing comments, poor function names, legacy stuff, etc.)"	up to 25% of the time	up to 25% of the time	Yes	Most of the extra time spent is to understand context around the changes if I'm not familiar with that context.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on who I work with and who has changed a file before.	Yes	Generally more critical of changes			chackman
6505098	Development		7	5		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				1. Code not understood. 2. Prolonged back and forth in code-review comments.	up to 25% of the time	between 25% and 50% of the time	Yes	"If I'm familiar with the code, I know exactly what each function is doing, and can likely even predict the change being made. If not, I have to figure out what the existing code is doing first, before evaluating the change."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code (co-)owners, high-quality code-reviewers, knowledgeable team-mates."	No				samarths
6505113	Development		8.2	1.2		1	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				Clarification regarding specific approach	up to 25% of the time	Never	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes		"Easier to search old code reviews, showing latest/old reviews in a list and association with check-in log."		meeteshb@microsoft.com
6505118	Design and UX		3.5	3.5		4	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"If I have suggestions that would require a lengthy comment to explain, or if I have questions that require interactive discussion to resolve."	between 25% and 50% of the time	up to 25% of the time	Yes	"Understanding the changes requires understanding the context around them. If I'm unfamiliar with the files, this will take longer for me."				"Based on feature crew and other people involved with a feature. In addition, anyone who owns the file or project."	Yes	"Comments by people familiar with the code tend to be much more complex, thoughtful, and specific."		tlavoy	tlavoy
6505119	Development		12	2.5		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"If there is a question about the code design or why a certain approach was used.  I often use inline comments, but if the topic is complex or a deeper issue, I will reach out in person."	up to 25% of the time	between 25% and 50% of the time	Yes	I spend time getting some context of the code around the changes to ensure the changes make sense in that context.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Who is available, and who has the best context for the feature.  Occasionally a person is also selected to help them understand the code better as a learning tool."	Yes	They provide feedback based on their subject matter expertise and knowledge of the feature area which is valuable in understanding the impact of the change.			davsteve
6505121	Other	PM	3.5	3.5		6	Yes	"Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important"					up to 25% of the time	up to 25% of the time	Yes					Immediate feature team and others whose code is impacted.					anglass
6505137	Development		29	12		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When I don't uhderstand the code. When I don't uderstand the rationale for design choice.	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			If my code - someone who is likely to understand my code. Otherwise - owner of code I am changing.	Yes	"More thorough, more detailed."	This survey has some stupid questions.		michka
6505138	Development		20	13		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"	n/a			hardly ever	Never	Never	Yes	Unknown code	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Those relevant to the area.	Yes	more detailed and targeted			shusak
6505148	Development		10	4		20	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				"1. New engineers joining the team. 2. 'Declined', Code is not fixing problem or will cause major feature break."	up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Feature owners, Seniors and immediate team members."	No			cdhawan	cdhawan
6505156	Development		16	7		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"complex algorithm, design decisions"	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"Need to be familiar with the new code, style, APIs to use..."	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"owners, teammates"	Yes	depth		meishanl	meishanl
6505177	Development		7	5.5		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"				If the code is too complex	up to 25% of the time	between 50% and 75% of the time	Yes	To take the time to understand the bigger system to be able to catch potential bugs	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I choose people who are already fimiliar with the area	Yes	They provide bigger picture insight on potential bugs that require high knowledge of the system		samerel	samerel
6505187	Test		7	7		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"Any discussion that is too complicated to be summarized in one paragraph, or goes back and forth too many times."	Never	Never	Yes	"I prefer to understand all new code deeply and keep track of what's going in, as well as ""manually"" double check that new code isn't duplicating existing code, which wouldn't be in the review, but in the code tree."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"They're either owners of the code files, technical experts in that area, people I've talked to about the change or random people based on who's more or less busy."	Yes	"Usually there are *fewer* comments when the author is familiar with the code, since they don't have as many questions, or seem to assume I got it right."		tjgolter	tjgolter
6505193	Development		5	5		4	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"when there is misunderstanding beween comment, or don't understand the purpose of the code change."	up to 25% of the time	up to 25% of the time	Yes	"since it take more time to understand the change, and think about potential issues in the change."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding"			"immediate team members, code owner"	No				
6505194	Development		3.5	3.5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					between 50% and 75% of the time	between 50% and 75% of the time	Yes	I first have to understand the new code before I can understand the change. With files I am familiar with I can jump right to analyzing the changes.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on the area I have made changes to.	Yes	"Someone more familiar with the area will have often have better ideas about different approaches or corner cases that might not be covered. Someone less familiar is more likely to simply point out code style issues (comments, whitespace, etc.)"			chrisdie
6505201	Development		20	11		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1. When one side simply doesn't understand where the other side is coming from. 2. When an alternative approach can't be summed up in one sentence. 3. When the security model is unclear. 	up to 25% of the time	up to 25% of the time	Yes	"The order the files are presented in CodeFlow is not the logical order to go through those files in. You can't drill up or drill down the logical flow, just look at each file alone and in isolation. I don't expect CodeFlow to know the best order in which to present files, but if I could dream, a cross-file general find function (with back button to return you to where you were in the review) would be in the list along with a right-click 'Goto function declaration' (obviously would only work if said function was declared in a included file)"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"In order: 1. Stakeholders, 2. People workin in the same or related areas, 3. People who respond quickly, 4. People who have found problems in the past."	Yes	"Somebody who knows the code can point out the impact of the changes that analysis of the code does not. For example, I recently worked on a connection string feature (an area of the product I knew nothing about). The feature spec did not mention the effect this would have on unlinking a connected Website. The reviewer raised a question in review and we realized there was another whole feature affected."	Twice in the last 6 months I've completed a review only to find out that I needed to reopen it. CodeFlow does not allow completed reviews to be reopened (I think the author should be allowed to reopen them).	dbrankin	dbrankin
6505215	Test		12	7		6	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				When there is a completely different approach for solving the same problem.	up to 25% of the time	Never	No	"In the cases when i am not familiar with the files, i focus on general coding standards."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Common code owners, immediate team members and senior team members for getting the most feedback"	Yes	"If the reviewer is very familiar, he/she give feedbacks not just on coding standards but over all designs and logics ."			simebek
6505219	Development		15	4		6	Yes	"Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If you want to discuss a different approach to solve the issue. Or if you want to better understand the rationale for the code change.	up to 25% of the time	up to 25% of the time	Yes	It takes more time to understand the code in unfamiliar or new files.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People who have some functional or domain knowledge in cases where new features or there is significant behavior change. Simpler bug fixes can be sent to a broader audience.	Yes	Usually the comments/feedback are more detailed. Sometimes they may also provide a rationale for previous code behavior.			maanant
6505222	Test		16	14		11	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				1. I don't understand the whole design 2. The design is totally wrong 3. My suggestion is too complex to write as a code review comment	up to 25% of the time	More than 75% of the time	Yes	Need to understand what the code does first before checking the code quality	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1. Who are most familiar with the code 2. Who is most experienced and has best design and skill 3. Randomly pick 	Yes	"Usually he/she can find some big problem, not only the code quality problem"		juncao	juncao
6505224	Development		18	7		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				pretty rarely now -- the tool can automate that.	up to 25% of the time	between 25% and 50% of the time	Yes	"If they are new, I want to understand why they are they and what they are doing"	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"we have a defined list of people that listen to these, plus the relevant owners and test"	No		"The tool crashes sometimes when submitting a new CR, and all data is lost.  that is very painful to retype.  This has happened to me multiple times, and it makes me wary of using the tool.  This is typically when there are connectivity issues to the CR server."	andyness	andyness
6505229	Development		20	16		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"In cases where further clarification is needed. Where the code+comments can't be determined to be either correct or incorrect, or when code review feedback is seemingly ignored or misinterpreted."	up to 25% of the time	up to 25% of the time	Yes	"Obvious case: new files result in a larger amount of code to sift through, since diffs aren't present to point to substantive changes."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"My immediate team is small enough that it's often simplest to send the review to all devs. If there's a known expert, I'll add them as primary. If it's a dev-logged bug, I'll include that person too."	No				derekwes
6505233	Development		12	7		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Mostly just if discussion of some feedback goes beyond a few back and forth responses..  Sometimes it's easier to resolve complicated disputes in person.  Sometimes if the code is just hard to wrap my head around, I'll go ask the person for a deeper explanation of the functionality."	up to 25% of the time	up to 25% of the time	Yes	"Sometimes the logic is just strange.  :)  If the comments don't explain a particularly tricky piece of logic or functionality, that's usually a piece of feedback provided as well."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			1) People directly impacted by the changes 2) SMEs in changed code 3) People interested in the changes 	Yes	"Generally richer feedback/deeper comments about core logic or architecture, rather than more superficial StyleCop sort of feedback."	"It's probably a difficult feature, but having function/variable navigation would be super useful...  For example being able to control-click on a variable to navigate to the definition of the variable.  Less awesome but easier might be a simple way to navigate/see other instances of a text identifier in the changed files, like the ctrl-shift-f ""find in entire solution"" sort of view in VS.  If this already exists and I just haven't seen it, please let scbrad know.  :)"	scbrad	scbrad
6505234	Test		3	2.4		5	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When my suggested approach is too long-winded to be written down, and might need a whiteboard discussion. For a longer discussion, I do an in-person discussion, then return to my desk and summarize."	between 25% and 50% of the time	Never	Yes	"Because I don't own the code, it might take me longer to understand what the dev is doing, especially if it's an area I'm unfamiliar with!"	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"People who own features that are related to mine, people I know have a gift for catching mistakes, people who I know from experience are open to CRs, certain leads who like to be in the know, and a code review alias."	Yes	"Since he's more familiar with my style, he may be willing to look the other way on a few of my coding quirks (provided I have the right justification, of course).  With a new reviewer, I'll have to explain myself all over again. That might be tiresome."	"Codeflow should - allow direct submission, possibly with some additional validation gates. - allow us to include comments with each iteration. How silly that I publish subsequent iterations, and then have to follow up via email.  Just curious as to how many people actually use/are aware of the Ping feature. Most times, I just see people reply-all to Codeflow emails."	rmadtha	rmadtha
6505242	Development		11	7		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				When the high level of the change purpose is not clear. Or when a major issue arises and the whole design needs to be revisited.	up to 25% of the time	between 50% and 75% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"My immediate team, and teams/people that have a stake in the code being modified."	Yes	"The difference is gigantic.  The owner (or a very familiar person) is able to give a lot more insightful feedback, find bugs, locate perf problems, etc."			alisst
6505260	Development		12	3.5		5	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Problems with design; bugs introduced; possible performance issues; cannot agreee on used approach.	up to 25% of the time	Never	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"by team, by component"	Yes			alukyan	alukyan
6505346	Test		17	17		50	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"When the code changes need more context, such as why the code is being changed"	up to 25% of the time	up to 25% of the time	Yes	It takes more time to understand unfamiliar source files	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Automatic selection from a core group of code reviewers	Yes	People unfamiliar with the code may miss defects and potential improvements			aspruill
6505350	Development		8	5		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				when I think that completely different approach must be taken for solving a specific problem and it requires a significant amount of time.	Never	up to 25% of the time	Yes	it takes time to understand the logic to provide a meaningful feedback. 	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			people that are familiar with the code and senior guys.	Yes	they are far more meaningful	i'd be glad to participate in you dogfoods :)	dimast	dimast
6505360	Test		15.9	15.9		20	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Generate better ideas, alternative approaches / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important"				When I'm unclear of the intention of a change.	More than 75% of the time	up to 25% of the time	No	"Typically for code that I'm not familiar with, I am not the main reviewer so I'll review to learn about the change. That doesn't take me as long as when changes are being made to code I used to or currently own. In that case, I'm looking closely at potential downstream effects or how changes will affect existing scripts."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"If the previous code owner is still on my team, I'll make that person required. I sometimes add the dev of the feature. I select someone who knows what feature I'm coding. Finally, our team has an alias (uextcr) that includes senior SDETs who also want to code review"	Yes	Someone not familiar usually gives more general best practice feedback while someone familiar gives more specific suggestions and feedback related to the feature or connected features.	"If you want feedback specifically about the CodeFlow tool, I'm happy to help."	jannyw	jannyw
6505453	Development		12	7		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"					up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"								
6505523	Test		4.5	4.5		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"to explain/clear the doubts. We are all working in same floor so sometimes it's easy to discuss about comments than using tool.  For big CR(design changes), we would like to have session to make things clear for others, so that they can do better code review."	up to 25% of the time	between 50% and 75% of the time	Yes	Need to understand what exactly that file does. If change is about changing logic then it won't take time.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Complete understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Code framework(Design) owner, Component owner, Manager, Back-up person"	Yes	Comment is must one to change. Or without comments being addressed author cannot check-in the code.  Feedback is like a suggestion. Its up to the author to take it or not.	"N/A, survey captures good enough details."	veathipa	veathipa
6505647	Development		17	10		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If i do not understand the change.	up to 25% of the time	up to 25% of the time	Yes	"You know the sceen, this makes it faster."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Select people that knows the code.	Yes	more focus on functionality and less on style.			
6505757	Development		10	5		6	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / First Most Important"				None. annotations on Code Flow is pretty good. IM works for everything else.	up to 25% of the time	between 25% and 50% of the time	Yes	Need to know how the functions are being called/referenced. I use ExSearch in conjunction with CodeFlow	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / No understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			component experts. Let CodeFlow detect the rest.	Yes	They're more concise and usually warranted comments.	I think the find feature needs some improvements.		ansiow
6505759	Test		13	5		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When there's a massive code change stemming for an idea that is not documented, or some rationale i'm not aware of"	up to 25% of the time	up to 25% of the time	Yes	I try to understand the logic there before looking at the delta of the changes	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"We send to the entire team + relevant devs on the appropriate feature crews, if such exist"	Yes	"Feedback from reviewers that are familiar with the code is much more rich, and usually focuses more on the logic and less on the minor technical details."	CodeFlow is an amazing tool!	chents	chents
6505768	Development		15	6		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Primarily when they clearly don't understand the feedback, or how to proceed with a fix.  It can be easier to sync up face to face to resolve this.  It's also sometimes unclear on the overall priority of the various changes.  You can come up with a system to denote that or try to infer that in the text, but there is nothing provided in the tool to help with that."	between 50% and 75% of the time	between 25% and 50% of the time	Yes	"Takes longer to understand the intent of the change, not just the actual changes.  Often it appears to be ""ok"", but it's unclear if it solves the intended problem without much deeper understanding."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We generally have the code owners or backups as the primary reviewer.  The testers and all other devs are optional.  There is sadly usually little participation from optional reviewers.	Yes	I think at times they take the feedback or changes to existing code personally instead of being objective on the intent of the change.  This results in them being overly critical or not as open to the change.	"One of the most frustrating things with CodeFlow is that it shuts down on a connection issue.  It would be much more usable if it retried, and even gave you a way to save your work (local cache?).  Another is when changing the status of a comment, it would be great to auto-generate an entry saying who changed the status to what."	tcolley	tcolley
6505785	Development		20	16.5		7	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When the change is too large, too complicated or too far from the expected design."	up to 25% of the time	up to 25% of the time	Yes	If I am not framiliar with the code I need more time to collect the context to ensure the change fits with the rest of the system.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We have owners for components or areas. The owner must review all changes to that area. If the owner is not available other people can do the code review but the owner is expected to review the change after it is checked in.	Yes	The feedback usually asks more questions and there is a longer dialog. This is good for both and usually results in clarifying code changes or other small adjustments. 	"I would like a place to add ""overall"" feedback to the tool. Before the tool I would always include a short summary of what I would consider the quality of the change. It is very important to set the tone. You may have hundreds of comments but overall the code change is very good."	chand	chand
6505802	Test		6	6		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	up to 25% of the time	Yes						Yes				
6505806	Development		11	2		7	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"When my question is big and not specific.  Like ""what does this pack even do?"".  Or ""Explain to me how this thing works, because I don't get it"""	between 25% and 50% of the time	up to 25% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Complete understanding"			"My boss is always reviewer number one.  Next is the person who best know the feature, or perhaps they helped me writer the code, or helped me develop the approach to the solution"	Yes	"More nits.  ""Indent here"", ""pull this out to a variable"", etc."			mfinch
6505825	Development		13	13		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Discussing alternative implementations; discussing rationale behind current implementation	up to 25% of the time	up to 25% of the time	Yes	"Need to do research in the related areas, to catch any issues"	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			area / project owners	No			tangli	tangli
6505827	Test		18	4		2	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / First Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				when changes do not meet release to production requirements	up to 25% of the time	up to 25% of the time	No		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			by alias or sg	No			emanriv	emanriv
6505829	Development		3	3		5	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Where the reason for a particular piece of code is unclear or if I believe there may be a better approach.	between 25% and 50% of the time	up to 25% of the time	Yes	If the file is new then I would need to read the entire file (which is more code than a change). If it's unfamiliar I may need to look at related code being called that wasn't changed to ensure there wasn't a bug in that code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			I would usually select people who have familiarity with the feature/component or have worked on a similar feature before.	Yes	Feedback is usually more relevant to how the feature works.			twalters
6505837	Development		30	11		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important"	"NOTE: Code improvement for me is more about succinctness, clarity and code design."			Almost never.  Code authors have contacted me when they have concerns or questions about my comments.	Never	Never	Yes	It takes longer to understand what the code/changes are trying to accomplish at a high level.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"People familiar with the code, working on the same project or those on my team in that order."	Yes	"Comments from those not familiar relate to trivial formatting, spelling, etc.  Comments from those familiar are deeping concerning side effects, bugs and reuse."		kgunders	kgunders
6505839	Development		14	14		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				(1) When the change is large and complex and it's quicker to have the person walk me through some of the big pieces rather than try to figure it out myself. (2) When I have a question or need to discuss an issue in more detail and it's faster to go talk to them than communicate through comments on the review.	up to 25% of the time	between 25% and 50% of the time	Yes	"New files are not too difficult because the functionality is generally well contained enough that I can follow the flow. With existing files, it generally takes me more time to understand the nature of the change, if I'm not already familiar with the code."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			"I choose the people I know are most familiar with the code in question, or if there is no obvious choice, I choose a senior person or someone who is most active on the feature I am working on. Generally there is at least one other person on the team who is aware of the change I am making or the area of code, so it's an easy choice."	Yes	Generally people who are very familiar with the code are better able to spot subtle issues or inconsistencies with the rest of the code.			sparra
6505841	Development		11	11		9	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Sometimes it's easier to do it in-person if you don't have a lot of context, or if you just want to go through it quicker."	up to 25% of the time	between 25% and 50% of the time	Yes	You don't have as much context.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Usually people familiar with the matter, or the more senior members at least."	Yes	They can give better advice since they know the code well.		huyh	huyh
6505870	Development	Operations / Tools for Windows 8 Performance Gates and Bench	24	23		6	No	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important"	Code Quality - it isn't the same as code improvement; it is important to release the best code that is reasonably possible; this includes removing possible errors in the code (avoid regressions).			either when I don't understand their rational or I am at odds with it and want to be more personal and discuss it in person (as it is easier to have a meeting of the minds in person). 	up to 25% of the time	between 25% and 50% of the time	Yes	I need to understand how the code works in order to understand the ramifications of the changes (good or bad)	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Most knowledgeable in the area. People who have the time to do the review People who do the best in terms of reading the code and giving meaningful feedback.	Yes	"When someone knows the code, it will typically be more spot on feedback."	Your definition of Code Improvement is very lacking; none of them are the most important parts of code improvement).	johayes	
6505879	Development		31	4		10	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				"When I have deep concerns about the approach used, to explain those concerns in some detail.  When the change conflicts with another change planned or in progress."	up to 25% of the time	up to 25% of the time	Yes	Because it is necessary to learn and understand the context of the change and the surrounding design before passing judgment on the appropriateness of the change in that context.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I select people who are familiar with or owners of the area in the code being changed, people who are impacted by the change (e.g. API changes), or people who should be learning more about the area under change."	Yes	Unfamiliar reviewers sometime make comments that reveal a misunderstanding of the context of the change.		ngafter	ngafter
6505903	Test		6	6		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the review requires more bandwidth.	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			Area owners + immediate team.	Yes				
6505946	Development		14	10		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				If i don't understand what the author is trying to archieve with a specific change or if the code review contains a high number of files.	Never	up to 25% of the time	Yes	It does if you are looking for other stuff than coding practices.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			Always includes the team owning the code.	Yes	"If the reviewer does not know the area then feedback is around coding standards, best practices. If the reviewer knows the code then the feedback also includes comments on potential breaks and best pratices within that specific area of change."			
6505974	Development		18.5	17		12	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When I find significant problems with the code being reviewed When I do not understand what's being done in the code (my own learning). When we need to expedite the code review process (our policy is to have a code review completed prior to check-in).	up to 25% of the time	up to 25% of the time	Yes	"With new files, the time required to perform the review depends on the amount of code, and the patterns/coding style used in the code.  With files that I'm not familiar with, it completely depends on the code being reviewed."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Team policy -- We use CodeFlow, and all of our code reviews go to an alias specificly for code reviews. In cases where I'm working with someone else's feature/code, I include that person as a required reviewer as well."	Yes	"I've found that when the reviewer is familiar with the code being reviewed, there tend to be fewer comments altogether. "		chrisco	chrisco
6506045	Development		7	5		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				"1. The changes I'm asking for are significant, including requesting a different design approach. 2. The person is immediately ready to check-in and is not ready to hear real comments; they are just sumitting the code review because of policy."	up to 25% of the time	up to 25% of the time	Yes	"I don't fully understand how the change impacts the overall system or the overall change.  Sometimes, I will need to lookup other source code to see how the new code relates."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I select the people based on existing ownership as well as who I expect will actually review the code or will feel compelled to review the code.	Yes	"Code reviewers that are familiar with the code send less questions about what a section of code is for, or why it is needed."		brianrob	brianrob
6506103	Test		6	3		6	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				In codeflow you can mark comments as 'won't fix' without a comment.  In that case if I still disagree I will talk to the code writer in person to find out why.  I don't think 'won't fix' should be allowed without a reason why.	More than 75% of the time	between 25% and 50% of the time	Yes	It takes longer to understand what the code is doing.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I pick people I've talked to in person about the code and who I know reliably provide insightful comments and suggestions on my code.  I do not like it when people sign off on code reviews without commenting at all so I generally do not select those people.	Yes	Generally the comments are more detailed.	It would be helpful for test if in CodeFlow there was an extra requirement to buddy build/run tests before sign-off.  An extra check box before you can select 'sign off' would really help us prevent build breaks and ensure that changes to test code are actually effective.  If it is mandated people tend to not do it. :(	ktsouka	ktsouka
6506104	Development		4	4		8	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				I usually only need to talk to the author if the code review is extremely large (in which case it's often better to get a guided tour of the changes) or if there's a very large disconnect between the code that was implemented and the desired behavior. 	up to 25% of the time	up to 25% of the time	Yes	"I first need to understand the entire original file, what it's purpose is, and how it fits into the larger picture. Only after I've done that can I make judgements about the changes. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Complete understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I usually try to find the people who know the area the best to get a review, but if time is short, or if the review is very minor, I might just take the first available person. In general, though, it's the policy of our team to include the our team's alias on all code reviews, so even if I don't call someone out by name, anyone is free to participate if they wish. "	Yes	People who have more domain knowledge tend to provide better reviews and are more able to suggest approaches that fit in better with the rest of the codebase.		acottle	acottle
6506156	Test		8	6		3	Yes	"Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"Need? Probably nothing /has/ to be done in person, but some things are much easier and more efficient in person than lots of ping/pong back and forth in a CR."	up to 25% of the time	between 50% and 75% of the time	Yes	Have to become familiar with the structure and goal of the code.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Lead, feature area owner, and/or competent peer."	Yes	More insightful comments and suggestions on code structure and algorithms	Please add ability to see diffs between iterations		danielav
6506163	Development		9	9		12	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				For large changes or when the author doesn't provide a detailed description of the changes.	up to 25% of the time	up to 25% of the time	Yes	"Reviewing a change isn't just about reviewing the delta, it's about understanding the context for the change as well as the context of the code to make sure that this is the ""right"" change to make and then to ensure the correctness and cleanliness of the change.  For unfamiliar areas it takes longer to learn and understand the context."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Complete understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I send it to the team(s) that owns the component(s).	Yes	Unfamiliar reviewers often give aesthetic feedback instead of trying to understand the change deeply and give a thoughtful review.		jevansa	jevansa
6506164	Development		7	7		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important"				"Do not understand code, overly complicated feedback, or a suggestion for a larger redesign."	up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Those most knowledgable about that area of code, or whose code is affected."	Yes				bgusta
6506171	Other	Progam Management	8	4		12	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important"	"Improved usability - as a PM I'm most interested in the shape of APIs that folks are adding, the intelisesnse comments and error messages."			When I think a change looks messy but I don't know what it should look like - I need to brainstorm with them.	up to 25% of the time	up to 25% of the time	Yes	I need to understand the functionality to see if their code is correct.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			We always send all reviews to our whole team.	No				rowmil
6506198	Development		20	8		4	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Finding defects/bugs / Second Most Important"	I use them as a way to communicate specific changes and improvements being made to 'shared' technology used by a number of platforms/teams.			I seldom need to do a 'in person' discussion for these.	Never	Never	No	"I focus on the diffs and that keeps the overall context knowledge to a minimum. I feel I can get more detailed and find bugs in other parts of the code if I'm already familiar, so I would say I probably give better feedback in those cases but it doesn't take a lot longer."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Immediate team members or known experts.	Yes	experts tend to report more deep-level bugs or subtle assumptions that are being violated.			chuckw
6506227	Development		3.5	3.5		15	Yes	"Avoiding build breaks / Third Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance"				I have virtually never needed to do this.	Never	Never	Yes	I need to spend more time understanding context and otherwise becoming more familiar with the code I need to review.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I choose people who are fairly familiar with the code area I am changing.	Yes	Usually the comments are more explicit about not fully understanding the area and are usually more generic or universally applicable to patterns or best practices than about specific implementation details.			
6506229	Development		20	11		30	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important"				too many iterations.	up to 25% of the time	between 25% and 50% of the time	Yes	not all the context in the changed files.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"								
6506238	Test		9	8		40	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important"				1) When the code changes are not super clear 2) When there are alternative approaches to the problem	up to 25% of the time	up to 25% of the time	Yes	To understand how the changes are going to impact the existing code	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Every code reviewer has their own strengths and I usually pick the code reviewers based on the type of the change. For example, somebody might be really good at designing the code. If my code chnage constitutes design changes, then I include that guy."	Yes	The comments are more technical/design oriented.		manimm	manimm
6506296	Test		11	9		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important"				When it is too time consuming to type out a suggestion. Design change requests where a whiteboard is helpful.	up to 25% of the time	up to 25% of the time	Yes	I have to understand the context of the changes.	"Avoiding build breaks / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding"			"Knowledge of area of change, technology expert, sideways impact."	Yes	More likely to find regression.	"Code review tools such as codeflow have a lot of room for improvement. Here are a couple of suggestions -  1. Integrate with visual studio projects so I can get intellisense and references while reviewing. If the author is using a type, I should be able to navigate to that type just like in a VS project. 2. Allow code review after check-in."		vijayram
6506324	Development		12	12		32	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				Complex changes or logic changes that depend upon existing code which wasn't modified as part of the review and are not obvious within a few minutes of review. 	up to 25% of the time	up to 25% of the time	Yes	To gather the context of the changes being made and understand if they are appropriate.  Just reading the changes alone isn't sufficient to review effectively. 	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Areas of knowledge.  Test and Dev in many cases	Yes	Expecters have a better understanding of the code and can see more abstract deficiencies or issues that may manifest themselves in other parts of the code that were not edited. 		rhouser	rhouser
6506333	Development		4	4		40	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the change is large and complicated it is helpful to talk to the author to get an overview and roadmap for reviewing the change.  It's nice to have a clear understanding of the big picture before diving into the details.	between 50% and 75% of the time	between 25% and 50% of the time	Yes	"A lot of times I'll have to poke around the related source code that might not be included in the change, especially when looking for missed cases or unintended side effects."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Secondary owners for areas, people who have made related changes or changes that impact closely related areas, perf or accessibility experts as appropriate."	Yes	"When people are not familiar with the area they provide comments on code correctness, not change correctness.  When people understand the area they are able to alert you to piecese of the code that you might not have even considered, and they are also better at pointing out side effects and broader impact of changes that perhaps look small locally."	"Sometimes, if I'm really stumped about who should be reviewing a change I'll look through source depot to find people changing the code around my change.  It would be really awesome if the code review tool could suggest reviewers based on source depot or the nature of the change (for example, suggest the team perf alias if your change includes critical sections or async tasks)."	kaflinn	kaflinn
6506336	Development		10	10		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important;#Finding defects/bugs / Not Top 3 Importance;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When there is a fundamental design flaw or a repeated pattern that shows up in multiple code reviews that needs attention.	up to 25% of the time	between 25% and 50% of the time	Yes	Need more time to understand what the change is doing.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People who owns the files and people who are working in the same area.	Yes	"For reviewers who aren't familiar with the files, the most I get are style issues and obvious mistakes like forgetting to initialize a variable. For reviewers who are familiar, they can give deeper feedback like identifying other components that are doing the same thing, layer dependency issues, and bad cross component assumptions."			bfung
6506346	Test		4	4		5	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					between 25% and 50% of the time	Never	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				Yes			ddhodap	ddhodap
6506352	Development		25	12		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Understand what the change is truly trying to do. Gain understanding of the larger environment and problem. Discuss a different solution.	between 25% and 50% of the time	up to 25% of the time	Yes	It takes longer to understand the specific problem and what works best with the exiting code. That said since I am not as familiar with the code I also have less to contribute on alternative designs and also less likely to see system related mistakes.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Reviewers alias of pre-designated reviewers.	Yes	Always a better review from someone that is knowledgeible.		dancl	dancl
6506355	Test		10	5		50	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				to understand the general reason for the code change	Never	up to 25% of the time	Yes	I have to understand how this change fit's into the other portions of the code in the change	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			autoselected by our team tool	Yes	it is more pointed better approach or design request		barathb	barathb
6506360	Test		15	4		4	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important"				FOr clarity purposes.	between 25% and 50% of the time	between 50% and 75% of the time	Yes	Unfamiliarity=need for better understanding of dependancies.	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / No understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Immediate team, counterpart dev and lead."	Yes	More specific questions about the changes.			
6506415	Development		1	1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				If it is hard to explain something in the comments. Found something really critical / or anything which I am not on same page with the author.	More than 75% of the time	up to 25% of the time	Yes	"Need extra time to figure out why and what, compared to something which we have known earlier."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I add anyone who owns the area/files or the one who would be impacted by the change. If it is totally new that I am designing, then I would add people who rely on my component, or people owning components that I rely on (unless it is huge component on explained very well on wiki)."	Yes	"Sometimes, when I write a code and send it to a reviewer who has already discussed the changes with me, is blocked and does not think out of the box. Sending out to a reviewer who does not know anything about my code, might come up with a question that we may not have thought of. "		ankitsh	ankitsh
6506466	Development		9	9		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Almost all.  Reviews in person are much much better than those done over e-mail/remotely/asynchronously.  You want the person submitting the code for review to be able to talk through it.	More than 75% of the time	More than 75% of the time	Yes	Because I have to familiarize myself with them	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Based on either expertise in the area or lack thereof (E.g. helping to educate someone new to the area)	Yes	More likely to comment on dependencies or issues that aren't obvious from the just the lines that changed as part of the review.		aaroner	aaroner
6506483	Test		9	4		6	No	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Most frequently it is due to the need for a detailed design discussion (either to push back on the submitted changes or to understand them) or when I see integration issues with some other features or customer requirements. I also have met to communicate testability issues and requests. If the issue takes more than a few lines of comments or might be misunderstood in text (including ""tone of voice""), I will frequently make a brief comment and then follow up in person.  "	between 25% and 50% of the time	up to 25% of the time	Yes	"I have to build up my mental map of the new or unfamiliar code, to be effective. "	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Complete understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"We generally use the whole team alias, but if I am changing code for which there is another ""primary"" author or someone with whom I have discussed the changes, or someone much more knowledgeable about the code or technology, then I will add them explicitly as well."	Yes	Only reviewers who are familiar with the code. architecture or approach can comment on whether the changes/additions fit well with existing work and follow appropriate patterns.			lygasch
6506518	Development		22	0.7		3	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance"					up to 25% of the time	up to 25% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"				Yes				clifday
6506519	Development		6.5	6.5		4	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Usually it is for clarification if I am unsure why something was changed the way it was. This usually means more commenting is needed.  Sometimes it is because the approach does not seem ideal to me and it would be too difficult to express that through CodeFlow comments.	between 25% and 50% of the time	between 25% and 50% of the time	Yes	"I need to understand more surrounding code if I am unfamiliar with the file. If I am familar with the file, I mostly just need to look at the changes."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			I always include all developers and testers on my team.	Yes	"Feedback from reviewers who are familar with the code has more depth. Feedback from reviewers who are not familiar generally only have superficial feedback (style, readability, etc)."			bryceh
6506520	Test		5	2		18	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Third Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				"In case of conflict of opinions. Suppose I suggest some fix the code and author declines to fix it, we chat in person to come to consensus. Few times I have spoken in person when it requires examples (may be from existing code) to explain my thoughts about improvements."	up to 25% of the time	Never	Yes	"Understanding code takes time, also our CR process uses codeflow which does not provide enough flexibility to navigate through code, so you might have to open up visual studio and look into related parts of code along with changed files to understand the change completely."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Complete understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			2 groups -   1.Those who are functionally well aware of the changes to ensure functional correctness.  2.Those who are not fully aware of funcationality but are experts in architecture/BestPractices/Libraries etc who can suggest improvements to code. 	Yes	"Detailed comments, Refactoring/improvements suggestions, functional correctness, minor, boundary conditions to consider etc.."		ranjanbs	ranjanbs
6506548	Development		15	6		20	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / First Most Important"				Disagreement and significant change request on the Spec or Design 	Never	Never	Yes	"The less code you write, the better. Hence I end up spending more time on the newly added code to see if we can avoid much of it.  For the smaller changes to unfamiliar code, it depends on the specific change. "	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding"			"SMEs on TO line, as Reviewer and Entire Feature Crew in CC as FYI. Interested folks on CC elevate themselves to Reviewer status. "	Yes	"Folks with high familiarity with the code bring more scenarios to the table, and ensure the planned change handles them well. "			
6506555	Product support		4	4		3	Yes	Avoiding build breaks / Third Most Important;#Finding defects/bugs / First Most Important;#Keeping track of comments and rationale on code changes / Second Most Important				When it's a very large review	Never	between 50% and 75% of the time	Yes		"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Team alias for code reviews.	Yes	Get more comments.			
6506560	Build		15	0		1	No	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Second Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Second Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Second Most Important"				Reporting bugs	between 25% and 50% of the time	between 25% and 50% of the time	No	I m not a developper	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			developper Customer support 	Yes	depending the level of understanding and experience on the product	détails of product	raphamun	raphamun
6506799	Development		7.5	6		4	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / First Most Important"	All of the above reasons are valid reasons for code review.			When i do not understand the code or there is something fundamentally flawed in the code change.	between 25% and 50% of the time	between 50% and 75% of the time	Yes	"Because new code has new logic which I need to fully understand and in context of the rest of the code.  The resident code, or code under my scope I know already and can only evaluate the change based on the DIFF."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / No understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			It's a review alias that encopasses the development force of the extended team.	Yes	"Usually the commenter that does not understand the code are limited to syntatic and obvious issues. To get detailed feedback, the reviewer needs to be contextualized with the feature."	"Codeflow is a very heavy tool. a lightweight version should be made available. Also, consider a cloud solution."		alamego
6506807	Test		11	4		3	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Helping improving the development process in general / Third Most Important;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Third Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					between 25% and 50% of the time	More than 75% of the time	Yes		"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"				Yes				
6506913	Product support		21	21		10	Yes	"Avoiding build breaks / First Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Third Most Important;#Keeping track of comments and rationale on code changes / Not Top 3 Importance"				only if don't understand logic of change or purpose of change	up to 25% of the time	between 25% and 50% of the time	Yes	yes due to not being familiar with code.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / No understanding"			We have a policy which defines that a principal escalation engineer needs to review code.  If I am working on something not specific to my group I include owners.	No		"I would like to see the ability to add reviewers after a review is published as sometimes scope of change increases requiring more reviewers.  Additionally, it would be nice to be able to add new files to a review but not sure if that is not already there."		
6506922	Development		8	8		50	Yes	"Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"The most common cases: 1. When I don't immediately understand the entirety of the code review, and a quick in-person discussion can help get my head in the right place. 2. When I have an idea for an alternate approach; discussing in person is generally the most efficient way to communicate that. 3. When I want to explain in some detail why I'm giving the feedback I'm giving.  These are usually learning opportunities for more junior devs (e.g., why do we have this particular coding convention, and why am I being strict about enforcing it here?)."	between 25% and 50% of the time	up to 25% of the time	No	"When I'm less familiar with a given area, I have fewer things on the mental checklist to check off as I consider the code change.  There is some minimum threshold of familiarity I need with an area before I decline the review, but changes that are very close to that threshold I tend to have fewer things to check than changes in areas I'm very familiar with."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"It depends on where we are in the cycle.  Earlier on, where there's more room for risk, I'll often get reviews from more junior devs.  This gives us a chance to discuss areas and team philosophy with which they're likely not familiar.  The closer we get to the end of the cycle, the more I ""draw in"" to the more senior devs who I know can really help evaluate the correctness of a change."	Yes	"Comments from folks who are very familiar with the code in question tend to be higher-level in nature (e.g., did you remember to consider the interaction with Feature X in Case Y?).  Those from folks less familiar tend to be very low-level (e.g., you forgot to check for NULL here).  Interestingly, I find that the very familiar folks often forget to check for the lower-level details, because their focus is on the logic of the change, not the mechanics."		benbu	benbu
6507020	Development		8	8		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				"If it is a large, complicated change, or in an area that I'm not familiar with, I like to talk to the author to get a big picture sense of what the code is supposed to do before I look at it in detail."	up to 25% of the time	between 25% and 50% of the time	Yes	"Besides the obvious?  I have to spend time not only understanding what the NEW code is doing, but also what the OLD code was doing."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			From top priority to lowest: 1) People that own the code/feature. 2) People whose expertise I trust to give good feedback 3) Spreading out reviews among my teammates  I try to include at least two reviewers.	Yes	They're more able to catch high level issues such as subtle interactions between components.  They can explain the reasoning behind previous design choices and how my changes should adhere to them.		smikula	smikula
6507022	Test		13	11		15	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / First Most Important;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				I need to talk to the author of the changes when --I don't understand the original code thoroughly --I believe the changes are a step in the wrong direction and should be completely reworked	up to 25% of the time	between 50% and 75% of the time	Yes	I need to learn about the original code as well as the proposed changes so it takes more time.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			They are either  -owners/stakeholders of the files I am changing  -people who give good reviews in general	Yes	Feedback is less formal when people are very familiar with the contents of the files and with each other.		ldignan	ldignan
6507101	Development		1	1		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Third Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Second Most Important"				"If I don't understand the code, or if I have an idea regarding the basic structure of the solution that is orthogonal to the code written."	between 25% and 50% of the time	up to 25% of the time	Yes	"It depends. If they exist, and I'm unfamiliar, I assume someone else will read them more carefully. If it's new code, I'll look over it pretty carefully."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"I normally use the auto recommendation tool, and then customize it."	Yes	"There is normally a lot more detail, and comments are generally more pointed and useful."	"I think it would be a great idea to start using CodeFlow as more than a review service. Many times, other devs want to do similar things based on a CL, and I think it's much more convenient to show these in Codeflow than in SDV for example."	michvo	michvo
6507134	Development		2	2		3	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Second Most Important;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the comment thread becomes too long or if there is a major design issue.	up to 25% of the time	up to 25% of the time	Yes	"I have to get to know what the code depends on to review it properly.  Things like what functions are being called in new code, etc."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / No understanding"			We have an alias which we send all of our code reviews to.  This includes all of the potential reviewers for our system.	Yes	"Most of the time, a reviewer not familiar with the code will only comment on syntax or surface issues. A reviewer familiar with the code will comment on more design issues or complicated bugs."			philwass
6507138	Development		24	17		6	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Finding defects/bugs / Second Most Important;#Helping improving the development process in general / Third Most Important"				"Critical failures in the code, fundamental misunderstandings about what the code is trying to do, describing conditions that the author may not have known about that could effect the code's behavior.  When dealing with junior developers, giving more detailed feedback, either to save time writing or to prevent publicly embarassing a junior developer with a large number of comments in a public forum."	between 25% and 50% of the time	between 25% and 50% of the time	No	"Everyone approaches problems differently, regardless of coding standards enforced by the team.  You can either try to rewrite everyone in your own style or learn to read other people's code.  I chose the latter."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"Technical expertise, subject area familiarity, responsiveness (in that order)"	Yes	"Sometimes a fresh set of eyes can notice a problem that people who are overly familiar with the code would discount as ""that's the way we've always done it.""  Sometimes, the act of explaining what your code does to a person who has never seen it causes you to reevaluate your own approach."			allenwa
6507145	Development		5.5	4.1		5	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Second Most Important;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"I prefer an in-person meeting (or the virtual equivalent; in general, 'taking offline') if there's a question, comment or misunderstanding longer than I can explain in a hundred words, or if I believe there will be iterative back-and-forth related to the feedback.  I'll also 'take it offline' if more people need to be drawn into the discussion, e.g. other feature owners need to be consulted on the impact of a change."	up to 25% of the time	up to 25% of the time	Yes	"To give a thorough review of flow and component interaction, I first need to have at least a basic understanding of the existing architecture. If a file is very unfamiliar to me, it's likely that I don't yet have a good grasp on what's going on in the file--that means I need to read quite a bit more before I can give a meaningful, helpful review.  Also, it's good for me to learn about what's going on in the process."	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Little understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / No understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / No understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			"I choose people familiar with the code (e.g. 'owners'), relevant technical leads in the product area I'm working in, and general review aliases where we share collective review responsibility."	Yes	"This should be pretty self-evident: reviewers intimately familiar with the code being reviewed are much more likely to provide deep, analytical feedback that not only performs syntactic and general engineering checks, but also checks against architecture constraints and suggests alternate approaches or more efficient solutions to the entire system."	"I think a dimension that you may be missing in this survey is the author *reliance* on code review for good submissions. I've seen a wide range on this continuum, with some authors meticulously perusing their own code time and time again before sharing it, while others practically use the CR as their first compile check.  The thing is, the ideal approach is somewhere between these two extremes. Doing too much on your own before soliciting feedback often entrenches you too much into your assumptions, and can waste large amounts of time that a peer could save you; not doing enough before feedback wastes time by throwing out distracting, mundane mechanical issues that draw attention away from more meaningful topics.  I think it'd be interesting to get an idea of how crucial people feel code reviews are--and in what quantity--to produce code good enough to ship; I bet there's quite a range.  "	travisw	travisw
6507181	Design and UX		5	5		44	Yes	"Avoiding build breaks / First Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / Second Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				"Generally, I talk when there's A) something I don't understand that isn't commented either in the code or in CodeFlow; B) I disagree with an approach and don't want to have an exchange back and forth on CodeFlow; C) The comments I have are too extensive to use CodeFlow comments"	up to 25% of the time	up to 25% of the time	Yes	"Figuring out the context of a change on a piece of code I haven't been directly involved with can be a challenge. Also, since I mostly work on designey code (XAML, HTML, CSS), determining the interaction or visual impact of a change is often not immediately obvious just from reading markup or code. Often, I have to grab a shelveset and run a buddy build to figure it out."	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"A) Developer who 'owns' a particular piece of code (i.e. their ass is on the line if it breaks); B) Developer(s) who edited the code last (I regularly look through a change history to find reviewers); C) Tester(s) for the feature area involved; D) People I know have a history of working on a similar problem; E) People who I know a change will impact (especially if the item is a shared resource/dependency); F) People with little experience with the item being reviewed, as a neutral-party sanity check."	Yes	I generally take these comments more seriously		jdwelch	jdwelch
6507239	Development		12	10		10	Yes	"Avoiding build breaks / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				Only when intent of code change is not clear.	Never	Never	Yes	Getting handle on what overall code does and how does it fit into bigger picture.	"Avoiding build breaks / Complete understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / No understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / High understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / High understanding"			People most failiar with the code.	Yes	Sometimes the assumptions in the code are challenged.			gauravbi
6507345	Development		18	14		9	Yes	Avoiding build breaks / Third Most Important;#Finding defects/bugs / Second Most Important;#Helping improving the development process in general / First Most Important	Code quality			misunderstandings on the intent. Normally do not do it. Feedback is provided through a tool for CR.	up to 25% of the time	between 25% and 50% of the time	Yes	"Understanding the relationship and what the code is doing what the intent is, but basically getting into the domain."	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			Team members and others who may have worked in the code in the past.	Yes	Many have historical reasons why things are done that way and dependencies.	Most teams have guidelines for coding and reviews we apply those	yes	yes
6507566	Development		6	6		3	Yes	"Collective Code Ownership (i.e., make developers less “protective” of their code) / Third Most Important;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"					up to 25% of the time	Never	Yes	don't know context and function purpose. need study the code first.	"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / Complete understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Complete understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"co-owner, team member, related component owner, sometimes user also need"	Yes				
6507608	Development		1	1		8	Yes	"Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Second Most Important;#Team Awareness/Transparency (knowing what is going on in the development) / Third Most Important"				#NAME?	up to 25% of the time	up to 25% of the time	Yes	"I need to spend time understanding the existing code, since it forms the context of the changes under review."	"Avoiding build breaks / High understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Little understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / High understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / Little understanding;#Keeping track of comments and rationale on code changes / Little understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / High understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			#NAME?	Yes	#NAME?			
6507612	Development		5	1.2		7	Yes	"Avoiding build breaks / Second Most Important;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / Third Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / First Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Not Top 3 Importance;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"					up to 25% of the time	between 25% and 50% of the time	Yes		"Avoiding build breaks / No understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / High understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / Little understanding;#Generate better ideas, alternative approaches / Complete understanding;#Helping improving the development process in general / High understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"				No			leonl	
6507655	Development		21	13.5		10	Yes	"Avoiding build breaks / Not Top 3 Importance;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / First Most Important;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Not Top 3 Importance;#Finding defects/bugs / Third Most Important;#Generate better ideas, alternative approaches / Not Top 3 Importance;#Helping improving the development process in general / Not Top 3 Importance;#Keeping track of comments and rationale on code changes / Second Most Important;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Not Top 3 Importance;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Not Top 3 Importance;#Team Awareness/Transparency (knowing what is going on in the development) / Not Top 3 Importance"				When the design is wrong in general or when there are better design alternatives. In both cases some substantial implementation changes would be required to the submitted code. 	up to 25% of the time	up to 25% of the time	Yes	Because it requires understanding the general design first.	"Avoiding build breaks / Little understanding;#Code Improvement (e.g., better readability, improved comments, removing dead/duplicate code) / No understanding;#Collective Code Ownership (i.e., make developers less “protective” of their code) / Little understanding;#Finding defects/bugs / High understanding;#Generate better ideas, alternative approaches / High understanding;#Helping improving the development process in general / No understanding;#Keeping track of comments and rationale on code changes / High understanding;#Shared Technical Learning (e.g., APIs, System Design, Team Conventions, Best Practices) / Little understanding;#Team Assessment (i.e., evaluating the ability of team members to review code and write code well) / Little understanding;#Team Awareness/Transparency (knowing what is going on in the development) / Little understanding"			"Usually, based on code ownership and/or familiarity with the code.  Sometimes I pick reviewers that would benefit from learning the modified code or when they are taking ownership of that code."	Yes	"Usually when reviewer is familiar with the code the feedback includes far more comments about the design choices, suggestions about refactoring, optimizations, etc. In general the feedback becomes far more in-depth and design oriented and far less superfacial."	In general there should be a far better way to track design changes and design revisions with the code. Design document are often stored separately and become stale. The code being reviews very often doesn't convey design assumptions clearly and that significantly affects code maintainability.		stanisc
